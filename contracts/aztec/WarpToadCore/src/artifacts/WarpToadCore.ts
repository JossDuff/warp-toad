
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  type AbiType,
  AztecAddress,
  type AztecAddressLike,
  CompleteAddress,
  Contract,
  type ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  type ContractInstanceWithAddress,
  type ContractMethod,
  type ContractStorageLayout,
  type ContractNotes,
  decodeFromAbi,
  DeployMethod,
  EthAddress,
  type EthAddressLike,
  EventSelector,
  type FieldLike,
  Fr,
  type FunctionSelectorLike,
  L1EventPayload,
  loadContractArtifact,
  loadContractArtifactForPublic,
  type NoirCompiledContract,
  NoteSelector,
  Point,
  type PublicKey,
  PublicKeys,
  type Wallet,
  type U128Like,
  type WrappedFieldLike,
} from '@aztec/aztec.js';
import WarpToadCoreContractArtifactJson from '../../target/WarpToadCore-WarpToadCore.json' assert { type: 'json' };
export const WarpToadCoreContractArtifact = loadContractArtifact(WarpToadCoreContractArtifactJson as NoirCompiledContract);



/**
 * Type-safe interface for contract WarpToadCore;
 */
export class WarpToadCoreContract extends ContractBase {
  
  private constructor(
    instance: ContractInstanceWithAddress,
    wallet: Wallet,
  ) {
    super(instance, WarpToadCoreContractArtifact, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, WarpToadCoreContract.artifact, wallet) as Promise<WarpToadCoreContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, giga_root_history_size: (bigint | number)) {
    return new DeployMethod<WarpToadCoreContract>(PublicKeys.default(), wallet, WarpToadCoreContractArtifact, WarpToadCoreContract.at, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeys(publicKeys: PublicKeys, wallet: Wallet, giga_root_history_size: (bigint | number)) {
    return new DeployMethod<WarpToadCoreContract>(publicKeys, wallet, WarpToadCoreContractArtifact, WarpToadCoreContract.at, Array.from(arguments).slice(2));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof WarpToadCoreContract['methods']>(
    opts: { publicKeys?: PublicKeys; method?: M; wallet: Wallet },
    ...args: Parameters<WarpToadCoreContract['methods'][M]>
  ) {
    return new DeployMethod<WarpToadCoreContract>(
      opts.publicKeys ?? PublicKeys.default(),
      opts.wallet,
      WarpToadCoreContractArtifact,
      WarpToadCoreContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return WarpToadCoreContractArtifact;
  }

  /**
   * Returns this contract's artifact with public bytecode.
   */
  public static get artifactForPublic(): ContractArtifact {
    return loadContractArtifactForPublic(WarpToadCoreContractArtifactJson as NoirCompiledContract);
  }
  

  public static get storage(): ContractStorageLayout<'giga_root' | 'giga_root_history' | 'giga_root_history_size' | 'giga_root_history_index' | 'L1_contract' | 'balances' | 'commitments'> {
      return {
        giga_root: {
      slot: new Fr(1n),
    },
giga_root_history: {
      slot: new Fr(2n),
    },
giga_root_history_size: {
      slot: new Fr(3n),
    },
giga_root_history_index: {
      slot: new Fr(5n),
    },
L1_contract: {
      slot: new Fr(6n),
    },
balances: {
      slot: new Fr(7n),
    },
commitments: {
      slot: new Fr(8n),
    }
      } as ContractStorageLayout<'giga_root' | 'giga_root_history' | 'giga_root_history_size' | 'giga_root_history_index' | 'L1_contract' | 'balances' | 'commitments'>;
    }
    

  public static get notes(): ContractNotes<'WarpToadNote' | 'ValueNote'> {
    return {
      WarpToadNote: {
          id: new NoteSelector(1),
        },
ValueNote: {
          id: new NoteSelector(0),
        }
    } as ContractNotes<'WarpToadNote' | 'ValueNote'>;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public declare methods: {
    
    /** burn(amount: integer, destination_chain_id: field, secret: field, nullifier_preimg: field, sender: struct) */
    burn: ((amount: (bigint | number), destination_chain_id: FieldLike, secret: FieldLike, nullifier_preimg: FieldLike, sender: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** constructor(giga_root_history_size: integer) */
    constructor: ((giga_root_history_size: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_all_giga_roots() */
    get_all_giga_roots: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_balance(owner: struct) */
    get_balance: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_chain_id() */
    get_chain_id: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_giga_root() */
    get_giga_root: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_historical_giga_root() */
    get_historical_giga_root: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_historical_giga_root_by_index(index: integer) */
    get_historical_giga_root_by_index: ((index: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_note_proof(block_number: integer, note_hash: field) */
    get_note_proof: ((block_number: (bigint | number), note_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** hash_commit(amount: integer, destination_chain_id: field, secret: field, nullifier_preimg: field) */
    hash_commit: ((amount: (bigint | number), destination_chain_id: FieldLike, secret: FieldLike, nullifier_preimg: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** mint_for_testing(amount: integer, recipient: struct) */
    mint_for_testing: ((amount: (bigint | number), recipient: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** mint_giga_root(amount: integer) */
    mint_giga_root: ((amount: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** mint_local(amount: integer, destination_chain_id: field, secret: field, nullifier_preimg: field, recipient: struct, block_number: integer) */
    mint_local: ((amount: (bigint | number), destination_chain_id: FieldLike, secret: FieldLike, nullifier_preimg: FieldLike, recipient: AztecAddressLike, block_number: (bigint | number)) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** process_log(log_ciphertext: struct, tx_hash: field, unique_note_hashes_in_tx: struct, first_nullifier_in_tx: field, recipient: struct) */
    process_log: ((log_ciphertext: { storage: FieldLike[], len: (bigint | number) }, tx_hash: FieldLike, unique_note_hashes_in_tx: { storage: FieldLike[], len: (bigint | number) }, first_nullifier_in_tx: FieldLike, recipient: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** public_dispatch(selector: field) */
    public_dispatch: ((selector: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** receive_giga_root(giga_root: field) */
    receive_giga_root: ((giga_root: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** sync_notes() */
    sync_notes: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** transfer(amount: integer, sender: struct, recipient: struct) */
    transfer: ((amount: (bigint | number), sender: AztecAddressLike, recipient: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };

  
}
