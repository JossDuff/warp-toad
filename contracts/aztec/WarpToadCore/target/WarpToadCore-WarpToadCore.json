{
  "transpiled": true,
  "noir_version": "1.0.0-beta.3+0000000000000000000000000000000000000000",
  "name": "WarpToadCore",
  "functions": [
    {
      "name": "mint_for_testing",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_giga_root",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_giga_root"
      ]
    },
    {
      "name": "mint_local",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "destination_chain_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nullifier_preimg",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "block_number",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "burn_tx_first_nullifier",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_index_in_tx",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3221203475512464993": {
            "error_kind": "string",
            "string": "Proving membership of a block in archive failed"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4174732183419875782": {
            "error_kind": "string",
            "string": "Proving note inclusion failed"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9901831340733923939": {
            "error_kind": "string",
            "string": "Last archive block number is smaller than the block number we want to prove against"
          },
          "12459975540867780799": {
            "error_kind": "string",
            "string": "not here bro"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13242141534282859663": {
            "error_kind": "string",
            "string": "Block number provided is not the same as the block number from the header hint"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "7L3druS6ll75LufaFyI5KVF+lUaj4e52GwUUqhp29ZXhd+/YGRk/eZZ2MFeKivg05/CFsU9BuYKa46OCc0hB/c9//N//9f/8//7b//Ev//b//Pv/+Md//t/+5z/+9d//r//yH//y7/92+V//8x9p/vF/+x//73/5t7/+5//4j//y3//jH/85W1v/0z/+67/935f/rNX+13/6x//zL//6X//xn1Na/9d/+np0tul2dJ7z/eh12ji4TGv9eXBJc3t9cKprWn4effnvMt0Pz8u8dfxc2+3weVkeR69l6+gyl9vRlqZfjv7f/9M/0kJp/q40jdL8XWlWSvM3pckTpfm70iRK83elyZTm70pTxEtT7VGap8O3S5NTnm8jSVZ3lsYozd+VplKavyuN+mr4g6X5m9VwLo/S1E5pLM23QlqeHkfP9ccntMM/YXNtlqwt672sU+oBTiWn2+Glzk9Hb17wp3If0uW/2/w8pi1my/qA1vI/n0KZzn8Km2udVK3cx1Rrm345hb/+2eY6oM7pNoHqbI/v08s0/evfbH5B1mXKt3+zzOX532yd/GNaTE+jynnj4Jpup1DtaXamrSpNj8l5qenj4K25afN9xJf/XJ8P/usszctZpvvknUv657OsIc5yDpHYJQTLFuIs1wiJtSkCS0shzjI7OcvLOG9nWduXs/Sy9nl9lhbiLL2sfV6fZYi1j4VY+5iXtc/rxIZY+9QQa5/qZe3zMrHVy9rndWLdeJ+XibUQiXXjfV4m1s3a52Vivax9Xic2xNqneln7vDzL2cva5/VZhlj7zCHWPnOItc9sIRIbYu0zh1j7zCHWPrObe14vE+vG+7xK7BJi7bO4uef1KrGLm7XPy8QKr33ydDs251R2JdZCnKXw2mfgWQqvfQaepfDaZ+BZCq99vnWWr79JhNc+3zvLV98kTXjtMy6xTXjtMy6xTXjtMzCxIdY+zUIk1sva53ViQ6x9mpe1z+vEuln7vEys8NrnksLbWdqSX59lW9vt4LaujxGn9tdZrsJrn4FnKbz2GXiWwmufgWcpvPYZeJYW4iyF1z7fOct1KrdfJq6TfTlL4bVPnR+/uF2nf/oKXIWXMwNDKLycGXiWTpYzr6damoTXMy/nWppCrFHSFGKRkiYnq5TedLPTTjcnS49eDoXXHiNP08lKpTfdhJcqnekWwqakFEKnpORkrdKZbkl4rfJ6uqUQkiQli3GaITRJSmf1JCmFECUphTAlKcVQJfm0qiTHUCU5hirJMVRJPq0qyTFUSY6hSnIMVZJPq0pyDFVSYqiSEkOVlNOqEuV9g0fm0GKcZgxVorx1cGe6xVAlyvsBjzzNGKpEeUfg19NNeZffgTlU3uZ35GnGUCXKG/12plsMVaK8e+/I04yhSpT37+1MtxiqRHlT3pGnGUOVKG/L+3q6KW+1OzKHFuM0Y6gS5d12O9MthipR3kJ35GnGUCXKm+i+nm7KG+MOzKHyzrgjTzOGKlHeG7cz3WKoEuUNb0eeZgxVorzlbWe6xVAlyvvYjjzNGKpEeSfb19NNeXfakTm0GKcZQ5Uob1DbmW4xVInyrrMjTzOGKlHed/b1dFPeS3ZgDpU3kx15mjFUifJ2sp3pFkOVKO8RO/I0Y6gS5V1iO9MthiqJsfVr8rL3a2e6KW/++nq6xdjQNcXY0TXF2NI1nXZP1xRjU9cUY1fXFGNb13zabV1zjG1dc4xtXXOMbV3zZKedbiFUSY6xrWuOsa1rPu22rjnGtq45xrauOca2rvm027rmGNu65hjbuuYY27rm027rmmNs65pjbOuaY2zrmk+7rWuOsa1rjrGta46xrWs+7bauOca2rjnGtq45xrau+bTbuuYY27rmGNu65hjbuubTbuuaY2zrmmNs65pjbOuaT7uta46xrWuOsa1rjrGtaz7ttq45xrauOca2rjnGtq75tNu65hjbuuYY27rmGNu65tNu65pjbOuaY2zrmmNs65pPu61rjrGta46xrWuOsa1rPu22rjnGtq45xrauOca2rvm027rmGNu65hjbuuYY27rm027rmmNs65pjbOuaY2zrmk+7rWuOsa1rjrGta46xrWs+7bauOca2rjnGtq45xrau+bTbuuYY27rmGNu65hjbuubTbuuaY2zrmmNs65pjbOuaT7uta46xrWuOsa1rjrGtaz7ttq45xrauOca2rjnGtq75tNu65hjbuuYY27rmGNu65tNu65pjbOuaY2zrmmNs61pOu61ribGta4mxrWuJsa1rmey00y2EKikxtnUtMbZ1Lafd1rXE2Na1xNjWtcTY1rWcdlvXEmNb1xJjW9cSY1vXctptXYvwtq6XOTL/PPaSo/Ya0AXm7WCrLX05Td3lx/dOc76P+PKf65fT1F2rfPM003o/zfKFpvC2riNDK7wH7MjQCu8BOzS0uguboaG1GKHVXdgMDa3uwmZoaL2sgjqhdbMKeh1aL6ug16EV3l126Gl6WQV1TtPLKqhzmjFWQcJb0Y78QhHeinbkF4rwVrRDQxtjFSS8b+3Q0MZYBQnvWzsytMKb3I4MrfAmt0ND62UV1AmtxQitl1VQJ7QxVkHCO+IOPU0vq6DOacZYBQlvnzvyC0V4+9yRXyjC2+cODW2MVZDwXrtDQxtjFSS81+7Q0LpxQa9DG2MVJLwx78jQCm/MOzK0wrv4XlT57TnJi05edoVWeBffoacpvAoaeZoW4zSFV0EjT1N4FfSt0+x8oQivgr53mq+/UIRXQSNDK7wKGhha4f2BR4ZWeH/gkaEV3h94aGi9rII6obUYofWyCuqE1s0q6HVo/2YVtN5+P1dbra9Ps93j0p5+JLh5kmW5jyXNr08yT/n2Z/NU9rmDv9t3+Gwn+ZrkGuAk/27P4ZOd5Osr7N9tT+xqTv7d5sS+4loixNUinGSNcJJzhAuPkxXP6wuPjxVPJ65OVjwv47r6WPG8juvqY8XzOq6rkxXP67j6WPF04moR4hphxbP6WPF0TtLHiqdzkk4cz+urawDHY1MAx2NTAMdjUwDHY1MAx2OTRYirjxVPJ66yK5483e6A5ZzKvrjKrnhGnqTsimfkScqueAaeZJJd8XzrJF9fXZPsiud7J/ny6ppkVzwj4yq74hkZV4sQV9kVz8i4+ljxdOLqY8XTiavsimfctuqWZFc8A08yy654Rp6k7Ipn5EnKrnhGnqTsimfciw4sy654Xr7mwLLsImZkAmUXMSNPUnYRM3KayS5iOtMswrqkRFiXFBfrks40K7LrktfTrLhYavQSaBFO0sW6pDfNZNclnWnmYqnRS2AEX1JcrEs608xk1yWvp5lFUCAWQYFYBAViJ1UgFkGBWAQFYhEUiJ1UgVgEBVIjKJAaQYHUkyqQGkGB1AgKpEZQIPWkCqRGUCA1ggKpERTIfFIFMkdQIHMEBTJHUCDzSRXIHEGBzBEUyBxBgcwnVSBzBAWyRFAgSwQFspxUgSwRFMgSQYEsERTIclIForv77cgERlAgurvfDpxmurvfvp5muhvaDkyg7oa2I08yggLR3dC2M80iKBDdPWpHnmQEBaK7R21nmkVQILrbzo48yQgKRHfb2dfTTHcn2ZEJtAgnGUGB6O4k25lmERSI7uawI08ygAKpupvDvpxmVXe/13EJrLr7vY48yQAKpE520mkWQIFU3S1cR55kAAVSdbdw7UyzAAqk6u7KOvIkAyiQqrsr6+tpprvR6sgEWoSTDKBAqu5Gq51pFkCB1Ah7p1Yfe6d2ppnu3qmvp1mE7VBrhO1Qa4TtUOtJt0OtEbZDrRG2Q60RtkOtJ90OtUbYDrVG2A61RtgOtZ50O9QaYTvUGmE71BphO9R60u1Qa4TtUGuE7VBrhO1Q60m3Q60RtkOtEbZDrRG2Q60n3Q61RtgOtUbYDrVG2A61nnQ71BphO9QaYTvUGmE71HrS7VBrhO1Qa4TtUGuE7VDrSbdDrRG2Q60RtkOtEbZDrSfdDrVG2A61RtgOtUbYDrWedDvUGmE71BphO9QaYTvUetLtUGuE7VBrhO1Qa4TtUOtJt0OtEbZDrRG2Q60RtkOtJ90OtUbYDrVG2A61RtgOtZ50O9QaYTvUGmE71BphO9R60u1Qa4TtUGuE7VBrhO1Q60m3Q60RtkOtEbZDrRG2Q60n3Q61RtgOtUbYDrVG2A61nnQ71BphO9QaYTvUGmE71Pmk26HOEbZDnSNshzpH2A51nuyk0yyAApkjbIc6R9gOdT7pdqhzhO1Q5wjboc4RtkOdT7od6hxhO9Q5wnaoc4TtUOeTboc6R9gOdY6wHeocYTvU+aTboc4RtkOdI2yHOkfYDnU+6Xaoc4TtUOcI26HOEbZDnU+6HeocYTvUOcJ2qHOE7VDnk26HOkfYDnWOsB3qHGE71Pmk26HOEbZDnSNshzpH2A51Pul2qHOE7VDnCNuhzhG2Q51Puh3qHGE71DnCdqhzhO1Q55NuhzrLbodakt3+bEm1vYZzAXk72GpL/3ySstuhfu8k5ynf/vA8rV9OUnVd8s2TTPc/fLE6X05SdV0yNK6q65KhcbUIcVVdxAyNq+oiZmhcVRcxQ+OquogZGtcIKx7ZjVaHnqSPFU/nJH2seF5fXWV3ZR15dZXdlXVoXH2seDpxdbLieR1XHyueTlx9rHg6cfWx4nkdV9n9XkfGVXa/16EnGcHxyG4OO/QkLcDVVXZz2KFXVx8rnk5cnTie13F1suJ5HdcIjkd2J9mRcZXddnZkXGW3nS1lvt30LmVZ9sVVdsUz8iQtwknKrnhGnqTsiudbJ9m5usqueL53kq+vrrIrnpFxlV3xDIyr7Ia2I+Mqu6HtyLjKbmg7NK4+VjyduNrmSbbWbie5Pv2jzZO8XLx+HrtM8+uTzHZ/YrPZ65PMU77VLk9lXxfyN7vfnu4kX5OcI5zk4uIkO1fXFmFOrv7juvzNVrmu4rr8zb66ruK6/M2+us7iWiLE1SKcpI8VT+cknax4Xl94fKx4OhceHyueTlydrHhexjX5WPG8jmuSXfHkKd2OzansimuSXfGMPEnZFc/IkzQXJ9m58MiueL53kq8vPLIrnpFxlV3xjIyr7IpnZFxlVzzj9kdYsuyKZ+RJyq54Rp6k7Ipn5EnKrnjGbeexZNkVz8vtPJYsu4gZmUDZRczIk5RdxIycZrKLmM40i7AuKRHWJcXFuqQzzYrsuuT1NCsulhq9BFqEk3SxLulNM9l1SWeauVhq9BIou9QYeZIR1iXmYl3SuZaY7Lrk9bXEIigQi7AuMRfrkt40k12XdKZZBAViEdYlFmFdYi7WJZ1rSZVdl7y+ltQIt2ZqhHVJjbAuqRHWJfWk65IaYV1SI6xLaoR1SY2wLplPui6ZI6xL5gjrkjnCIyOz7LqkM80iPDIyR1iXzBHWJXOEdckcYV2ynHRdskRYlywR1iVLhHXJctJ1yRJhXbJEWJcsER5lXU76KOsS4ZGRFuFR1hZhXdJcrEs615Imuy55fS1pskuNkQmMsC5pLtYlvWkmuy7pTLMICqRFWJesEdYla4Sf2Kwn/YnNGuGREd09akeeZIR1ie4etSOvJSddl+huOzsygQHWJU1329mRJxlgXdJ0t519eS1pujvJjkygRTjJAOuSpruT7MhryTnXJU13c9iRCYywLtHdHHbkSQa4j9N0N4cdeMHU3Rz29QVTd7/XkQmMsC7R3e915EkGeL6k6e732rmWRFiXRNjCtfnYwrUzzXS3cH09zXzsytpLoEU4yQjrkghbuLYIW7i2k27h2iJs4doibOHaImzh2k66hWuLsIVri7CFa/OxhWvvJCOsS3zs99q7YJ50XRJhC9fmYwvX3klGuI/jY7/XzrVEd7/X19cSH1u49hIYYV0SYb/XFmG/1+Zjv9feBVN2EfP6gqm7hevABEbY77X52O+1M81093vtTDOLkMAI65II+722CPu9tgj7vbYI+722k+732iLs99oi7PfaIuz32k6632uLsN9ri7Dfa4uw32vzsd9r71pyUl+iu4XrwARG2O+1RdjvtUXY77WddL/XFmG/1xZhv9fmY7/X3klGWJfobg77+loSYb/XFmG/1+Zjv9feSUZYl+huDtu5lkRYl/jY77V3khHWJRE2h20+NoftXDB1N4d9fcH0sd9rJ4G6+72OPMkIP97xsTls71pyzvcJNx/7vfYSGGFdEmFz2OZjc9jX15JVd3PYl9eS1cd+r68TuOru9zryJAOsSy4zL8JJupArvQum7CKmc8EMsC5ZI2wOu0bYHHb1sTls51qiuzns62uJj/1eewmMsC7xsTlsb5qd05esEfZ7XX3s99o7yQjrkgibw64+NoftXDB1N4d9fcHU3e91ZAIjrEt8bA7bm2YnXZdE2O919bHfa+8kI6xLImwOu/rYHLZzwdTdHPb1BVN3v9eRCYywLomwOezqY3PY3rXkpPdxfOz32ktghHVJhM1h1wibw64+NoftXDB1N4d9fcHU3e91ZAItwkkG+PHO6mNz2N615JwvH1597PfaS2CEdUmEzWHXCJvDrj42h+2dZIAfFa+6O8m+/laIsDnsGmFz2DXC5rCrj81he9eSc252suru9zowgRE2h119bA7bmWa6m8N2pplFSGCEdUmEzWFXH5vD9q4l53zJ36q73+vABEbYHHb1sTlsZ5rpbg77epr52O+1l0CLcJIR1iU+NoftXUtOeh/Hx36vvQRGWJdE2Bx29bE5bOdaors57OtriY/9XnsJtAgnGWFd4mNz2N615KTrkgj7va4+9nvtnKTufq8Dp5nu5rCvp1mE/V7XCPu9rj72e+2dZITf4+huDtu5lqguNUqy+eexJdX2Gs4F5O1gqy19OUnVdcnQk1Rdl3zvJOcp305yntZ/Osk0yW74+s2zTOv9LEv6epaqK5OBgb2cpeo6ZmxiVRcyYxNrIRKrupQZe5aqa5mxZ+lj5dO7+vhY+vSuPj7WPp3Eym4qOzSxsrvKDk2s7B60YxPrY+3TO0sLcZY+1j69q4+PtU/v6hPA+lzO0snap5NYJ97ndWJlN64tZb554VKWZV9iZXeuHXuWsmufoWcpu/b51ll2rj6yO91+8yw7Vx/Ztc/QxMqufYYmVnbtMzSx22ufdZ7uZ9mW12e5lPV28GL5Uci5bpXEbsfO6+M8U1l/DmeVGs7fbDf7seEkreFkreEUreGY1nCq1nBmreEs7x3OMtX7sVvDaVrDWaWGY5PWcN58VU653JYgKf91xJcBZbUBvfnKfLEIt2eZ0py3kJnagKragGa1AS1qA3rzNTqtKd0GtNayMaBVbEB1UhtQUhtQVhtQURuQqQ3ozVfqnMptQPliyn8Z0MbRc74fPZelc3TJy8Mk1Cc5MG8Nu+V0O7rl+vQY9DJvneRq91XT88Pe20eXejdO+enZ461h5Lzme0Gm+vrgS/FuB6fyrD82D57uriRNc3s++Ip+Bn1U9Avoo6JvoI+KfgV9UPTzBPqo6BPoo6LPoI+KvoA+KnoDfVT02Lyw6LF5YdFj88Kix+aFRY/Ni4p+weaFRY/NC4semxcWPTYvLHoDfVT02Lyw6LF5YdFj88Kix+aFRY/Ni4q+YfPCosfmhUWPzQuLHpsXFr2BPip6bF5Y9Ni8D6Nf7oDyUkqH5nLfLzAta92JHpsXFj02Lyx6bZvXHi8AXPP8y9E/hr9KG6nLd/dtf67Ll3TqHL3cdyJdnkG1ebMw961Ic3vaKfb6ssNLXaR1zQfrIu0yPlgX6Ub/g3Ux6rJZF+kW8YN1ke6fPlgX6ebig3WRXnl/sC7Sy9KP1SVNrHe368J6d7surHe368J6d7suRl0268J6d7surHe368J6d7surHe368J6d7MuifXudl1Y727XhfXudl1Y727XxajLZl1Y727XhfXudl1Y727XhfXudl1Y727WJbPe3a6Lo/Xu41Rbm36py/VUHS1he6fqaFW6zre0X27SpE7ca8m3p7JqqU+TI8hjZyk7WndD/lvkHXUWkP8WeUe9E+S/Rd5Rdwj5b5F31P/2FrOOWtrOqRZHXSrz+TvzuTjqwyH/LfKOtATkv0XekaXpfbFZnFOlD486n+nDo5KnD49KPk4fXuL04UYfHnQ+G314VPL04VHJx+nDzeKcKn141PlMHx6VPH14VPJx+nCL04dX+vCg87nSh0clTx8elXycPrxanFOlD486n+nDo5KnD49KPk4fXuP04TN9eND5PNOHRyVPHx6VfJw+fLY4p0ofHnU+04dHJU8fHpV8nD58jtOHL/ThQefzQh8elTx9eFTycfrwxeKcKn141PlMHx6VPH14VPJx+vAlTh/e6MODzudGHx6VPH14VPJx+vBmcU6VPjzqfKYPj0qePjwq+Th9eIvTh6/04UHn80ofHpU8fXhU8nH68NXinCp9eNT5TB8elTx9eFTycfrwNUwfnif68JjzOU/04VHJ04dHJR+mD8+TxTlV+vCo85k+PCp5+vCo5MP04XmK04cn+vCg8znRh0clTx8elXycPjxZnFOlD486n+nDo5KnD49KPk4fnuL04Zk+POh8zvThUcnTh0clH6cPzxbnVOnDo85n+vCo5OnDo5KP04fnOH14oQ8POp8LfXhU8vThUcnH6cOLxTlV+vCo85k+PCp5+vCo5OP04SVOH2704UHns9GHRyVPHx6VfJw+3CzOqdKHR53P9OFRydOHRyUfpw+3OH14pQ8POp8rfXhU8vThUcnH6cOrxTlV+vCo85k+PCp5+vCo5OP04TVOHz7ThwedzzN9eFTy9OFRycfpw2eLc6r04VHnM314VPL04VHJi/fh96O/kL8OX7u3Lku+Df85A/fhL9r9cnf42k1fd/janUt3+NrL7+7w7dzD114md4evvdbrDl97wdIdvva37vPwLW8Mf/Nbd57Mfv6zOU32evi55NtSKpulzlKq5XTvWXPN8ZZpbaLib654ouJvrnim4m+u+OYKck7ldqJznqbXFU9tLbfBX5o1Kt6puFHxN1d8c50+53K/qlwuPJ2rSrob85zLQsU7FZ+p+JsrvtkNzZe1+63itq7PFb/+q80mZJ6n2+VlnufaaULs5lqX52Ftqtb8uO90+egnl9d+DmeVGs46aQ0naQ0naw2naA3HtIZTtYYzaw1n0RqO1lV5lboql0nqqlwmqatymaSuypebd1rDkboqX25qaw1H6qpcJqmrcpmkrspl0roqJ62rctK6Kietq3LSuionraty0roqJ62rctK6Kietq3LSuipnraty1roqZ62rcta6Kmetq3LWuipnraty1roqZ62rcta6Kpf9V2WecP7l4Nc3R0pJFPy9Bc8U/L0FLxT8vQU3Cv7eglcK/t6CzxT8vQVfKPh7C94o+HsLvlLwtxbc6DTfXHA6zTcXnE7zzQWn03xzwY2Cv7fgdJpvLjid5psLTqf55oLTab654HSa7y14pdN8c8HpNN9ccDrNNxecTvPNBTcK/t6C02m+ueB0mm8uOJ3mmwtOp/nmgtNpvrfgM53mmwtOp/nmgtNpvrngdJpvLrhR8PcWnE7zzQWn03xzwek031xwOs03F5xO870FX+g031xwOs03F5xO880Fp9N8c8GNgr+34HSaby44neabC06n+eaC02m+ueB0mu8teKPTfHPB6TTfXHA6zTcXnE7zzQU3Cv7egtNpvrngdJpvLjid5psLTqf55oLTab634Cud5psLTqf55oLTab654HSaby64UfD3FpxO880Fp9N8c8HpNN9ccDrNNxecTvOtBbeJTvPNBafTfHPB6TTfXHA6zTcX3Cj4ewtOp/nmgtNpvrngdJpvLjid5psLTqf53oInOs03F5xO880Fp9N8c8HpNN9ccKPg7y04neabC06n+eaC02m+ueB0mm8uOJ3mewue6TTfXHA6zTcXnE7zzQWn03xzwY2Cv7fgdJpvLjid5psLTqf55oLTab654HSa7y14odN8c8HpNN9ccDrNNxecTvPNBTcK/t6C02m+ueB0mm8uOJ3mmwtOp/nmgtNpvrfgRqf55oLTab654HSaby44neabC24U/L0Fp9N8c8HpNN9ccDrNNxecTvPNBafTfG/BK53mmwtOp/nmgtNpvrngdJpvLrhR8PcWnE7zzQWn03xzwek031xwOs03F5xO870Fn+k031xwOs03F5xO880Fp9N8c8GNgr+34HSaby44neabC06n+eaC02m+ueB0mu8t+EKn+eaC02m+ueB0mm8uOJ3mmwtuFPy9BafTfHPB6TTfXHA6zTcXnE7zzQWn03xvwRud5psLTqf55oLTab654HSaby64UfD3FpxO880Fp9N8c8HpNN9ccDrNNxecTvO9BV/pNN9ccDrNNxecTvPNBafTfHPBjYK/t+B0mm8uOJ3mmwtOp/nmgtNpvrngdJpvLXid6DTfXHA6zTcXnE7zzQWn03xzwY2Cv7fgdJpvLjid5psLTqf55oLTab654HSa7y14otN8c8HpNN9ccDrNNxecTvPNBTcK/t6C02m+ueB0mm8uOJ3mmwtOp/nmgtNpvrfgmU7zzQWn03xzwek031xwOs03F9wo+HsLTqf55oLTab654HSaby44neabC06n+d6Cl+1Os9rfFfz6r7bbpZbS7V+1p7PYxDSXfKvlXOZHff76tK9n0eod6jot94NTrT8HlPcPyO6fMdtirweUL5W/Qcip5fp8+HVERW5Etj2i5TGidXo9okuEbrlIKT2Gn/4C+PXo+wTIU74fW/76dyGmVqXeb633vL/eqbXbR2SrnXrXurT7n06PiqecNy949+tdfaJz+dK5jn459ehbb/TrVHtZf4w+5fmXz/h6dLt/ezxfRst8y8K6fzw5z49qps54/tqQ9nZ0zc+137pYz3m6X9ifK78599b59pdtepqpKafNuqR7YfITqXcvaPKab1eBMvUmdkm3g1Mpad9VwCbIByWfIB+UfIb8R8l/bM1nBfJByRvkg5Kv0uSXu6tsXfIt3QTP2spXq2Wz9Jk2u3G6jKhzpnW9f9/XNa97XZYtVOZvKtPcVGae2m0cc67pdWXaZHchsD5d5m5lGSwE6topS623y0Cd7elEt461td1KWCd7XHhb3lxmz49ldquvDy4p3b6HSnoq4ebBqbb7hXdOj7+8bGIv5a7kn++cpLZuoVynR6HTk8Dfdjt2Z3k52eeDf7CsEyzdsEywdMMyw9INywJLNywNlm5YVli6YTnD0g3LBZZuWDZYumGJ93HDcsb7+GGJ9/HDEu/jhyXexw9Lg6UblngfPyzxPn5Y4n38sMT7+GGJ93HDcsH7+GGJ9/HDEu/jhyXexw9Lg6UblngfPyzxPn5Y4n38sMT7+GGJ93HDsuF9/LDE+/hhiffxwxLv80mWS7bbpndLfq7HDY+BRxkPdkYaD8Lls3jW259eStrAg0ORxoMWkcaD6VDGsyIvpPHgI5RXbiuKQRoP1kAaj4FH+bsHayCNB2sgjQdrII0HayCNB2sgjGeesAbSeLAGwn3PPGENpPFgDaTxGHiU8WANpPFgDaRXblgDaTxYA2k8WANlPAlrII0HayCNB2sgjQdrII3HwKOMB2ugbA0S1kAaD9ZAGg/WQBoP1kAZT8YaKK/cMtZAGg/WQBoP1kAaj4FHGQ/WQBoP1kAaD9ZAGg/WQBoP1kDZGhSsgTQerIE0HqyBNB6sgTQeA4/wyq1gDaTxYA2k8WANpPFgDaTxYA2U8RjWQBoP1kAaD9ZAGg/WQNkamIFHGQ/WQBoP1kAaD9ZAGg/WQHrlhjVQxlOxBtJ4sAbSeLAG0niwBtJ4DDzKeLAG0niwBtJ4sAbK1qBiDaTxYA2U8cxYA2k8WANpPFgD5ZXbjDWQxmPgUcaDNZDGgzWQxoM1kMaDNZDGgzVQxrNgDaTxYA2UrcGCNZDGgzWQxmPgUcaDNZDGgzWQXrlhDaTxYA2k8WANlPE0rIE0HqyBNB6sgTQerIE0HgOPMh6sgbI1aFgDaTxYA2k8WANpPFgDZTwr1kB55bZiDaTxYA2k8WANpPEYeJTxYA2k8WANpPFgDaTxYA2k8WANhK3BMmENpPFgDaTxYA2k8WANpPEYeHRXbsuENZDGgzWQxoM1kMaDNZDGgzVQxpOwBtJ4sAbSeLAG0niwBsrWIBl4lPFgDaTxYA2k8WANpPFgDaRXblgDZTwZayCNB2sgjQdrII0HayCNx8CjjAdrII0HayCNB2ugbA0y1kAaD9ZAGU/BGkjjwRpI48EaKK/cCtZAGo+BRxkP1kAaD9ZAGg/WQBoP1kAaD9ZAGY9hDaTxYA2UrYFhDaTxYA2k8Rh4lPFgDaTxYA2kV25YA2k8WANpPFgDZTwVayCNB2sgjQdrII0HayCNx8CjjAdroGwNKtZAGg/WQBoP1kAaD9ZAGc+MNVBeuc1YA2k8WANpPFgDaTwGHmU8WANpPFgDaTxYA2k8WANpPFgDZWuwYA2k8WANpPFgDaTxYA2k8Rh4hFduC9ZAGg/WQBoP1kAaD9ZAGg/WQBlPwxpI48EaSOPBGkjjwRooW4Nm4FHGgzWQxoM1kMaDNZDGgzWQXrlhDZTxrFgDaTxYA2k8WANpPFgDaTwGHmU8WANpPFgDaTxYA2VrsGINpPFgDYTxtAlrII0HayCNB2sgvHJrE9ZAGo+BRxkP1kAaD9ZAGg/WQBoP1kAaD9ZAGU/CGkjjwRooW4OENZDGgzWQxmPgUcaDNZDGgzWQXrlhDaTxYA2k8WANlPFkrIE0HqyBNB6sgTQerIE0HgOPMh6sgbI1yFgDaTxYA2k8WANpPFgDZTwFa6C8citYA2k8WANpPFgDaTwGHmU8WANpPFgDaTxYA2k8WANpPFgDZWtgWANpPFgDaTxYA2k8WANpPAYe4ZWbYQ2k8WANpPFgDaTxYA2k8WANlPFUrIE0HqyBNB6sgTQerIGyNagGHmU8WANpPFgDaTxYA2k8WAPplRvWQBnPjDWQxoM1kMaDNZDGgzWQxmPgUcaDNZDGgzWQxoM1ULYGM9ZAGg/WQBnPgjWQxoM1kMaDNVBeuS1YA2k8Bh5lPFgDaTxYA2k8WANpPFgDaTxYA2U8DWsgjQdroGwNGtZAGg/WQBqPgUcZD9ZAGg/WQHrlhjWQxoM1kMaDNVDGs2INpPFgDaTxYA2k8WANpPEYeJTxYA2UrcGKNZDGgzWQxoM1kMaDNRDGs05YA+GV2zphDaTxYA2k8WANpPEYeJTxYA2k8WANpPFgDaTxYA2k8WANlK1BwhpI48EaSOPBGkjjwRpI4zHwCK/cEtZAGg/WQBoP1kAaD9ZAGg/WQBlPxhpI48EaSOPBGkjjwRooW4Ns4FHGgzWQxoM1kMaDNZDGgzWQXrlhDZTxFKyBNB6sgTQerIE0HqyBNB4DjzIerIE0HqyBNB6sgbI1KFgDaTxYA2U8hjWQxoM1kMaDNVBeuRnWQBqPgUcZD9ZAGg/WQBoP1kAaD9ZAGg/WQBlPxRpI48EaKFuDijWQxoM1kMZj4FHGgzWQxoM1kF65YQ2k8WANpPFgDZTxzFgDaTxYA2k8WANpPFgDaTwGHmU8WANlazBjDaTxYA2k8WANpPFgDZTxLFgD5ZXbgjWQxoM1kMaDNZDGY+BRxoM1kMaDNZDGgzWQxoM1kMaDNVC2Bg1rII0HayCNB2sgjQdrII3HwCO8cmtYA+nZgzWQxoM1kMaDNZDGgzVQxrNiDZRXbivWQHr2YA2k8WANpPEYeJTxYA2k8WANpFduWANpPFgDaTxYA108eZqwBh/FY/l2hpf/XL7iwRp8Es+luo9Cp1/wfD24ZbOfB7fLyX5liWLwwxIf4YelwdINS0yHH5ZoET8scSh+WCJc/LDEzrhhmVA5fljiffywxPv4YYn38cPSYOmGJd7HD0u8jx+WeB8/LPE+fljifdywzHgfPyzxPn5Y4n38sMT7+GFpsHTDEu/jhyXexw9LvI8flngfPyzxPm5YFryPH5Z4Hz8s8T5+WOJ9/LA0WLphiffR3dHmggeVI40HOyONB+GivGVKwaEo4zG0iDQeTIc0HuSFNB58hPLKzQw8yniwBtJ4sAbS3z1YA2k8WANpPFgDZTwVayCNB2sgjQdrII0Ha6Dc91QDjzIerIE0HqyBNB6sgTQerIH0yg1roIxnxhpI48EaSOPBGkjjwRpI4zHwKOPBGkjjwRpI48EaKFuDGWsgjQdroIxnwRpI48EaSOPBGiiv3BasgTQeA48yHqyBNB6sgTQerIE0HqyBNB6sgTKehjWQxoM1ULYGDWsgjQdrII3HwKOMB2sgjQdrIL1ywxpI48EaSOPBGijjWbEG0niwBtJ4sAbSeLAG0ngMPMp4sAbK1mDFGkjjwRpI48EaSOPBGgjjSRPWQHjlliasgTQerIE0HqyBNB4DjzIerIE0HqyBNB6sgTQerIE0HqyBsjVIWANpPFgDaTxYA2k8WANpPAYe4ZVbwhpI48EaSOPBGkjjwRpI48EaKOPJWANpPFgDaTxYA2k8WANla5ANPMp4sAbSeLAG0niwBtJ4sAbSKzesgTKegjWQxoM1kMaDNZDGgzWQxmPgUcaDNZDGgzWQxoM1ULYGBWsgjQdroIzHsAbSeLAG0niwBsorN8MaSOMx8CjjwRpI48EaSOPBGkjjwRpI48EaKOOpWANpPFgDZWtQsQbSeLAG0ngMPMp4sAbSeLAG0is3rIE0HqyBNB6sgTKeGWsgjQdrII0HayCNB2sgjcfAo4wHa6BsDWasgTQerIE0HqyBNB6sgTKeBWugvHJbsAbSeLAG0niwBtJ4DDzKeLAG0niwBtJ4sAbSeLAG0niwBsrWoGENpPFgDaTxYA2k8WANpPEYeIRXbg1rII0HayCNB2sgjQdrII0Ha6CMZ8UaSOPBGkjjwRpI48EaKFuD1cCjjAdrII0HayCNB2sgjQdrIL1ywxoI48kT1kAaD9ZAGg/WQBoP1kAaj4FHGQ/WQBoP1kAaD9ZA2BrkCWsgjQdroIwnYQ2k8WANpPFgDZRXbglrII3HwKOMB2sgjQdrII0HayCNB2sgjQdroIwnYw2k8WANlK1BxhpI48EaSOMx8CjjwRpI48EaSK/csAbSeLAG0niwBsp4CtZAGg/WQBoP1kAaD9ZAGo+BRxkP1kDZGhSsgTQerIE0HqyBNB6sgTIewxoor9wMayCNB2sgjQdrII3HwKOMB2sgjQdrII0HayCNB2sgjQdroGwNKtZAGg/WQBoP1kAaD9ZAGo+BR3jlVrEG0niwBtJ4sAbSeLAG0niwBsp4ZqyBNB6sgTQerIE0HqyBsjWYDTzKeLAG0niwBtJ4sAbSeLAG0is3rIEyngVrII0HayCNB2sgjQdrII3HwKOMB2sgjQdrII0Ha6BsDRasgTQerIEynoY1kMaDNZDGgzVQXrk1rIE0HgOPMh6sgTQerIE0HqyBNB6sgTQerIEynhVrII0Ha6BsDVasgTQerIE0HgOPMh6sgTQerIH0yg1rII0HayCNB2sgjKdMWANpPFgDaTxYA2k8WANpPAYeZTxYA2FrUCasgTQerIE0HqyBNB6sgTKehDVQXrklrIE0HqyBNB6sgTQeA48yHqyBNB6sgTQerIE0HqyBNB6sgbI1yFgDaTxYA2k8WANpPFgDaTwGHuGVW8YaSOPBGkjjwRpI48EaSOPBGijjKVgDaTxYA2k8WANpPFgDZWtQDDzKeLAG0niwBtJ4sAbSeLAG0is3rIEyHsMaSOPBGkjjwRpI48EaSOMx8CjjwRpI48EaSOPBGihbA8MaSOPBGijjqVgDaTxYA2k8WAPllVvFGkjjMfAo48EaSOPBGkjjwRpI48EaSOPBGijjmbEG0niwBsrWYMYaSOPBGkjjMfAo48EaSOPBGkiv3LAG0niwBtJ4sAbKeBasgTQerIE0HqyBNB6sgTQeA48yHqyBsjVYsAbSeLAG0niwBtJ4sAbKeBrWQHnl1rAG0niwBtJ4sAbSeAw8yniwBtJ4sAbSeLAG0niwBtJ4sAbK1mDFGkjjwRpI48EaSOPBGkjjMfAIr9xWrIE0HqyBNB6sgTQerIE0HqyBMB6bsAbSeLAG0niwBtJ4sAbC1sAmA48yHqyBNB6sgTQerIE0HqyB9MoNa6CMJ2ENpPFgDaTxYA2k8WANpPEYeJTxYA2k8WANpPFgDZStQcIaSOPBGijjyVgDaTxYA2k8WAPllVvGGkjjMfAo48EaSOPBGkjjwRpI48EaSOPBGijjKVgDaTxYA2VrULAG0niwBtJ4DDzKeLAG0niwBtIrN6yB9OzBGkjjwRoo4zGsgTQerIE0HqyB8srNsAbSs8fAo4wHayCNB2sgjQdrII0HayC9csMaKOOpWANpPFgDaTxYg4/isXw7w8t/Ll/xYA0+iedS3Ueh0y94vh7cLkuFnwe3y8l+ZWmwdMMSH+GHJfLCD0tMhx+WaBE/LHEobljOCBc/LLEzfliicvywxPv4YWmwdMMS7+OHJd7HD0u8jx+WeB8/LPE+blgueB8/LPE+fljiffywxPv4YWmwdMMS7+OHJd7HD0u8jx+WeB8/LPE+blg2vI8flngfPyzxPn5Y4n38sDRYumGJ9/HDEu/jhyXeR3lHm4bKkcaDnVHGsyJclLdMWXEo0njQItJ4MB3SeAw8ynjwEdIrNxSDNB6sgTQerIH0dw/WQBhPnbAG0niwBtJ4sAbSeLAG0ngMPMp4sAbCfU+dsAbSeLAG0niwBtJ4sAbKeBLWQHnllrAG0niwBtJ4sAbSeAw8yniwBtJ4sAbSeLAG0niwBtJ4sAbK1iBjDaTxYA2k8WANpPFgDaTxGHiEV24ZayCNB2sgjQdrII0HayCNB2ugjKdgDaTxYA2k8WANpPFgDZStQTHwKOPBGkjjwRpI48EaSOPBGkiv3LAGyngMayCNB2sgjQdrII0HayCNx8CjjAdrII0HayCNB2ugbA0MayCNB2ugjKdiDaTxYA2k8WANlFduFWsgjcfAo4wHayCNB2sgjQdrII0HayCNB2ugjGfGGkjjwRooW4MZayCNB2sgjcfAo4wHayCNB2sgvXLDGkjjwRpI48EaKONZsAbSeLAG0niwBtJ4sAbSeAw8yniwBsrWYMEaSOPBGkjjwRpI48EaKONpWAPllVvDGkjjwRpI48EaSOMx8CjjwRpI48EaSOPBGkjjwRpI48EaKFuDFWsgjQdrII0HayCNB2sgjcfAI7xyW7EG0niwBtJ4sAbSeLAG0niwBsJ45glrII0HayCNB2sgjQdrIGwN5snAo4wHayCNB2sgjQdrII0HayC9csMaKONJWANpPFgDaTxYA2k8WANpPAYeZTxYA2k8WANpPFgDZWuQsAbSeLAGyngy1kAaD9ZAGg/WQHnllrEG0ngMPMp4sAbSeLAG0niwBtJ4sAbSeLAGyngK1kAaD9ZA2RoUrIE0HqyBNB4DjzIerIE0HqyB9MoNayCNB2sgjQdroIzHsAbSeLAG0niwBtJ4sAbSeAw8yniwBsrWwLAG0niwBtJ4sAbSeLAGyngq1kB55VaxBtJ4sAbSeLAG0ngMPMp4sAbSeLAG0niwBtJ4sAbSeLAGytZgxhpI48EaSOPBGkjjwRpI4zHwCK/cZqyBNB6sgTQerIE0HqyBNB6sgTKeBWsgjQdrII0HayCNB2ugbA0WA48yHqyBNB6sgTQerIE0HqyB9MoNa6CMp2ENpPFgDaTxYA2k8WANpPEYeJTxYA2k8WANpPFgDZStQcMaSOPBGijjWbEG0niwBtJ4sAbKK7cVayCNx8CjjAdrII0HayCNB2sgjQdrII0HayCMZ5mwBtJ4sAbC1mCZsAbSeLAG0ngMPMp4sAbSeLAG0is3rIE0HqyBNB6sgTKehDWQxoM1kMaDNZDGgzWQxmPgUcaDNVC2BglrII0HayCNB2sgjQdroIwnYw2UV24ZayCNB2sgjQdrII3HwKOMB2sgjQdrII0HayCNB2sgjQdroGwNCtZAGg/WQBoP1kAaD9ZAGo+BR3jlVrAG0niwBtJ4sAbSeLAG0niwBsp4DGsgjQdrII0HayCNB2ugbA3MwKOMB2sgjQdrII0HayCNB2sgvXLDGijjqVgDaTxYA2k8WANpPFgDaTwGHmU8WANpPFgDaTxYA2VrULEG0niwBsp4ZqyBNB6sgTQerIHyym3GGkjjMfAo48EaSOPBGkjjwRpI48EaSOPBGijjWbAG0niwBsrWYMEaSOPBGkjjMfAo48EaSOPBGkiv3LAG0niwBtJ4sAbKeBrWQBoP1kAaD9ZAGg/WQBqPgUcZD9ZA2Ro0rIE0HqyBNB6sgTQerIEynhVroLxyW7EG0niwBtJ4sAbSeAw8yniwBtJ4sAbSeLAG0niwBtJ4sAbC1qBNWANpPFgDaTxYA2k8WANpPAYe3ZVbm7AG0niwBtJ4sAbSeLAG0niwBsp4EtZAGg/WQBoP1kAaD9ZA2RokA48yHqyBNB6sgTQerIE0HqyB9MoNa6CMJ2MNpPFgDaTxYA2k8WANpPEYeJTxYA2k8WANpPFgDZStQcYaSOPBGijjKVgDaTxYA2k8WAPllVvBGkjjMfAo48EaSOPBGkjjwRpI48EaSOPBGijjMayBNB6sgbI1MKyBNB6sgTQeA48yHqyBNB6sgfTKDWsgjQdrII0Ha6CMp2INpPFgDaTxYA2k8WANpPEYeJTxYA2UrUHFGkjjwRpI48EaSOPBGijjmbEGyiu3GWsgjQdrII0HayCNx8CjjAdrII0HayCNB2sgjQdrII0Ha6BsDRasgTQerIE0HqyBNB6sgTQeA4/wym3BGkjjwRpI48EaSOPBGkjjwRoo42lYA2k8WANpPFgDaTxYA2Vr0Aw8yniwBtJ4sAbSeLAG0niwBtIrN6yB8uxZsQbSeLAG0niwBtJ4sAbSeAw8wiu3FWsgPXuwBtJ4sAbSeLAG0niwBsJ41glrILxyWyesgTQerIE0HqyBNB4DzyfxWL6d4eU/l694sAafxHOp7qPQ6Rc8Xw9u2eznwe1ysl9Zohj8sMRH+GGJvPDDEtPhhmVCi/hhiUPxwxLh4ocldsYPS4OlG5Z4Hz8s8T5+WOJ9/LDE+/hhifdxwzLjffywxPv4YYn38cMS7+OHpcHSDUu8jx+WeB8/LPE+fljiffywxPu4YVnwPn5Y4n38sMT7+GGJ9/HD0mDphiXexw9LvI8flngfPyzxPn5Y4n2Ud7QxVI40HuyMNB6Ei/KWKYZDkcZj4FHGg+mQxoO8kMaDj5BeuaEYpPFgDZTxVKyB8ndPxRpI48EaSOPBGkjjMfAo48EaSOPBGkjjwRpI9z1YA2k8WANlPDPWQBoP1kAaD9ZAeeU2Yw2k8Rh4lPFgDaTxYA2k8WANpPFgDaTxYA2U8SxYA2k8WANla7BgDaTxYA2k8Rh4lPFgDaTxYA2kV25YA2k8WANpPFgDZTwNayCNB2sgjQdrII0HayCNx8CjjAdroGwNGtZAGg/WQBoP1kAaD9ZAGc+KNVBeua1YA2k8WANpPFgDaTwGHmU8WANpPFgDaTxYA2k8WANpPFgDXWtQpglrII0HayCNB2sgjQdrII3HwCO7crvgwRpI48EaSOPBGkjjwRpI48EaKONJWANpPFgDaTxYA2k8WANla5AMPMp4sAbSeLAG0niwBtJ4sAbSKzesgTKejDWQxoM1kMaDNZDGgzWQxmPgUcaDNZDGgzWQxoM1ULYGGWsgjQdroIynYA2k8WANpPFgDZRXbgVrII3HwKOMB2sgjQdrII0HayCNB2sgjQdroIzHsAbSeLAGytbAsAbSeLAG0ngMPMp4sAbSeLAG0is3rIE0HqyBNB6sgTKeijWQxoM1kMaDNZDGgzWQxmPgUcaDNVC2BhVrII0HayCNB2sgjQdroIxnxhoor9xmrIE0HqyBNB6sgTQeA48yHqyBNB6sgTQerIE0HqyBNB6sgbI1WLAG0niwBtJ4sAbSeLAG0ngMPMIrtwVrII0HayCNB2sgjQdrII0Ha6CMp2ENpPFgDaTxYA2k8WANlK1BM/Ao48EaSOPBGkjjwRpI48EaSK/csAbKeFasgTQerIE0HqyBNB6sgTQeA48yHqyBNB6sgTSeBTzC1mDFGkjjwRoI40kT1kAaD9ZAGg/WQHjlliasgTQeA48yHqyBNB6sgTQerIE0HqyBNB6sgTKehDWQxoM1ULYGCWsgjQdrII3HwKOMB2sgjQdrIL1ywxpI48EaSOPBGijjyVgDaTxYA2k8WANpPFgDaTwGHmU8WANla5CxBtJ4sAbSeLAG0niwBsp4CtZAeeVWsAbSeLAG0niwBtJ4DDzKeLAG0niwBtJ4sAbSeLAG0niwBsrWwLAG0niwBtJ4sAbSeLAG0ngMPMIrN8MaSOPBGkjjwRpI48EaSOPBGijjqVgDaTxYA2k8WANpPFgDZWtQDTzKeLAG0niwBtJ4sAbSeLAG0is3rIEynhlrII0HayCNB2sgjQdrII3HwKOMB2sgjQdrII0Ha6BsDWasgTQerIEyngVrII0HayCNB2ugvHJbsAbSeAw8yniwBtJ4sAbSeLAG0niwBtJ4sAbKeBrWQBoP1kDZGjSsgTQerIE0HgOPMh6sgTQerIH0yg1rII0HayCNB2ugjGfFGkjjwRpI48EaSOPBGkjjMfAo48EaKFuDFWsgjQdrII0HayCNB2sgjCdPWAPhlVuesAbSeLAG0niwBtJ4DDzKeLAG0niwBtJ4sAbSeLAG0niwBsrWIGENpPFgDaTxYA2k8WANpPEYeIRXbglrII0HayCNB2sgjQdrII0Ha6CMJ2MNpPFgDaTxYA2k8WANlK1BNvAo48EaSOPBGkjjwRpI48EaSK/csAbKeArWQBoP1kAaD9ZAGg/WQBqPgUcZD9ZAGg/WQBoP1kDZGhSsgTQerIEyHsMaSOPBGkjjwRoor9wMayCNx8CjjAdrII0HayCNB2sgjQdrII0Ha6CMp2INpPFgDZStQcUaSOPBGkjjMfAo48EaSOPBGkiv3LAG0niwBtJ4sAbKeGasgTQerIE0HqyBNB6sgTQeA48yHqyBsjWYsQbSeLAG0niwBtJ4sAbKeBasgfLKbcEaSOPBGkjjwRpI4zHwKOPBGkjjwRpI48EaSOPBGkjjwRooW4OGNZDGgzWQxoM1kMaDNZDGY+ARXrk1rIE0HqyBNB6sgTQerIE0HqyBMp4VayCNB2sgjQdrII0Ha6BsDVYDjzIerIE0HqyBNB6sgTQerIH0yg1rIIynTFgDaTxYA2k8WANpPFgDaTwGHmU8WANpPFgDaTxYA2FrUCasgTQerIEynoQ1kMaDNZDGgzVQXrklrIE0HgOPMh6sgTQerIE0HqyBNB6sgTQerIEynow1kMaDNVC2BhlrII0HayCNx8CjjAdrII0HayC9csMaSOPBGkjjwRoo4ylYA2k8WANpPFgDaTxYA2k8Bh5lPFgDZWtQsAbSeLAG0niwBtJ4sAbKeAxroLxyM6yB9OzBGkjjwRpI4zHwKOPBGkjjwRpIr9ywBtKzB2sgjQdroIynYg2k8WANpPFgDZRXbhVrII3HwKOMB2sgjQdr8FE8lm9nePnP5SserEEfT5tvw7gU2V7jWexGZ6mPQaRp/llvNMDYeq/32bC26Zd6bwx5WW/FyK08RpE2D052G3JO9WnmLD9JYgzOQjJPt8trziU/k9yo8nKv8rp+uVzOeIjTQK/1Dn1pu6BjN84CvczL/fzW8uWaPSNCzkLyUo3bwbUsr6fvZf2c7+vnafqKHcESEruB3SP2Jd8OTsvT+f3JNzvuiIS8Tgj6ymdClumekF8Xit9OCAaNhLxOCM5vcELutxzSlFsnIjZPtzrbPOfXEbGU7gf/Iv1+6tsZ6ddHuZb7snx9quH23Yx1vn9Vr8/T7K//3rg0NLtdG2z65W7GxqDrfbpfvN38egaXizq4HZwtf+klFsRfUPDIv6DgcYVOwT8kcSmtfQWPLQwK3gDvE/zlz90Otty5AXzpI+/3/Zv1Dh53a3nBRZK+z6UPz0n6vpu+YU9YLDhU0ve59OFnSd8lcvN8T18vUL2HQxc8MZH6ZqTGLeYaspr0fS59GHPS97n0oe1J33fTN6yVaNw7IH2fS5+RPtL3vfR1fjHTuCtBpAZHilsNRGpwpLh/QKS+GamRvzRr3EEgf5/MH7cbyN+R+Rv3g7qVexNE9SRR5UYGUT1JVLnrQVQPjeqwX8Ou3CIhqieJqhFVoppXuw0jr8vOTn3lfgqRGhwp7qcQqW9GamDnwa0X0ve59HHjhfR9Ln3cdiF9303fqO7UJu6kkL7PpY+bI17T18o9fWvPzH3rJ7uvfzRpEzcxiNSndsCwifsSpO9z6TPSR/o+lj7uSpC+T+2/YhM3MEjf59LHDQzS9830vf45kk3clSBSgyPFrQYiNTZSifsHROqbkRr4ozVL3EEgf5/MH7cbyN+R+Rv2oIkl7k0Q1ZNE1YgqUT1HVLnrQVQPjeqwp60St0iI6kmiyv0Uovqp7Z8tceuF9H0ufdylIX2f2v7ZMjd0SN/n0sftHNI3dGcDy9yhIVKDI8WdFCL1qR+MWzbSR/o+lj7ud5C+z6WPWxik72PbFWTuSpC+z6WPuxLd9OWpPXaHMOukr6x3NpdV9eMM/yrj1z9t5Y7d7EEyb9Yutek+Ddr8SNQlXj9pYvk/SrPW++8a6pI7NC+nOD0M5/QLza053+bHnM9f2Rccu1v2vXlfMNxx5z0qOi57nHFc9gb7sOzxpXHZYyvjsscVxu3xMHVx5z1eL+y8N7xe2HlveL247PF6cdnj9eJ+3xvsw857vF5c9ni9uOzxenHZ4/XirvXwemHnfcXrxWWP14vLHq8X9vu+4vXiznuDfdh5j9eLO+/xenHnPV4v7rzH68Vlj9cLy37G64X9vp/xenHnPV4v7rzH68Wd9wb7sPMerxd33uP14rLH68Vlj9eL+32P1ws77xe8Xlz2eL2w1/wFrxd33uP14s57g33YeY/Xizvv8Xpx5z1eLy57vF5c9ni9sOwbXi8ue7xe2HV+w+vFnfd4vbjsDfZh2eP14n7f4/Xiznu8Xtx5j9eLO+/xemHZr3i9uOzxenHZ4/XCrvVWvF7ceW+wDzvv8Xpx5z1eLy57vF7caz5eL+68x+tFZV8nvF5c9ni9uOzxenHZ4/XisjfYh2WP14vLHq8X1e3UCa8Xd97j9eKyx+uFveYnvF7YeZ/wenHZ4/Xissfrxf2+N9iHnfd4vbjzHq8Xd97j9eKyx+vFvebj9cLO+4zXCzvvM14v7rzH68Wd93i9uPPeYB+WPV4vLnu8Xlz2eL247PF6cdf5eL2w877g9eKyx+uFveYXvF7ceY/Xi8veYB+WPV4vLnu8Xlz2eL247PF6cXs8vF7YeW94vbjs8Xpx2eP14rLH64Vd65nBPuy8x+vFZY/Xi3vNx+vFnfd4vbjzHq8Xdt5XvF5c9ni9sNf8iteLO+/xenHnvcE+7LzH68Vlj9eLe83H68Wd93i9uPMerxd23s94vbjs8Xphr/kzXi/uvMfrxWVvsA/LHq8Xlz1eLy57vF5c9ni9uOzxemH7+wWvF3beL3i9uPMerxd33uP14rI32Idlj9eLyx6vF5c9Xi8ue7xeXPZ4vbD9fcPrhZ33Da8Xlz1eL+41H68Xd94b7MOyx+vFvebj9eLOe7xe3HmP14s77/F6YdmveL247PF6cdnj9eKyx+uFXeevBvuw8x6vF5c9Xi/uNR+vF3fe4/Xiznu8XtR5P094vajzfp7wenHnPV4vLnu8XtxrvsE+7LzH68Vlj9eLyx6vF/f7Hq8Xd97j9cKyT3i9sNf8hNeLO+/xenHZ4/XisjfYh2WP14vLHq8Xlz1eL26Ph9eLO+/xemHnfcbrhZ33Ga8Xlz1eLy57vF7c73uDfdh5j9eLO+/xenHnPV4v7rzH68Wd93i9sPO+4PXCzvuC14s77/F6cec9Xi8ue4N92Gs+Xi/uvMfrxWWP14vLHq8Xlz1eLyx7w+uFXecbXi/uvMfrxWWP14vL3mAf9vserxd33uP14rLH68Vlj9eLyx6vF5Z9xeuFXedXvF7ceY/Xizvv8Xpx573BPuy8x+vFnfd4vbjzHq8Xd97j9eKyx+uFZT/j9cJ+3894vbjzHq8Xd97j9eLOe4N9WPZ4vbjXfLxe3HmP14s77/F6cec9Xi/svF/wemHn/YLXi8serxeXPV4v7ve9wT7svMfrxWWP14t7zcfrxZ33eL248x6vF3beN7xe2Hnf8Hpx5z1eLy57vF5c9gb7sOzxenHZ4/XirvPxenHnPV4vLnu8Xlj2K14v7Pf9iteLO+/xenHZ4/XisjfYh2WP14u71sPrxZ33eL247PF6ca/5eL2o836Z8Hpx2eP14rLH68Vlj9eLy95gH3Sdv0x4vbjzHq8Xd97j9eLOe7xe3HmP1ws77xNeL+y8T3i9uPMerxd33uP14s57g31Y9ni9uOzxenHZ4/XissfrxV3n4/XCzvuM1ws77zNeL+68x+vFnfd4vbjz3mAfdt7j9eLOe7xe3HmP14s77/F6cdnj9cJe8wteL+y8L3i9uOzxenGv+Xi9uPPeYB923uP14s57vF5c9ni9uOzxenG/7/F6Yee94fXissfrxWWP1wv7fW94vbjz3mAfdt7j9eLOe7xe3HmP14s77/F6cec9Xi/svK94vbDzvuL1zsS+tTv7tWzQxNSdleayQRP3diKadq90trL1LWvQdEQTP+aJJsbLE00clieaWClPNPFMjmjOmCNPNHFBnmjigjzRxAV5omnQdEQTF+SJJi7IE01ckCeauCBPNHFBjmguuCBPNHFBnmjigjzRxAV5omnQdEQTF+SJJi7IE01ckCeauCBPNHFBZ6I5pzvNeeOXCw0X5IkmLsgTTVyQJ5q4oDPRvBcvW7MNmgZNRzRxQY46lIYL8kQTF+SJJi7IE01ckCOaKy7IE01ckCeauCBPNHFBnmgaNB3RxAV5ookL8kQTF+SJJi7IE01ckB+abcIFeaKJC/JEExfkiSYuyBNNg6YjmrggTzRxQZ5o4oI80cQFeaKJC3JEM+GC/PwOpSVckCeauCBPNHFBnmgaNN38RqwlXJAnmrggTx0KLsgTTVyQJ5q4IEc0My7IE01ckCeauCBPNHFBnmgaNB3RxAV5ookL8kQTF+SJJi7IE01ckCOaBRfkiSYuyBNNXJAnmrggTzQNmo5o4oI80cQFeaKJC/JEExfkiSYuyBFNwwU5+uWC4YI80cQFeaKJC/JE06Dp51dFhgvyRBMX5KlDwQV5ookL8kQTF+SIZsUFeaKJC/JEExfkiSYuyBNNg6YjmrggTzRxQZ5o4oI80cQFeaKJC3JEc8YFeaKJC/JEExfkiSYuyBNNg6YjmrggTzRxQZ5o4oI80cQFeaKJC3L0rPuCC/JEExfkiSYuyBNNXJCj36EsBk1HNHFBjjqUBRfkiSYuyBNNXJAnmrggRzQbLsgTTVyQJ5q4IE80cUGeaBo0HdHEBXmiiQvyRBMX5IkmLsgTTVyQI5orLsgTTVyQJ5q4IE80cUGeaBo0HdHEBXmiiQvyRBMX5Ojp6BUX5IkmLsgPzXXCBXmiiQvy88uFdcIFeaKJC/LToayTQdMRTVyQJ5q4IE80cUGeaOKCPNHEBTmimXBBnmjigjzRxAV5ookL8kTToOmIJi7IE01ckCeauCBPNHFBnmjighzRzLggTzRxQZ5o4oI80cQFeaJp0PTzPG3GBXmiiQvyRBMX5IkmLsjRs+4ZF+SIZsEFOepQCi7IE01ckCeauCBPNA2ajmjigjzRxAV5ookL8kQTF+SJJi7IEU3DBXmiiQvyRBMX5IkmLsgTTYOmI5q4IE80cUGeaOKCPNHEBXmiiQtyRLPighw9gVlxQZ5o4oI80cQFeaJp0PTzdHTFBXmiiQvy1KHggjzRxAV5ookLckRzxgV5ookL8kQTF+SJJi7IE02DpiOauCBPNHFBnmjigjzRxAV5ookLckRzwQV5ookL8kQTF+SJJi7IE02DpiOauCBHz+wtuCBPNHFBnmjigjzRxAU5ep624YI80cQFOepQGi7IE01ckCeaBk1HNHFBnmjigjzRxAV5ookL8kQTF+SI5ooL8kQTF+SJJi7IE01ckCeaBk1HNHFBnmjigjzRxAV5ookL8kQTF+TmKS+bJlyQJ5q4IE80cUGeaOKC3DyBeaFp0HREExfkpkO50MQFeaKJC/JEExfkiSYuyBHNhAvyRBMX5IkmLsgTTVyQJ5oGTUc0cUGeaOKCPNHEBXmiiQvyRBMX5IhmxgV5ookL8kQTF+TouaCMC/JE06DpiCYuyBNNXJCjZ/YyLsgTTVyQpw4FF+SIZsEFeaKJC/JEExfkiSYuyBNNg6YjmrggTzRxQZ5o4oI80cQFeaKJC3JE03BBnmjigjzRxAV5ookL8kTToOnnSRLDBXmiiQvyRBMX5IkmLsjRU16GC3JEs+KCHHUoFRfkiSYuyBNNXJAnmgZNRzRxQZ5o4oI80cQFeaKJC/JEExfkiOaMC/JEExfkiSYuyBNNXJAnmgZNRzRxQY6ePZhxQZ5o4oI80cQFeaKJC3L0XNCCC/JEExfkqENZcEGeaOKCPNE0aDqiiQvyRBMX5IkmLsgTTVyQJ5q4IEc0Gy7IE01ckCeauCBPNHFBnmgaNB3RxAU5ulvdcEGeaOKCPNHEBXmiiQty9CTJigvyRBMX5KhDWXFBnmjigjzRNGg6ookL8kQTF+SJJi7IE01ckCeauCA/NNOEC/JEExfkiSYuyBNNXJAnmgZNN/c3L58BTUc0cUGeaOKCPNHEBfl59iBNuCBHNBMuyFGHknBBnmjigjzRxAV5omnQdEQTF+SJJi7IE01ckCeauCBPNHFBjmhmXJAnmrggTzRxQY7uiGVckCeaBk1HNHFBnmjighzdrc64IE80cUGeOhRckCOaBRfkiSYuyBNNXJAnmrggTzQNmo5o4oI80cQFeaKJC/JEExfkiSYuyNE9FMMFeaKJC/JEExfkiSYuyNH9TTNoOqKJC3LUoRguyBNNXJAnmrggTzRxQY5oVlyQJ5q4IE80cUGeaOKCPNE0aDqiiQtyZN0rLsgTTVyQJ5q4IE80cUGO7ojNuCBPNHFBjjqUGRfkiSYuyBNNg6YjmrggTzRxQZ5o4oI80cQFeaKJC3JEc8EFOfK0Cy7IE01ckCeauCBPNA2afu6hLLggTzRxQZ46FFyQJ5q4IE80cUGOaDZckCeauCBPNHFBnmjigjzRNGj6MXsNF+SJJi7IE01ckCeauCBH1r3hghzRXHFBjjqUFRfkiSYuyBNNXJAnmgZNRzRxQZ5o4oI80cQFOXJBKy7IE01ckB+aecIFeaKJC/LjafOEC/JEExfkp0PJk0HTEU1ckCeauCBPNHFBnmjigjzRxAU5sgcJF+SJJi7IE01ckCeauCBHZi8ZNB3RxAU56lASLsgTTVyQJ5q4IE80cUGOaGZckKN+M+OCPNHEBXmiiQvyRNOg6ccFZVyQJ5q4IE8dCi7IE01ckCeauCBHNAsuyFGHUnBBnmjigjzRxAV5omnQ9GMPCi7IE01ckKcOBRfkiSYuyBNNXJCjNa3hgjzRxAV5ookL8kQTF+So3zSDpiOauCBHHYrhgjzRxAV5WgXhgjzRxAU5ollxQZ5o4oIcdSgVF+SJJi7IUYdSDZqOvjdxQZ5o4oI80cQFeaKJC/K0psUFOaI544IcXWlnXJAnmrggTzRxQZ5oGjQdrYJwQZ5o4oI+SrPVu0dv89ShuZZmP49ebXpcadPWwaWu7XaK8zQ/Dl62Ds7lNo5ycfvPB19jgmQiJr8RE+wVMfmNmKDFiEk/Jgu+jZhcjijzbcVbSmtfY4LIIya/ERMMITH5q/Od7jGxnF8fnFu516NZ7+Bkj+LV5WsAkZoE8NAA5mm9HZxL5+C63MOxrs+nd82qkVWyepKsIqTJ6lmyim4nq8dmtdZ7Vpe2K6s4f7J6lqxy44GsHprVh13KZS1fm3tuaRDATwawcbOEAH40gNyGIYAfDSA3eAjgoQG0+zByLcvrg1NtN4ZpnqavaeVuEGk9T1qNtJJWmbQu+XZwWp6w/IE4atw8Itgug82dJoLtMtjcliLYQsFe7sVbfpUS3w4297AItstgc2+MYH872PNj0L1nAwY+oLVyG42sniWr3HEjq8dmddgDWis358jqWbLKrTmy+t2srnYbRl6XnXfbViOABPCTAeSuGAE8NIDj7ges3Ogiq2fJKveuyOpZssrtKLJ6bFaH3WFaucNEVs+R1TJxh4ms/hXQVu5ZXXty8zPbVZSJO0xk9SxZ5Q4TWT02q6PuMJWJO0xk9SxZNbJKVr+b1e/cuX+9b2qZuBlFAA8N4MBFKDejyOpZssrNKLJ6lqxyM4qsHpvVcQ0TN6PI6kmymrgZRVYPzerrTdsuIAggAfxkALltRAA/GkDuBRHAQwM4cCPAkoy0ktbTpJVbR6RVJ63DHs4viftMBNtlsLkpRbBdBps7WARbKNjDfs+SuN1FsD0GO3NvjGB/N9gDd2EpmXtjBPCjAeTeGAE8NIDj+qvMbTSyepasGlklqyfJKrfQyOqxWR3XsXNXjKyeJavc6PpsVu/pu/xn62R1uaNc2iN89SdJ7ux4IcmtDCckC+7+oyTXx14la62/kLzyQW1r88H8avPBdo7mY/dqXMrb4dPuPcPlK6tzrKV0g2K/bG8z/0RpoPSCEld2GpS53KpheQslKskNSkyLG5SoFjcocS1eUBqyxQ1KvIwblCgcNyixPX2Uy5ruymxqr1FeuN+Hkevj7sGyRSfN9zqnJU2dg9N9z8OUSnt9cFtvTNanv5suN5av2A3sHrGv663MaXoa8l/cvx58YfzAnTqPSbT8uOpcSv588DVRCCoSNTZReDISNTZR6DoSNTZRWEMSNTZRyEsSNTRRFYdKosYmCpVLosYmCqNMosYmCrFNosYmykgUiRqaKJw5iRqbKJw5iRqbKJw5iRqbKJw5iRqbKJw5iRqaqBlnTqLGJgpnTqLGJgpnTqLGJgpnTqLGJspIFIkamiicOYkamyicOYkamyicOYkamyicOYkamyicOYkamqgFZ06ixiYKZ06ixiYKZ06ixiYKZ06ixibKSBSJGpoonDmJGpsonDmJGpsonDmJGpsonDmJGpsonDmJWrLd3he55GcqP0PS0OCEpBsSzDYh6YYEWU1Ilrze/vJS0kZI8M+EpBsSIySEpBcSLDEh6YYE8UtIuiHB5RKSbneDniUk3ZBgXAlJLyQrxpWQ9NYkK8aVkHRDgnElJN2QYFwJSTckRkgISS8kGFdC0g0JxpWQdEOCcSUkXU+CcSUk3ZBgXAlJJyQ2YVwJSTckGFdC0g0JxpWQdLobmzCuhKQbEiMkhKQXEowrIemGBONKSLohwbgSkm5IMK6EpBsSjCsh6YUkYVwJSTckGFdC0jOuCeNKSLohwbgSkm5IjJAQkl5IMK6EpBsSjCsh6XY3GFdC0g0JxpWQdEOCcSUkvZBkjCsh6YYE40pIuiHBuBKSbkgwroSkGxIjJISkFxKMKyHpGdeMcSUk3ZBgXAlJNyQYV0LSDQnGlZD0QlIwroSk190UjCsh6YYE40pIuiHBuBKSbkiMkBCSXkgwroSkGxKMKyHphgTjSki6IcG4EpJuSDCuhKRnXA3jSki6IcG4EpJuSDCuhKQbEowrIemGxAgJIel0N4ZxJSTdkGBcCUk3JBhXQtINCcaVkHRDgnElJL2QVIwrIemGBONKSLohwbgSkm5IMK6EpGdcqxESQtILCcaVkHRDgnElJN2QYFwJSTckGFdC0u1uMK6EpBeSGeNKSLohwbgSkm5IMK6EpBsSjCsh6YbECAkh6YUE40pIuiHBuBKSbkgwroSkZ1xnjCsh6YYE40pIeiFZMK6EpBsSjCsh6YYE40pIet3NgnElJN2QGCEhJL2QYFwJSTckGFdC0g0JxpWQdEOCcSUk3ZBgXAlJLyQN40pIuiHBuBKSnnFtGFdC0g0JxpWQdENihISQ9EKCcSUk3ZBgXAlJt7vBuBKSbkgwroSkGxKMKyHphWTFuBKSbkgwroSkGxKMKyHphgTjSki6ITFCQkh6IcG4EpKecV0xroSkGxKMKyHphgTjSki6IcG4EpJOSOqEcSUkne6mThhXQtINCcaVkHRDgnElJN2QGCEhJL2QYFwJSTckGFdC0g0JxpWQdEOCcSUk3ZBgXAlJz7gmjCsh6YYE40pIuiHBuBKSbkgwroSkGxIjJISk090kjCsh6YYE40pIuiHBuBKSbkgwroSkGxKMKyHphSRjXAlJNyQYV0LSDQnGlZB0Q4JxJSQ945qNkBCSXkgwroSkGxKMKyHphgTjSki6IcG4EpJud4NxJSS9kBSMKyHphgTjSki6IcG4EpJuSDCuhKQbEiMkhKQXEowrIemGBONKSLohwbgSkp5xLRhXQtINCcaVkPRCYhhXQtINCcaVkHRDgnElJL3uxjCuhKQbEiMkhKQXEowrIemGBONKSLohwbgSkm5IMK6EpBsSjCsh6YWkYlwJSTckGFdC0jOuFeNKSLohwbgSkm5IjJAQkl5IMK6EpBsSjCsh6XY3GFdC0g0JxpWQdEOCcSUkvZDMGFdC0g0JxpWQdEOCcSUk3ZBgXAlJNyRGSAhJLyQYV0LSM64zxpWQdEOCcSUk3ZBgXAlJNyQYV0LSC8mCcSUkve5mwbgSkm5IMK6EpBsSjCsh6YbECAkh6YUE40pIuiHBuBKSbkgwroSkGxKMKyHphgTjSkh6xrVhXAlJNyQYV0LSDQnGlZB0Q4JxJSTdkBghISSd7qZhXAlJNyQYV0LSDQnGlZB0Q4JxJSTdkGBcCUkvJCvGlZB0Q4JxJSTdkGBcCUk3JBhXQtIzrqsREkLSCwnGlZB0Q4JxJSTdkGBcCUk3JBhXQtLtbjCuhKQTknnCuBKSbkgwroSkGxKMKyHphgTjSki6ITFCQkh6IcG4EpJuSDCuhKQbEowrIekY13nCuBKSbkgwroSkF5KEcSUk3ZBgXAlJNyQYV0LS624SxpWQdENihISQ9EKCcSUk3ZBgXAlJNyQYV0LSDQnGlZB0Q4JxJSS9kGSMKyHphgTjSkh6xjVjXAlJNyQYV0LSDYkREkLSCwnGlZB0Q4JxJSTd7gbjSki6IcG4EpJuSDCuhKQXkoJxJSTdkGBcCUk3JBhXQtINCcaVkHRDYoSEkPRCgnElJD3jWjCuhKQbEowrIemGBONKSLohwbgSkl5IDONKSHrdjWFcCUk3JBhXQtINCcaVkHRDYoSEkPRCgnElJN2QYFwJSTckGFdC0g0JxpWQdEOCcSUkPeNaMa6EpBsSjCsh6YYE40pIuiHBuBKSbkiMkBCSTndTMa6EpBsSjCsh6YYE40pIuiHBuBKSbkgwroSkF5IZ40pIuiHBuBKSbkgwroSkGxKMKyHpGdfZCAkh6YUE40pIuiHBuBKSbkgwroSkGxKMKyHpdjcYV0LSC8mCcSUk3ZBgXAlJNyQYV0LSDQnGlZB0Q2KEhJD0QoJxJSTdkGBcCUk3JBhXQtIzrgvGlZB0Q4JxJSS9kDSMKyHphgTjSki6IcG4EpJed9MwroSkGxIjJISkFxKMKyHphgTjSki6IcG4EpJuSDCuhKQbEowrIemFZMW4EpJuSDCuhKRnXFeMKyHphgTjSki6ITFCQkh6IcG4EpJuSDCuhKTb3WBcCUk3JBhXQtINCcaVkHRCskwYV0LSDQnGlZB0Q4JxJSTdkGBcCUk3JEZICEkvJBhXQtIxrsuEcSUk3ZBgXAlJNyQYV0LSDQnGlZD0QpIwroSk190kjCsh6YYE40pIuiHBuBKSbkiMkBCSXkgwroSkGxKMKyHphgTjSki6IcG4EpJuSDCuhKRnXDPGlZB0Q4JxJSTdkGBcCUk3JBhXQtINiRESQtLpbjLGlZB0Q4JxJSTdkGBcCUk3JBhXQtINCcaVkPRCUjCuhKQbEowrIemGBONKSLohwbgSkp5xLUZICEkvJBhXQtINCcaVkHRDgnElJN2QYFwJSbe7wbgSkl5IDONKSLohwbgSkm5IMK6EpBsSjCsh6YbECAkh6YUE40pIuiHBuBKSbkgwroSkZ1wN40pIuiHBuBKSXkgqxpWQdEOCcSUk3ZBgXAlJr7upGFdC0g2JERJC0gsJxpWQdEOCcSUk3ZBgXAlJNyQYV0LSDQnGlZD0QjJjXAlJNyQYV0LSM64zxpWQdEOCcSUk3ZAYISEkvZBgXAlJNyQYV0LS7W4wroSkGxKMKyHphgTjSkh6IVkwroSkGxKMKyHphgTjSki6IcG4EpJuSIyQEJJeSDCuhKRnXBeMKyHphgTjSki6IcG4EpJuSDCuhKQXkoZxJSS97qZhXAlJ90qCcSUk3ZBgXAlJNyRGSAhJLyQYV0LSDQnGlZB0uxuMKyHpXkkwroSkGxKMKyHphWTFuBKSbkgwroSkGxKMKyHpdTcrxpWQdENihISQ9EKCcSUk3ZBgXAnJYvlW58t/Ll9DgnF1GZI05emekqfSbackrfOtvUnrX0e8PHotzX4evdr0S6Y2Kl3X258u8/SoR1q2Ds7lFqWSLT8ffE0r6pe0nietOGjSepa0tgkZTlp10lrm5XZwae1rWrHypPU8aeX2AGnVSevlz90OtpxfH5xbuZ1ibtY7ON+Ll3PpHFyXe0bX9Z/FRJu4WcKUYcp8a8oYU4YpE2HK1HrHsrRdU4YbaUwZpsy3pgy3FZkyZ50y83yfMr1ZkJPd51eqy9eenjunzIMI82Bgg8LtW6YMU+ZbU4Z7yEwZpsx3pkziRjZTJsSUGdbTJ+6mM2WYMt+aMtzSZ8pEmDKPR1tyeT7DnxoscZ+eecA8aMmYB8wD5kHijjrzIMI8sPswci3L64NTvTNM8zR9nTTcU2fSMGm+OWm4Ac+kYdL8UzmWfC/H8pSOPzFc3K1nfjG/jptf3NpnfjG/DptfmecAmF/Mr3+eX8u9eMuv+u7b84uHBphfzK/j5hdPGDC/Tjq/VrM7lmWn58s8YcA8YB60bMwD5kGAeTBQAfAwAlOGKfOtKcOjCEwZpsy3pgwPIjBlQkyZcW6LZwuYMkyZb00ZHhdgyghNmVbuU2bt3UH51lZlnX2XCrf1mQcR5sG4HTEKd+qZMkyZb00Zbr4zZZgy35oy3KdnyoSYMsM2kSnGlGHKMGW+M2W4pc+UiTBlOvtsFO7TMw+YB61w8515wDxohTvqzIMI82DkFjKFe+pMGibN9yaNcQOeScOk+adyjHuc2Lhbz/xifh03v7i1z/xifh03v3gOgPnF/Prn+TXshwBmzC/mF/PrsPnFEwbMr7POr8+8ctN4GIEpw5T51pThuQWmTIgpM+zRT+MRB6YMU+ZbU4YHHJgyJ50yI/fOrDyzwDxgHrTKswXMgwjzYNztzMrjAkwZpsy3pgxPADBlmDLfmjLGlGHKRJgyw+7TV+7TM2WYMt+aMtyn9zllyj18qTxzv8TlCp67zUHBc880APi8AZ47fzHBz9zqCgqeeztBwXOHIih4PHtQ8Ab4s4Av6f5ERin2fPAVJRbTDUrsmhuU+DI3KDFgblDitLygXLBUblDindygxCS5QYkbcoPSQOkFJbbHDUpsjxuU2B43KLE9blBie7ygbNgeNyixPW5QYnvcoMT2uEFpoPSCEtvjBiW2xw1KbI8blNgeNyixPV5QrtgeNyixPW5QYnvcoMT2uEFpoPSCEtvjBiW2xw1KbI8blNgeNyixPU5QrhO2xw1KbI8blNgeNyixPW5QGii9oMT2uEGJ7XGDEtvjBiW2xw1KbI8XlAnb4wYltscNSmyPG5TYHjcoDZReUGJ73KDE9rhBie1xgxLb4wYltscLyoztOQ1Ky7dXyiZb7PXBs91GMc/LE5LNd9U+Ximb59R+OfoaEjwSIemGBENFSLohwX0Rkm5IjJAQkl5I8HWEpBsSTCAh6YYEx0hIuiHBXhKSbkjwooSkF5KCcSUkS223IbdUO0ev9X70Wv+q15dI4WeJ1OBIYXOJ1PciVdYblNW6R6c61VulL/89zxsRxBUTwQ9H0IggERz7xYq3JlKDI4XlJlIf/qLEoRPBD0cQQ08EB3+x4vOJ1NhIGfafSH0vUrncSrf+ivsWKew/kRp8lcL+E6nBkcLmE6nPdohmRJAIfjaC2H8iOPiLFftPpAZHCptPpD78RYnNJ4IfjiD2nwiO/WKt2H8iNThS2H8iNfaGUsX+E6nBVynsP5EaHCkjUkTqox1ixeYTwQ9HEPtPBAd/sWL/idTgSGHzidSHvyix+UTwsxGcsf9EcOwX64z9J1KDI4X9J1JjbyjN2H8iNfgqZUSKSI2NFDafSH24Q8TmE8EPRxD7TwQHf7Fi/4nU4Ehh84nUZ78oF2w+EfxwBLH/RHDsF+uC/SdSgyOF/SdSY28oLUakiNTYqxT2n0gNjhQ2n0h9uEPE5hPBD0cQ+08EB3+xYv+J1NhINWw+kfrsF2XD5hPBD0cQ+08EB3+xYv+J1OBIGZEiUkNvKDXsP5EafJXC/hOpwZHC5hOpD3eI2Hwi+OEIYv+J4Ngv1hX7T6QGRwqbT6Q++0W5YvOJ4IcjiP0ngoO/WI1IEamxkcL+E6mxN5RW7D+RGnyVwv4TqcGRwuYTqQ93iNh8IvjJCNZpwv4TwZFfrJdIYf+J1OBIYfOJ1Ie/KLH5RPDDETQiSATHfrFi/4nU4Ehh/4nUyBtKl0hh/4nU4KsU9p9IDY4UNp9IfbZDTNh8IvjhCGL/ieDYL9aE/SdSgyOFzSdSH/6iNCJIBD8bQew/ERz8xYr9J1KDI4X9J1Jjbygl7D+RGhwp7D+RWu9/OK9L6UVqXe7DmKbS++Mplem+nk8lta8ZzOh/MvjpDOL/yeCnM8gNAzL46Qxyh4EMfjqDRgbJ4IczyD0GMvjpDHJTInwGbZpvo7CUy0ZIuM1ASLoh4cYBIemGhFsBhKQXkoKrJyTdkCDTCUk3JNhuQtINCTqakHRDYoSEkPRCgtAlJN2QYFwJSTckGFdCksoNoOUpdY5OS5vX+6DXMvWOT1O7H3/5fxvP7RaMLiH8eAgxxoTw0yE0jDQhfGcIc90IIcabEB4cwu7zQoZRJ4QfDyHGnhB+PIRGCAnhp0PIHQdC+PEQckeDEH4zhOt622EitWnu/e4hZSvLPR+2TBsh5I4JITw4hHUuT/nYCiF3TAjhx0PIHRNC+OkQVu6YEMKPh5A7JoTw4yHkjgkh/HgIuWNCCD8eQiOEhPDTIeSOCSH8Xghbfuy608pkG6HiDgihGh4q7mgQqm+GysojVFY33mtTuUNBqHLK91BZ7oZqSfUeqqWmjVBxx4FQjQ7VzB0EQjU8VNwRIFTDQ4XhJ1TDQ4WxJ1TDQ2WEilCNDhVGnVANDxVGnVANDxVGnVANDxVGnVB9M1TNHrdp2lI7x18C9MhSeowlbVWv5fvfbheezwdf44qrJ67nievCXQDieqK4cn+BuJ4orty5IK4niiv3RIjrieJqxJW4nieu3MchrieKK3eIiOuJ4sq9J+J6orhyV4u4niiu3NUirueJa+OuFnE9UVy5q0VcTxRX7moR1xPFlbtaxPVEcTXiSlzPE1fuahHXE8WVu1rE9URx5a4WcT1RXLmrRVxPFFfuahHX88R15a4WcT1RXLmrRVxPFFfuahHXE8WVu1rE9URxNeJKXM8TV+5qEdcTxZW7WsT1RHHlrhZxPVFcuatFXE8UV+5qEdfTxDVN3NUirieKK3e1iOuJ4spdLeJ6orhyV4u4niiuRlyJ63niyl0t4nqiuHJXi7ieKK7c1SKuJ4ord7WI64niyl0t4nqeuCbuahHXE8WVu1rE9URx5a4WcT1RXLmrRVxPFFcjrsT1PHHlrhZxPVFcuavVj+t6Z5/XNj/H9VpDbrV0a1jzdPvLNdvytYb4/24N52m5neA8rfa1hkjp3TXMmNL9NUTf7a8hTml/DREd+2to1HB3DWkJ99eQPmV/DelT9teQPmV/DelTdtew0KfsryF9yv4a0qfsryF9yv4aGjXcXUP6lP01pE/ZX0P6lP01pE/ZX0P6lN01NPqU/TWkT9lfQ/qU/TWkT+nWsC3L7S+3Zf36rIgZNdxdQ/qU/TWkT9lfQ/qU/TWkT9lfQ/qU3TWs9Cn7a0ifsr+G9Cn7a0ifsr+GRg1315A+ZX8N6VP215A+ZX8N6VP215A+ZXcNZ/qU/TWkT9lfQ/qU/TWkT9lfQ6OGu2tIn7K/hvQp+2tIn7K/hvQp+2tIn7K7hgt9yv4a0qfsryF9yv4a0qfsr6FRw901pE/ZX0P6lP01pE/ZX0P6lP01pE/ZXcNGn7K/hvQp+2tIn7K/hvQp+2to1HB3DelT9teQPmV/DelT9teQPmV/DelTdtdwpU/ZX0P6lP01pE/ZX0P6lP01NGq4u4b0KftrSJ+yv4b0KftrSJ+yv4b0KXtrmCf6lP01pE/ZX0P6lP01pE/ZX0OjhrtrSJ+yv4b0KftrSJ+yv4b0KftrSJ+yu4aJPmV/DelT9teQPmV/DelT9tfQqOHuGtKn7K8hfcr+GtKn7K8hfcr+GtKn7K4h76MfUEP6lP01pE/ZX0P6lP01NGq4u4b0KftrSJ+yv4b0KftrSJ+yv4b0KbtryPvoB9SQPmV/DelT9teQPmV/DY0a7q4hfcr+GtKn7K8hfcr+GtKn7K8hfcruGvI++gE1pE/ZX0P6lP01pE/ZX0OjhrtrSJ+yv4b0KftrSJ+yv4b0KftrSJ+yu4a8j35ADelT9teQPmV/DelT9tfQqOHuGtKn7K8hfcr+GtKn7K8hfcr+GtKn7K4h76MfUEP6lP01pE/ZX0P6lP01NGq4u4b0KftrSJ+yv4b0KftrSJ+yv4b0KbtryPvoB9SQPmV/DelT9teQPmV/DY0a7q4hfcr+GtKn7K8hfcr+GtKn7K8hfcruGvI++gE1pE/ZX0P6lP01pE/ZX0OjhrtrSJ+yv4b0KftrSJ+yv4b0KftrSJ+yu4a8j35ADelT9teQPmV/DelT9tfQqOHuGtKn7K8hfcr+GtKn7K8hfcr+GtKn7K1h4X30A2pIn7K/hvQp+2tIn7K/hkYNd9eQPmV/DelT9teQPmV/DelT9teQPmV3DXkf/YAa0qfsryF9yv4a0qfsr6FRw901pE/ZX0P6lP01pE/ZX0P6lP01pE/ZXUPeRz+ghvQp+2tIn7K/hvQp+2to1HB3DelT9teQPmV/DelT9teQPmV/DelTdteQ99EPqCF9yv4a0qfsryF9yv4aGjXcXUP6lP01pE/ZX0P6lP01pE/ZX0P6lN015H30A2pIn7K/hvQp+2tIn7K/hkYNd9eQPmV/DelT9teQPmV/DelT9teQPmV3DXkf/YAa0qfsryF9yv4a0qfsr6FRw901pE/ZX0P6lP01pE/ZX0P6lP01pE/ZXUPeRz+ghvQp+2tIn7K/hvQp+2to1HB3DelT9teQPmV/DelT9teQPmV/DelTdteQ99EPqCF9yv4a0qfsryF9yv4aGjXcXUP6lP01pE/ZX0P6lP01pE/ZX0P6lN015H30A2pIn7K/hvQp+2tIn7K/hkYNd9eQPmV/DelT9teQPmV/DelT9teQPmV3DXkf/YAa0qfsryF9yv4a0qfsr6FRw901pE/ZX0P6lP01pE/ZX0P6lP01pE/ZW0PjffQDakifsr+G9Cn7a0ifsr+GRg1315A+ZX8N6VP215A+ZX8N6VP215A+ZXcNeR/9gBrSp+yvIX3K/hrSp+yvoVHD3TWkT9lfQ/qU/TWkT9lfQ/qU/TWkT9ldQ95HP6CG9Cn7a0ifsr+G9Cn7a2jUcHcN6VP215A+ZX8N6VP215A+ZX8N6VN215D30Q+oYdQ+ZW63GuZknYPnejvBMj/V8HLwtYZR+5Tv1HCZ7HbwMi+90N4PvuT3MYxU68+KK3c1darTveJLp4iprPlWxct/2+PwuW4BSpdJfCOUWv7l8GtpjNJslObyP/7P//4v//qv//Lf/o9//ff/67/8x7/8+7/9j7/+8fTX/7f94pnc2nKL7FTz06mlH6Wuf/KP5j/5R8uf/KP2J/9o/YN/tP16gN4/Sn/yj/Kf/KPyJ//oTxIx/0ki5j9JxPwniZj/JBHznyRi+ZNELH+SiOVPErH8SSKWP0nE8ieJWP4kEcufJGL5k0Qsf5KI9ieJaH+SiPYniWh/koj2J4lof5KI9ieJaH+SiPYniWh/koj1TxKx/kki1j9JxPoniVj/JBHrnyRi/ZNErH+SiPVPErH+SSLSNP3Rv0p/9K/yH/2r8kf/yv7oX9U/+lfzH/2r5Y/+Vfujf/VH2Uh/lI30R9lIf5SN9EfZSH+UjfRH2Uh/lI30R9lIf5SN9EfZ2H5eodR8/1d1bvd/tUxbveZy6zTzVO6H5mWr0WwPOVHWzrFru7Wk6/rrsT8Gns468HzWgZezDtzOOvB61oHPZx34ctaBt7MOfD3pwMtZvznLWb85i/A353w79tKJ5a8jF/7q7Ixc+LuzM3LhL8/OyIW/PTsjF/767Iz8b74/l9sN4MtN2Kk38vvdvLTMj1toS9m6tTzdSmL5cVc81XIdzfaX4nL/R6XZ+no0Zc73Jx2W8vTwwo8b78mmwz8hHf4J+fBPKId/gh3+CfXwT5gP/4Tl8E9oh3/C4XO6Hj6n6+Fzuh4+p+vhc7oePqfr4XO6Hj6n6+Fzuh4+p+vhc3o+fE7Ph8/p+fA5PR8+p+fD5/R8+JyeD5/T8+Fzej58Ts+Hz+nl8Dm9HD6nl8Pn9HL4nF4On9PL4XN6OXxOL4fP6eXwOb0cPqfb4XO6HT6n2+Fzuh0+p9vhc7odPqfb4XO6HT6n2+Fzuh0+p9fD5/R6+JxeD5/T6+Fzej18Tq8D5nSb7j90aiV9+YT58E9YDv+EdvgnrAd/Qp6mwz8hHf4J+fBPKGM/wfKXTxgwpxcr94Pr9PwJB96FzlM97cjn0458Oe3I22lHvp515Gk67cjTaUeeTzvyctqRn/Y7NJ32OzSd9js0nfY7NCl/h758rCgn5S/R10PPyt+inaErf412hq78PdoZuvIXaWfoA75J27zeD16mf+53cz38E+ajP6Eefg4jnjpp9++SsqYvZmPEUyedT2iHf8J69CeMeOqk8wnp8E/Ih39COfwTRlyXWn58QvnyCe3wTxiQ1rXd7L1NTzswbX4t5Mt4fh6cy9OOY3X5MZwRD1+MHE7SGk7WGk7RGo5pDadqDWfWGs7y9uFMj+G0L8NpWsNZpYbT3n1VrtOt0cg11efhfD3YpvsXnE1fg9aS9Njn9Grs777e21zvY8/l9dgfdxCfB5EsXYdezjt0O+/Q63mHPp936Mt5h77/e68u90+oy9JeDz3Zclc99akbSW3eOHqebkuI+flnmO2qhQY8YvaxsQ94eO1zY08nHns+8djLicduJx57PfHY5xOPfTnx2E/8vbqe93u1TOf9Xi3Teb9Xy2TKS+B6O7Yt8y9L4I0/nMptyPn5FSS2VZOLXLid3vTLoT9KIt2LfaYk0j3eR0qS3KRkWu8vWEnT/Lokrd0c2Zpy5w+ntaXbX778d356PmCdrjV0E6sP1lDaYZykho0a7q7hSg331jBP1HB3DRM13F1D6dtXJ6mh9H20k9TQqOHuGtKn7K8hfcr+GtKn7K8hfcr+GtKn7K5hoU/ZX0P6lP01pE/ZX0P6lP01NGq4u4b0KftrSJ+yv4b0KftrSJ+yv4b0KbtraPQp+2tIn7K/hvQp+2tIn7K/hkYNd9eQPmV/DelT9teQPmV/DelT9teQPmV3DSt9yv4a0qfsryF9yv4a0qfsr6FRw901pE/ZX0P6lP01pE/ZX0P6lP01pE/ZXcOZPmV/DelT9teQPmV/DelT9tfQqOHuGtKn7K8hfcr+GtKn7K8hfcr+GtKn7K7hQp+yv4b0KftrSJ+yv4b0KftraNRwdw3pU/bXkD5lfw3pU/bXkD5lfw3pU3bXsPnpU5b1UcPldQ1fbqvZ/LQdw0rip4sYVZL1kykp0+uSLPPtGrEs85eR59OOvJx25HbkyH98Qj38E+bDP2H/wtKmUu+fsHb4lpLuM7yUx9Ug1XIdTxMbzyo1HhuwY/7Y8SSx8WSx8RSx8ZjYeKrYeGax8Whdn2069Pr84xPWoz8hTYd/woCrYrJbG2klTa+pten2apBWHn83L3Xj2PX+kux1/fXYHyPPpx15Oe3I7bQjr6cd+XzakS+nHXk77cjXs458wMsFPjXy036H5tN+h+bTfocO2DT+UyMfcT2/v+3tsoD7shrN7fBPWI/+hDId/gnp8E/Ih39COfwT7PBPqId/wnz4Jxw+p8vhc7ocPqft8Dlth89pO3xO2+Fz2g6f03b4nLbD57QdPqft8Dlth8/pevicrofP6Xr4nK6Hz+l6+Jyuh8/pevicrofP6Xr4nK6Hz+n58Dk9Hz6n58Pn9Hz4nJ4Pn9Pz4XN6PnxOz4fP6fnwOT0fPqeXw+f0cvicXg6f08vhc3o5fE4vh8/p5fA5vRw+p5fD5/Ry+Jxuh8/pdvicbofP6Xb4nG6Hz+l2+Jxuh8/pdvicbofP6Xb4nF4Pn9Pr4XN6PXxOr4fP6fXwOb0ePqfXw+f0evicXg+f0+vRc7pO0+GfkA7/hHz4J5TDP8EO/4R6+CfMh3/CcvgntMM/4fA5nQ6f0+nwOZ0On9Pp8DmdDp/T6fA5nQ6f0+nwOZ0On9Pp8DmdD5/T+fA5nQ+f0/nwOZ0Pn9P58DmdD5/Thz9HVg9/jqwe/hxZPfw5snr4c2T18OfI6uHPkdXDnyOrhz9HVg9/jqwe/hxZLcrP5M+3Y9M05V8O/jF05YfyXw/dlJ/K7wxd+bH8ztCVn8vvDF35wfzO0O3Iof/4hAFX+pLt/glPP3u9fcJ8+Ccsh39CO/wT1qM/YcSzf51PyId/Qjn8E+zwTzh8xtXDZ1w9fMbVw2dcPXzGjXj2r/MJh8/p+fA5PR8+p+fD5/R8+JyeD5/T8+Fzej58Ts+Hz+nl8Dm9HD6nl8Pn9HL4nF4On9PL4XN6OXxOL4fP6eXwOb0cPqfb4XO6HT6n2+Fzuh0+p9vhc7odPqfb4XO6HT6n2+Fzuh0+p9fD5/R6+JxeD5/T6+Fzej18Tq+Hz+n18Dm9Hj6n18Pn9Hr0nJ6n6fBPSId/Qj78E8rhn2CHf0I9/BPmwz9hOfwT2uGfcPicTofP6XT4nE6Hz+l0+JxOh8/pdPicTofP6XT4nE6Hz+l0+JzOh8/pfPiczofP6Xz4nM6Hz+l8+JzOh8/pfPiczofP6Xz4nC6Hz+ly+Jwuh8/pcvicLofP6XL4nC6Hz+ly+Jwuh8/pcvictsPntB0+p+3wOW2Hz2k7fE4f/pTXfPhTXvPhT3nNhz/lNR/+lNdcD5/Thz9HNh/+HNl8+HNk84jnyOb7m+KspfX5E3Y+dPpqT+V5xPNpHxr5fNqRL8Ijf/mI8jziQb1PDX097dBHPFr4qaGn8w49n3foA77xmpX70Gtn6K9eLzmPeCBz3GCq0mDmIwfz4xOWwz+hHf4J+y/cNc23d7XV1KbXyEpeb78DLCXZ/eArswGPhI4cTZIaTX7zaMq83kfTlqfRbIQs3UduOS3/PPJy2pHb0JHn3P55/g14NLb3CfPhn7D/OliX6baor8vSXvNNtty/oGt6vCM8tS3C8/2Hx5c7IE/HXr/MBzx0+7mxr+cd+4CHbI8cu90Ovjiar2Ov0mOfbz9SvSwfvo59fvPYa6r3sRf7Zew/xrOIjaeJjWfVGs+Ah4G/mX1Lj/HUTvbTmtt9qqx5/efv8wEPGn9y9PnUoy+nHr2devSHfmP9+IT58E9YDv+EAdf+i4i6fcJal9eMbV3uPc3zlXbr2LxMt6/1vOT8z3zXk458GfAg+qdGnk478nzakZfTjtxOO/J62pHPpx35ctqRn/U7dJlO+x2aTvsdmk77HZpkvkN/jEbme/HHaGS+636MRub768doZL6TfoxG5nvmx2hkvjt+jEbm++Cv0WSZa/yP0bz5ul3z/f6Tta+jyVKjKVKjManRVKnRzFKjWaRG06RGsyqNprz5Wlzr/Vrcvl6LS5IaTZYaTZEajUmNpkqNZpYazSI1miY1mlVpNCZ1LbZDr8U/PiEf/gnl8E8YcB1c19tjCnOpnecB07JMPw9Oy9PzgEv6tvYZ8Ou/jw19Pu/Ql/MOvZ136Otphz7gp5sfG3o679DzeYdezjv0836b1vN+m9bzfpvW836b1vN+m9bzfpvO5/02nc/7bTqf99t0Pu+36YDf044a+o/h6HxD/hiOzrfej+HofJP9GI7Ot9OP4eh84/w1nEXnW+THcHS+GX4MR+dq/2M4OlfwH8PRuiovWlflReuqvGhdlRetq/KidVVuWlflpnVVblpX5aZ1VW5aV+WmdVVuWlflpnVVblpX5aZ1VV61rsqr1lV51boqr1pX5VXrqrxqXZVXravyqnVVXrWuyqvUVblNUlflNkldldskdVVuk9RVuU1SV+U2SV2V2yR1VW6T1FW5TVJX5TZpXZWT1lU5aV2Vk9ZVOWldlZPWVTlpXZWT1lU5aV2Vk9ZVOWldlbPWVTlrXZWz1lU5a12Vs9ZVOWtdlbPWVTlrXZWz1lU5a12Vi9ZVuWhdlYvWVbloXZWL1lW5aF2Vi9ZVuWhdlYvWVbloXZVN66psWldl07oqm9ZVWei3tD+Go3VVFvrN64/haF2VhX6b+mM4Wldlod+Q/hiO1lVZ6LeeP4ajdVUW+k3mj+FoXZWFfjv5YzhaV2Wh3zj+GI7WVVnot4g/hqN1VRb6zeCP4WhdlbV+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7b17R+29e0ftvXtH7bt2r9tm/V+m3fqvXbvlXrt33rJHVVXrV+27dq/bZv1fpt36r1275V67d9q9Zv+1at3/atWr/tW7V+27dq/bZv1fpt36r1275V67d9q9Zv+1at3/atWr/tW7V+27dq/bZv1fpt36r1275V67d9q9Zv+1at3/atWr/tW7V+27dq/bZv1fpt36r1275V67d9q9Zv+1at3/atWr/tW7V+27dq/bZv1fpt36r1275V67d9q9Zv+1at3/atWr/tW7V+27dq/bZv1fpt36r1275V67d969t/27feX4ib1tq+DOftV+XVfh6cp2l9Hs7Xg9t0O7aVx6F5qRvHrm3+eey6/nrsj9PMMU6zxDhNi3GaNcZpzjFOc4lxmi3Gaa4hTvP9v3n9zGnGWAXNMVZBc4xV0Pt/U/yZ04yxCppjrILmGKugOcYqaHazCppvx6Zpyl/Oc3GzDOqcp5t1UOc83SyEOufpZiXUOU8Lcp46a6Efw9FZs/wYjs7a4sdwdNYAP4aj813913Cazlfqj+HofPP9GI7OF9SP4eh8j/wYjs7l/sdwtK7KTeuq/O4dAnJa28+DrU3z6+9mK/djZ7sfmppt/eHHndSScnr9h+cp385vnubHN3lKP6vSQlallnIbcq3r16qsVOVrVd69bcNJqpKoykZVMlXZqEqhKhtVMaqyUZVKVTaqMlOVjarEXNv2qsLadqsqrG2/VuViOVncbpaF1e1mWVjebpaF9e1mWYyybJWFFe5mWVjibpaFNe5mWVjkbpaFVe5WWRKr3M2ysMrdLAur3M2ysMrdLItRlq2ysMrdLAur3M2ysMrdLAur3M2ysMrdKktmlbtZFla5m2VhlbtZFla5m2UxyrJVFla5m2VhlbtZFla5m2VhlbtZFla5W2UprHI3y8Iqd7MsrHI3y8Iqd7MsRlm2ysIqd7MsrHI3y8Iqd7MsrHI3y8Iqd6ssxip3syyscjfLwip3syyscjfLYpRlqyyscjfLwip3syyscjfLwip3syyscrfKUlnlbpaFVe5mWVjlbpaFVe5mWYyybJWFVe5mWVjlbpaFVe5mWVjlbpaFVe5WWWZWuZtlYZW7WRZWuZtlYZW7WRajLFtlYZW7WRZWuZtlYZW7WRZWuZtlYZW7VZaFVe5mWVjlbpaFVe5mWVjlbpbFKMtWWVjlbpaFVe5mWVjlbpaFVe5mWVjlbpWlscrdLAur3M2ysMrdLAur3M2yGGXZKgur3M2ysMrdLAur3M2ysMrdLAur3K2y8Mqz7bKwyt0sC6vczbKwyt0si1GWrbKwyt0sC6vczbKwyt0sC6vczbKwyt0oS+LdZ9tlYZW7WRZWuZtlYZW7WRajLFtlYZW7WRZWuZtlYZW7WRZWuZtlYZW7VRbefbZdFla5m2VhlbtZFla5m2UxyrJVFla5m2VhlbtZFla5m2VhlbtZFla5W2Xh3WfbZWGVu1kWVrmbZWGVu1kWoyxbZWGVu1kWVrmbZWGVu1kWVrmbZWGVu1UW3n22XRZWuZtlYZW7WRZWuZtlMcqyVRZWuZtlYZW7WRZWuZtlYZW7WRZWuVtl4d1n22VhlbtZFla5m2VhlbtZFqMsW2VhlbtZFla5m2VhlbtZFla5m2VhlbtVFt59tl0WVrmbZWGVu1kWVrmbZTHKslUWVrmbZWGVu1kWVrmbZWGVu1kWVrlbZeHdZ9tlYZW7WRZWuZtlYZW7WRajLFtlYZW7WRZWuZtlYZW7WRZWuZtlYZW7VRbefbZdFla5m2VhlbtZFla5m2UxyrJVFla5m2VhlbtZFla5m2VhlbtZFla5W2Xh3WfbZWGVu1kWVrmbZWGVu1kWoyxbZWGVu1kWVrmbZWGVu1kWVrmbZYm5yl3mfBtyS8svZdk6Ot0Pnp+GUa8lDPqetKEljLl6HlrCmCvtoSWMuSofWkKjhHtLGHO1P7SEMTuDoSUM2UXUtdmjhK1TQlvW+T7m8jg6r1vlSDbd/nay/ChHKT+X4jHfW/fZkofsfj5Z8hz0fXtTvp3fPM35Sx+eY75v7ymJS7PaSWLO5XaCuTz96Vo3Dr58A97G0S7fZo/YLvPPiodsmD5a8ZD91UcrblT8zRUP2b19tOIhm72PVjx6b/j+ikdvDcdXfL4d3PK0/lLxjTNs90Jbe25qrP3kE72PFOcT8/WXJ+JD96vNh15Zmw+dtTYfg480H7p2bT70+Np8AhiB64kGaMSvJxqgo/1xohHeGXs90QA91vVEAzQr1xMNsOq/nqhFOdEA69DriQZY0F1PNMrKKMI7TK8nGmVlFOE9o9cTjbIyivAu0OuJRlkZRXhf5/VEo6yMIrxT83qiUVZGEd57eT3RKCujCO+mvJ5olJVRhPdHXk80ysoowjserycaZWUU4T2M1xONsjKK8K7E64lGWRlFeJ/h9USjrIwivHPweqJRVkYR3gt4PdEoK6MI7+67nmiUlVGE9+tdTzTKyijCO/CuJxplZRThPXXXE42yMorwLrnriUZZGUV439v1RKOsjCK8k+16olFWRhHem3Y90SgrowjvNrueaJSVUYT3j11PNMrKKMI7wq4nGmVlFOE9XtcTjbIyivCureuJRlkZRXgf1vVEo6yMIryz6nqiUVZGEd4rdT3RKCujCO9+up5olJVRhHcuXU80ysoowvuLricaZWUU4V1A1xONsjKK8F6d64lGWRlFeOfM9USDrIxKhPerXE80yMqoRHhRyfVEg6yMymRRTjTIyqhEeAnF9USDrIxKhFcuXE80ysoowksAricaZWUUYVv664lGWRlF2Cj9eqJRVkYRtu6+nmiUlVGUPbBLlD2wS5Q9sEuUPbBLlD2wS5Q9sEuUPbBLlD2wS5Q9sEuUPbBLlD2wS5Q9sEuUPbBLlD2wS5Q9sEuUPbBLlD2wS5Q9sEuUPbBLlD2wS4Q9sL8ePC9zvg25pcd73bdf4Dc/Dp7b0zDqzxKGfMf40BJG2Lf76BKGfFP32BKGfJn22BKGfN/12BIaJdxbwpBvjR5bwpAvdh5bwgA9xNElpDvZXcKQ3cnTG9rntq6dEpa23P/0Wh4n+ONjvhydSptvhycrT0XP63QteoTd9vWKHrID+nTRQ/ZM44p+LWLIrml0EY0i7i9iyM5pdBFD9k6jixiyexpdxJD90+gihuyglsshPw9ellI7RUzLdDvBtMxPJS/LVjmm8vPgalPn2OEr1gjv+4iEM2TX5xdnyH7yDDiveEJ2qufBY+BRxhO9u16a9fDUtN4rni33vlEs32Ha8jjDNG0CSm26D3t9HJ1r2zp6Kul+dH3chinTVq1bmm8jaXl6UMx/jeprsZd7rmxJj7O83PH6GZXoDoGo/HZUopsSovLbUYnug4jKb0cl+nMDROV3oxLhPXFEZUxUoj+jQVR+OyrRnywhKr8dlejPzxCV346KERWi8ntRwdYSld+MCraWqPxmVLC1ROU3o4KtJSq/GRVs7WejYo9hW8udqNh8P9rmp1Kn+UozwuulA9HEeXqiiZb0RBNz6ImmQdMRTfybJ5ooMk80sVieaCKaPNHEBTmiueKC+jTncqfZ6tqh2dL9ZzotrQ9R+5d6vZYcYfP2kmNV3l5y6fYq3Y/Nyy8lv45dZ8FyHY/OV+5f47FJ50vjOh6dK+p1PDqXm+t4dDTkdTwmNh6da9V1PDoy4zoenXb8Oh6t67MJvUr9x3iE3nh+HY/Y9Vno/eHX8Yhdn4Xexn0dj9j1Wejd1tfxiF2fhd4UfR2P2PVZ6L3L1/GIXZ+F3mJ8HY/Y9VnoncDX8Yhdn4XesHsdj9j1Weh9tdfxiF2fhd7+eh2P2PVZ6F2q1/GIXZ+F3kx6HY/Y9VnoPZ/X8Yhdn4Xemnkdj9j1Weh9jtfxiF2fhd40eB2P2PVZ6B141/GIXZ+F3s52HY/Y9VnovWHX8Yhdn4XeT3Udj9j1WeitRtfxiF2fhd61cx2P2PVZ6A0w1/GIXZ+F3ktyHY/Y9VnoHRXX8Yhdn4XeEnAdj9j1WWgf+Ot4xK7PQrtrX8fz5uuztXbfT2BN9nU87d3jSY/x5Pw8nq8Ht+n20GQrzxsn1I1j1zb/PHZdfz32ep5rjPN89w6tHzvPFOQ8c5DzLEHO04KcZw1ynnOQ81yCnGeQ9dASZD3UgqyHWpD1UHOzHppvx6Zpyhsn6mZB1DtRi3KibpZEvRN1sybqnaibRVHvRA9dFV0/Yj38I479gf31I9LxH5GP/4hy/EfY8R9Rj/+I+fiPWI7/iONn93r47K7TdPxHpOM/Ih//EeX4j7DjP6Ie/xHz8R+xHP8R7fiPOH52p+Nndzp+dqfjZ3c6fnan42d3On52p+Nndzp+dqfjZ3c6fnbn42d3Pn525+Nndz5+dufjZ3c+fnbn42d3Pn525+Nndz5+dpfjZ3c5fnaX42d3OX52l+Nndzl+dpfjZ3c5fnaX42d3OX522/Gz246f3Xb87LbjZ7cdP7vt+Nltx89uO3522/Gz246f3fX42V2Pn931+Nldj5/d9fjZXY+f3fX42V2Pn931+Nldj5/d8/Gzez5+ds/Hz+75+Nk9Hz+75+Nn93z87J6Pn93z8bN7Pn52L8fP7uX42b0cP7uX42f3cvzsXo6f3cvxs3s5fnYvx8/u5fjZ3Y6f3e342d2On93t+Nndjp/d7fjZ3Y6f3e342X38s2r1+GfV6vHPqtXjn1Wrxz+rVo9/Vq0e/6xaPf5ZtTrgWbW53F9lPl9aoueP2Pn86cuH/uuAZ+A+NvR23qGvZx36POBZwI8NPZ136Pm8Qy/nHbqdd+j1vEM/7bfpPJ3223SeTvttOk/n/TZN5/02Tef9Nk3K36avfy82J+Wv097Ylb9Pe2NX/kLtjV35G7U3duWv1N7YD/1OvX7EevhH5On4j0jHf0Q+/iPK8R9hx39EPf4j5uM/Yjn+I46f3fn42V2On93l+Nldjp/d5fjZXY6f3eX42T3g2ev5ciP558FLLcvrb+zXr7meBzzh/GI414/Yn75lTbeDl/XpLeabZ5yX+8F5yY+D6/JzPEVsPCY2nio2nllsPIvYeJrYeFat8Qx4kvyb4zG7j2eev44niY0ni43nzdfncukTb385LevX8ZjYeKrYeGax8SzvHk/Nr8Yzv/n6U8p826yrlCV/HU8SG08WG08RG8+7rz+lTvfxzL+MZ6O9mNot/DatXy/mc5Ue/P1Ksj34d1/Zynq/stlUdlZ+kR58p/JvXtMWy+0++Kdn2O7jWbXGs0xi40li48mfHI99HU8RG4+JjaeKjefdV/68rPfxzOvri2ea2+07Li32+I5Lln6O/t1Xz6XcVzCL1X3fW8sqPfjX31vt3dfleX0M/tdeeiM30/3glMr0NTft3VfxZZnvf/nXq/hW6Ze7yP418xtnWu4vw7ockO5Hl/LTSbcc5kxLmDO1MGdaw5zpHOZMlzBn2k55ptexr+cd+zqdeOzSK5NyW47b0jbGLr3W6Ix9/3fqyKcVBvxacehwZq3hLFrD0XrSZcSvCscNZxnxS8GRw0law8lawylvHo7dr8r11+FsDf3x4uecHkfPP4du5x16Pe/Q5/MOfTnv0Nt5h76eduhpOu/Q03mHns879PN+m474jd6nhn7eb9N03m/TdN5v03Teb9N03m/TfN5v03zeb9N83m/TfN5v0xG/1/zU0M/7bZrP+22a3/1tWu6jma0z9N5TOUtuZx78euLBl+nMg09nHnw+8+DLmQdvZx58PfPgZ93Bz49NWRZ7egRw8w+nVm43kvOUn54XrOXnmQp/HQ8+U+Hv7hdneh278Fd3b+wm8819Hc6hez5/PTg/LYfb9Hi8d0nfv4d57CvaDh57PfHY5xOPfTnx2NuJx76ed+zHvrhv79jHuYhj3x4odJ45yHlKf7cPPE8Lcp7Sa4aB5ym9vhh4ntJrkW/0PJ19UZcqvXAZeaLSq5yBJzpLL4lGnqj0mmjkiUovikaeqPSqaOSJWpQTlV4XjTxR6YXRyBONsjKao6yM5igroyXKymiJsjJaoqyMligro2PfIK50olFWRkuUldESZWW0RFkZLVFWRi3KyqhFWRm1KCujFmVlNGDHsZOcaJSVUYuyMmpRVkYtysqoRVkZrV5WRrnOt4Pz/HTDe/MPp7XeHlG+jCc9leXn/fHVyzpqcFm8rLoGl8XLGm1wWYyybJXFy/pvcFm8rBYHl8XL2nJwWbysRAeXxcu6dWhZ2hRzldvuryjIU/m1LF+Pbun+1oyW1mWjiDHXxIOLGHMFPbiIMdfbg4toFHF/EWOu5QcXMebKf3ARY/YJ3yzifDvBlqd1o4gxu4rBRYzZg4wtYqJjGVBEOpYBRaRjGVBEOpYBRTSKuL+IdCwDikjHMqCIdCwDikjH0i9iTo8i1tw5+q93wv08+nI7pXSOLvc7D/a01V227dLdnsXJOeXng68o6Zu8oMx0b25Q0kO6QUkn6wYl/bQblAZKLyhxC25QYjjcoMSzuEGJ7XGDEtvjBWXB9rhBie1xgxLb4wYltscNSgOlF5TYHjcosT1uUGJ73KDE9rhBie3xgtKwPW5QYnvcoMT2uEGJ7XGD0kDpBSW2xw1K+srToMzlgdLqF5Ta700G5fMZLum2g0deSvmKkhWsG5SsYN2gNFB6QckK1g1K7le6Qcn9Sjco6SvdoOR+pReUM/cr3aD0YntKtltRSun94VzybcjZrL9jTmej1NmLZ/loEb0Yjo8W0Sji/iJ66eo/WkQv/fRHi+ilk/1oEd30kOt9LVdSTq//8HI55LaiXMrjNl9Km2vbZbqdYFrmRzVSWbZKfj+4LaVz7GiYbrpIYLbFTR8JzLa46SSL3fr8Yk8vuN3+rnrspppzWXYX0U0n+ckiuukkP1lEo4j7i+imk/xkEd10kp8soptO8pNFpJPsr1fnbPf16jJ31qBlmtJtIFPrHT16xUov6Qlno5t0hdPNc+gyONNyG3XJeenhHPvd2dw8iw7Ov3C6eR4dnBeca8jZOddy6yXmWtdfcF7LEjLl/bIYZdkqi5tfA4wti5sn68eWxc1T6mPLEtKx9MsS0lX0yrJOIXv+fllC9s79srDK3SwLq9zNshhl2SoLq9zNsrDK3SwLq9zNsrDK3SwLq9ytsiRWuZtlYZW7WRZWuZtlYZW7WRajLFtlYZW7WRZWuZtlYZW7WZaQq9y6tttt3/nibX8py9ejS7vfmi1reZzgj4/5cnQqbb4dnqzM7X58XqefRQ+5hv5w0XPIFfqnix5y/T+u6NcihuwWRhcxZG8xuohGEftFzPeHxFZ7ekjsXsSQfcvoIobsckYXMWRPNLqIdFADikhHtL+Ift5I/8ki0rEMKCIdy4Ai0rEMKKJRxP1FpGPpF3G9/9rHpqftYbfVWXv8Nqjl6fG3t38bZC2Xez3K4wf1xdpPQHRD4oDotMQB0cWJA6JD1Abk5w3ZXgHR2YoDomsWB0RH/mFA90pfWE0bgAxA2oAwCeKAMAnigDAJ4oAwCeKAMAnagComQRwQJkEcECZBHBAmQRyQAUgbECZBHBAmQRwQJkEcECZhNCCRN35fJMTPY3NO+fngK3gMRUzwM+YjKHiMSlDwmJqg4DFAQcEb4GOCx1gFBY8JCwoewxYUPOYuKHjMXUzwC+YuKHjMXVDwmLug4DF3QcEb4GOCx9wFBY+5CwoecxcUPOYuKHjMXUzwDXMXFDzmLih4zF1Q8Ji7oOAN8DHBY+6CgqePdwo+lwd4q1/Ar6zqnYJf7vXISylfwbOqDwqeVX1Q8Ab4mOBZ1QcFz/34oOC5Hx8UPH18UPDcj48IPk8T9+ODgg9p7pY63/7yMj+9dOZvwJd8+8tP7vPiv68VDKnAhlYwpEsaWkGjgjsrGNJuDK1gSE0wtIIh++2hFQzZuA6tYMgOcLkccqvgUmqngmmZbieYlvmpbSjLVjmm2/sNq02dY0tb7oNey9RpMVJp8+3wZGVuj9X9Ol1xppB9nV+cMbs1tzhjto4nwHnFE7MvPQ0eA48ynpgdtQye3O54bNnAE7NdPw2emC7gNHhiiobT4MFiKOPJWAlpPFgGaTxYA2k8WANpPAYeZTxYA2k8WINP4jn0xai53Cv9dBP554tRL+gxEmHRYzvCosekREVfsDRh0WOAwqLHLoVFj7kKi95A7xX9neElBdMGeoxbWPTYvLDosXlh0WPzwqLH5kVFb9i8sOixeWHRY/PCosfmhUVvoI+KHpsXFj02Lyx6bF5Y9Ni8sOixeedBf4Y3eOWpYgmJ1OBIYR+J1OBIYTWJ1OBIYUuJ1OBIGZEiUmMjhd0lUoMjhTUmUoMjhY0mUoMjheUmUoMjhT0nUmMjNWPPidTgSGHPidTgSGHPidTgSGHPidTgSBmRIlJjI4U9J1KDI4U9J1KDI4U9J1KDI4U9J1KDI4U9J1JjI7Vgz4nU4Ehhz4nU4Ehhz4nU4Ehhz4nU4EgZkSJSYyOFPSdSgyOFPSdSgyOFlyJS34xULo9IWf0SqUbHR6S+GanlXum8lPI1UnR8RGpwpIxIEamxkaLjI1KDI0XHR6QGR4rnpYjU4EjxvBSRGhwpvBSRGhupleeliNTgSPG8FJEaHCns+ehIzbfbFXVtnWMt1/uLn3N7OsVyw0P3NBhPux/cltI5Npf7jM9lWX6ZlVc8dCLSeFjVC+NJEytkaTysNqXxsHKTxsMzBNJ4DDzKeLi3LY2H+8QfxZPveMzSL3g2/vKLt5pdYeIYHMHESDiCib/wAzNhOxzBxI04golJcQQT7+IIpgHTD0ycjiOYGCBHMDFA54F5ih/6p4SHIlKDI4UNI1JjI5VxckRqcKQwg0RqcKTwk0RqcKSwpERqcKSMSBGpsZHCGBOpwZHCWxOpwZHCnhOpwZHCnhOpwZHCnhOpsZEq2HMiNThS2HMiNThS2HMiNThS2HMiNThSRqSI1NhIYc+J1OBIYc+J1OBIYc+J1OBIYc+J1OBIYc+J1NhIGfacSA2OFPacSA2OFPacSA2OFPacSA2OlBEpIjU2UngpIvXNSL1+U32qdHxE6puRev36plTp+IjU4EjR8RGpwZGi4yNSgyNlRIpIjY0Uz0sRqcGR4nkpIjU4UngpIjU4UjwvRaQGR4rnpYjU2EjN2PPBkVpz+nnwWmvn2Dot99fap+k5gDc8mGhpPFhdaTwYUmk8Bp7By5lWbgdPTyf4N3xSevCp8wYf1J02HzyYNh+kkjYfDI02H3SHNJ8Fd6DNB3mgzQd7oM0HffBJPvnxgsWc/zriH6+cePd1jItB0xFN3IQnmpgMTzTxHp5oYkk80cSpOKLZMDCeaOJrPNHE7niiiQvyRNOgeR6a59japGGkyNToTOHFyNToTGHnyNToTOEIydToTGEqydTgTK34UjI1OlNYWzI1OlO4YzI1OlMYbDI1OlNGpsjU4Ezh0cnU6Ezh0cnU6Ezh0cnU6Ezh0cnU6Ezh0cnU2EzlCY9OpkZnCo9OpkZnCo9OpkZnCo9OpkZnysgUmRqcKTw6mRqdKTw6mRqdKTw6mRqdKTw6mRqdKTw6mRqcqYRHJ1OjM4VHJ1OjM2Vkikx9M1O5PDJl9Wum6PvI1Hcz9fptdjnR95Gp0Zmi7yNTgzOV6fvI1OhM0feRqdGZ4vkpMjU6Uzw/RaZGZ8rIFJkanCmenyJTozPF81NkanSm8FP9TM3Z7plaujFZp/udi7WWztE2TbcI2mTPef0JqBiAxgIq05RuA5laF2d5zPqy/Drrr4D4phcHxNemOCDu5YoD4saoOCBWcdqAjFt24oC4/yUOiJtJ4oC4M/NhQPkOyCz9AmhDT3Vecnb5E+D0hBNL4QonTsMVTgyIK5z4Elc4sSuecFZcjCucmBtXOPE8rnBihVzhNHCeCOc59geouClCNTxUGDJCNTxUeDpCNTxU2EJCNTxUOEtCNTpUM+aUUA0PFf6WUA0PFRaZUA0PFS6bUA0PlREqQjU6VBh1QjU8VBh1QjU8VBh1QjU8VBh1QjU8VBh1QjU6VAtGnVANDxVGnVANDxVGnVANDxVGnVAND5URKkI1OlQYdUI1PFQYdUI1PFQYdUI1PFQYdUI1PFQYdUI1OlQNo06ohocKo06ohofKCBWh+m6ocnmEyurXUNH9Eapvh6rzkqhG90eohoeK7o9QjQ7VSvdHqIaHiu6PUA0PFc9TEarhoeJ5KkI1PFRGqAjV6FDxPBWhGh4qnqciVMNDhVEfHao0tftA6tI52pb1zrLZ9HT0DRB2WhwQplca0OUiDyBtQBjI4YCWO6Cce4BqSre/XVOdNwBh88QBYcbEARmAtAFhbMQBYT/EAWESxAFhEsQBYRK0ASVMwkcB5ccLHHMuj6P/7HWPJeEdXOHEUrjCidNwhdPA6QknvsQVTuyKK5y4GFc4MTeucOJ5POHMWCFXOLFCZ8J5it1QLqdNqAjV6FBhyAjV8FAZoSJUo0OFLSRUw0OFsyRUw0OFOSVUw0OFvyVUw0OFRSZUo0NVcNmEanioMOqEanioMOqEanioMOqEaniojFARqtGhwqgTquGhwqgTquGhwqgTquGhwqgTquGhwqgTqtGhMow6oRoeKow6oRoeKow6oRoeKow6oRoeKiNUhGp0qDDqhGp4qDDqhGp4qDDqhGp4qDDqhGp0qCqeilB9O1SXi9F90Fa/hsoIFaH6bqhevwevVLo/QjU8VHR/hGp4qOj+CNXwUNH9EarhoeJ5KkI1OlQzz1MRquGhwlMRquGh4nkqQjU8VDxPRaiGhyqkp6pru8VkadYLVU1r+Xl0zfZA+eNjvkawlFvtUmmPgaRp2TxFu5fjaRw1/cQT0vicB09Id3IePCEtxGnwLCH7+fPgCdkZnwdPyB5TB0+9L8LrvIUnZLd2HjwGno/iWabbn17WDTwhn8k5Dx6swWfx3J+9naeygQdrII0Ha6CCJ6UNPFgDZTwNa/BRPPOSbrVr0wYerIE0HqzBZ/G0e+1W28CDNZDGY+D5JJ5luo16SW0DD9ZAGg/WQAVPnjfwYA2k8WANpPFgDT6L5167Nm2s3FasgTQerMFH8bT7xa1trdxWrIE0HqzBZ/GU259uz3/5jsfAo4wHa6CCp24Y6xVrII0Ha/BRPGu6HbxutaUr1kAaD9bgs3jK7W7pal+fNbAJayCNB2vwWTz3Z6zXed7AgzWQxoM1UMGz2AYeA48yHqzBR/Gkqd5+opCmedoAhDcQB4Q5GA3I8q0cyZ53P5m2dz9p033Y6+PoXNvW0dNyG3eZ2uMmRJm2al2WdBt3WZ7A/HX0FT5eIjB8rEdc+AmnEhg+xiYwfHxQYPjYpsDwDfhx4WPKAsPHwgWGj+ELDB/DFxg+hi8u/IzhCwwfwxcYPoYvMHwMX2D4Bvy48DF8geFj+ALDx/AFho/hCwwfwxcXfsHwBYaP4QsMH8MXGD6GLzB8A35c+Bi+wPAxfKeCf980paS6dOC3x0vtW54eFLdfPG/LdDtLW9LjLIu1n1HBBxKV34wK9pCo/GZUcI1E5feiYphJovKbUcFjEpXfjIoRFaJyjcod4+U/542o0AERlWux2525XQ7fiAodUMioXOHT08SFX+lSAsOn7/ALP6cH/Jo7K4RltdvRy7qWztHlviGtPa0msm0jvxU756eG5nLwNYI8xUEEPxxBniUhgh+OoBFBIvjZCPJcDRH8cAR5uocIfjiCOHMi+OEI4uKJ4IcjyB0BIvjZCM7clyCCH44gd0eI4IcjyN0RIvjhCHJ3hAh+OIJGBIngZyPI3REi+OEIcneECH44gtwdIYIfjiB3R4jghyPI3REi+NkILtwdIYIfjiB3R4jghyPI3REi+OEIcneECH44gkYEieBnI8jdESL44Qhyd4QIfjiC3B0hgh+OIHdHiOBnI9jwgkTw4Ajm8ojgU7HvETQiSASPjeByJ5OXUr5GkI6YCH44gnTERPDDEaQjJoIfjiAdMRH8cAR5XpAIfjaCK88LEsEPRxAvSAQ/HEGeFySCH44gzwsSwQ9H0IjgRyNYpnsES7ZfIngFxL0DcUCYdXFAeGdxQFhZcUA4S2lAdcLoiQPCd4kDwgaJA8KVfBZQzvdKl9Z+AbRhP9JyO8mW1uUXn3HFaeD0hBNL4QonTsMVTgyIK5z4Elc4sSuecCZczKlwzo/btNO6gRNz4wonnscVTqyQK5wGTk84sUKucGKFXOHECrnCiRVyhRMr5Alnxgq5wokVOhPOU2yWVjNuilANDxWGjFAND5URKkI1OlTYQkI1PFQ4S0I1PFSYU0I1PFT4W0I1PFRYZEI1OlQFl02ohocKo06ohocKo06ohocKo06ohofKCBWhGh0qjDqhGh4qjDqhGh4qjDqhGh4qjDqhGh4qjDqhGh0qw6gTquGhwqgTquGhwqgTquGhwqgTquGhMkJFqEaHCqNOqIaHCqNOqIaHCqNOqIaHCqNOqEaHquKpCNW3Q5XLI1RP5buHyggVofpuqF6/LLVWuj9CNTxUdH+Eanio6P4I1fBQ0f0RquGh4nkqQjU6VDPPUxGq4aHCUxGq4aHieSpCNTxUPE9FqIaHygjVR0Nl5V5pa6kTqrzcR5JbeRydtlKS1np7+Xpal6f6LT/R473DosdOh0WPQw6LHtMbFj0+Nir6BWsaFj1uMyx6DOSH0T+GbS130Nt8P9rmp1Knny8mW1B/nmgaNB3RRKN5ookZ80QT2eWJJv7KE02UlCOaDcvkiSbiyBNNXJAnmrggTzQNmmeiOaV7Reb8THPj4MvZ3A5OdfmKHnEUFj2WKSx6lFRY9PirsOiRXVHRr5ixsOjRaGHR49zCokfQhUVvoHeLvt0gWp7SV/TYvLDosXlu0efp8VP7/PX2zYrNC4sem+cXfal39E8Q7+ixeUHRzxM2LwT6r83d5U+BPip6bF5Y9Ng8IfRzB30q93Gni6F7jb6mlG/DTrW8Pnh5VKRNJX3NiZETcvIbOcETkpPfyQlSkZz8Tk4wkOTkd3KCriQnv5MT3CY5+Y+/wnHfkbpN9asITYhQcvI7OcGaDs/J1P4uJ9eSYyvfXnIs4dtLbpS8W3Jbbn+61qe3P/xNydN0O/ryDfAYdpnypji/PxRlj0HndevYkh77YOZfjr2ixIm5QYm2coMSs+QGJfLHDUr8jBeUGYXiBiWWww1K7IkblFgZNygNlF5QYns+i/J+d8fMOiiPey9tWm/lyDnl54OvIcEjEZJuSDBUhKQbEtwXIemGBKtGSHohKfg6QtINCSaQkHRDgmMkJN2QYC8JSTckRkgISS8kGFdC0g0JxpWQdEOCcSUk3ZBgXAlJNyQYV0LSC4lhXAlJNyQYV0LSDQnGlZB0Q4JxJSTdkBghISS9kGBcCUk3JBhXQtINCcaVkHRDgnElJN2QYFwJSS8kFeNKSLohwbgSkm5IMK6EpBsSPAkhybk8QvJUjntI6G4ISV7utcvL0wneQ0J3Q0h6IZnpbghJNyR0N4SkGxK6G0LSDQnPkxCSbkiMkBCSXkjwJISkGxKeJyEk3ZDwPAkh6YYE49oPSZ1vR9f5+ZVqmyEp9T7o9BSo7Ve7bR97KeIVDqZzF5wfRVwwgQOKiCkbUERM0oAiYloGFNEo4v4i0qkPKCKd7IAi0ukNKCKdUL+Ic7m/2LU9vwJ6sxNq6d5ct7QuvzS115LT37y75I1u6O0lp3caXvL5/ib6PK0bJafTenvJ6cveXnKj5O8uOT3f20tOh/j2ktNPvr3kdJ9vLznd57tLvtJ9vr3kdJ9vLznd5+iS5/Qoec2/lPzr0R/7jetKDxwUvAE+Jnh8QFDwWImg4HEjQcFjaIKCxxOFBL9M2Kqg4HFmQcFj7oKCx9wFBW+AjwkecxcUPOYuKHjMXVDwmLug4DF3McEnzF1Q8Ji7oOAxd0HBY+6CgjfAxwSPuQsKHnMXFDzmLih4zF1Q8Ji7mOAzfbxT8K9f/bdkVvVOwb/egXzJrOqDgmdVHxQ8q/qg4FnVxwRfuB8fFDz344OCp48PCp778UHBG+BDgjfMnVPwZbodm0uyr+Axd0HBY+6CgsfcBQWPuYsJvmLugoLH3AUFj7nz+gTOmu/gp69P4FTMXVDwBviY4DF3QcFj7oKCx9wFBY+5CwoecxcT/Iy5CwoecxcUPAInKHgWd33wttz+dK1PTzFtg09puh2dUn4Mu0xb9bB0w2P2JNTXrOT1ZxaChKQXkoVFIyHphoQFJiHphoTbyISkGxI6FkLSDYkREkLSCwm3sglJz5Ms3PYmJN2QcIuckHRDgnElJN2QYFwJSS8kDeNKSLohwbgSkm5IMK6EpBsSjCsh6YbECAkh6YUEmUZIeiFZWbj2Q5LW+yOJ2XIvJJZv5Ui2PM4wTcsWypzvlS6tPfjUtnH0SX6hvrLQJVTDQ8XCmFAND5URKkI1OlQ86kCohoeKbo5QDQ8Vj1IQquGh4tELQjXcU/GoBqEaHKo28WgHoRoeKow6oRoeKow6oRoeKow6oRoeKiNUhGp0qDDqhGp4qDDqhGp4qDDqhGp4qJCfhGp0qJIRqo+GKrXpPux17oSqTCXdj67L/ejtR4/PcaewJZb1RPDDEaQJIIIfjiAtAxH8cAR5ZIcIfjiC9LhE8LMRzDwORAQ/HEEeHiKCn/WCmUeNiOCHI8iDSUTwwxE0IkgEPxtB7o4QwQ9HkLsjRPDDEeTuCBH8cAS5O0IEPxxB7o4Qwc9GsHB3hAh+OIKoaSL44QgiZfxGMM2PCE5rJ1S23DFe/vMxkmLtZ1SQJ0TlWuyW7E4mrRtRQXIQlZ9RyeVOpuSNqCAjiMpvRgVpQFR+LypGc09UfjMqPKJIVH4zKvgaovKbUeGRP6Lym1ExokJUrlG5M7+kZtqICraWqPxmVLC1ROU3o4KtJSq/GRVsLVH5zahga4nK70WlYmuJym9GBVtLVH4zKthaovKbUcHWEpXfjIoRFaLye1HB1hKV34vKHLIDWi6H3KKylF5U0pxvwUrLM/yyDX+5jfqv7c47R+cHzpzL0sF5ks235pC9EqE6NlQhuypCdWyoQvZfhOrYUBmhIlSjQxWypyNUx4Yq5LM6hOrYUIV8qodQ7QtVZ7uAOeTzP4Tq2FCFfFKIUB0aqgWjTqiGhwqjTqiGhwqjTqiGhwqjTqiGh8oIFaEaHSqMOqEaHiqMOqEaHirkJ6EaHarGQn10qKbp/iDv1HpH53J/pDibpZOEqnPvrxmhIlSjQ8VCnVANDxULdUI1PFQ8+kKohoeK7o9QDQ8Vj74QqtGhWnn0hVCN9lQrj74QquGh4tEXQjU8VBh1QjU8VEaoCNXoUGHUCdXwUGHUCdXwUGHUCdXwUGHUCdXwUGHUCdXgUK0T8pNQDQ8VC/V+qJap3kM1r52YtHbbSzZNUzdTDjd9WSfW6WRqdKZYppOp0ZlilU6mBmcq8dgLmRqdKRo/MjU6Uzz0QqZGZ4pnXsjUYD+VjEyRqcGZ4okXMjU6U3h0MjU6U3h0MjU6U3h0MjU6U3h0MjU4UxmPTqZGZwqPTqZGZwqPTqZGZ8rIFJkanCnW6KMzdT+4LaUXKYc7vKyFJTqRGhwpVuhEanCkWKATqcGR4jkXIjU4UkakiNTYSPGUC5EaHCkeciFSY71U4RkXIjU4UjziQqQGRwp7TqTGRsqw50RqcKSw50RqcKSw50RqcKSw50RqcKSMSBGpsZHCnhOpwZFCdRKpsZGqLM8HR6pOtyeFq02dY8t6f1DYpifsP05ANlKde3yV5TmRGhwpI1JEamykWJ4TqcGR4uEWIjU4UnR8RGpwpHi4hUgNjhQPtxCpsV5q5uEWIjU4UjzcQqQGRwp7TqQGRwp7TqQGR8qIFJEaGynsOZEaHCnsOZEaHCnsOZEaHCnsOZEaG6kF1UmkBkcq5PK8rs1uQ27r2omUyztxS8hFNODXJeRSF/DrEnJBCvh1CfnQBeDXFrJfAPzaQj7AAPi1hXzMIAL4Th/fQj4MAPhLAQAfEzzmLih4zF1Q8Ji7oOAxd0HBY+5igl8xd0HBY+6CgkfgBAUfsp2ba7k9eTXX+iv4a1lCNjv9soRsBfplCblQ7pSlTFPIZWS/LCEXWf2yhLx52C9LyJVZvyxGWbbKEvK2TL8srHI3y8Iqd7MsrHI3y8Iqd6ssiVXuZllY5W6WhVXuZllY5W6WxSjLVllY5W6WhVXuZllY5W6WhVXuZllY5W6VJbPK3SwLq9zNsvBDkHWrLNxl3yyLUZatsvCI/WZZeAB9syw8nr1ZFh5e3iwLj/ZulaXw4OtmWXgsdLMsrHI3yxJzZ/A63/7yMpf8S1m+Hl3K7anMYk97yuWfFTQquLOCMfd9HlnBmNscj6xgzF19R1Yw5ia2IysY841nAytoMXe9HVlB3mf1tn2DrwXnbU9vLjjvQnpzwY2Cv7fgvEfnzQXnLTNvLjjvYHlzwXlDyZsLztuv31vwygtT3lxwOs03F5xOc3TB59vNtct9ts6xluuNjuX2dIrFfuKhL+3jmbPd8Sxzp+R//Xr/NpCp9Y7OJd+Kl80ew97e1aWl5XaSLa3LL0dfcRo4PeGkp3aFk459NM603EZdcl56ONN9e66cy7IbJz7AFU5sgyecMyvbwY1Hux/cltL95nzALMsWHgOPMh5WntJ4WElK42FlKI2HlZ40Hu5CKeNZuGcljYc7XNJ4uB/2UTxDhe6CY3AE04DpByb+4kQw79+ZLU/rBkxshyOYuBFHMDEpjmDiXfzAbFgaRzBxOo5gYoAcwcQAOYJpwPQDEwPkCCYG6DwwRV5rnNbbo6o5p/x88DVSeCgiNThS2DAiNThSODkiNTZSK2aQSA2OFH6SSA2OFJaUSA2OFK6WSA2OlBEpIjU2UnhrIjU4UthzIjU4UthzIjU4UthzIjU4UthzIjU0UmnCnhOpwZHCnhOpwZHCnhOpwZHCnhOpwZEyIkWkxkYKe06kBkcKe06kBkcKe06kBkcKe06kBkcKe06kxkYqYc+J1OBIYc+J1OBIYc+J1OBIYc+J1OBI4aWI1DcjlcsjUla/RoqOj0h9M1LLvdJ5KeVLpDIdH5EaHCk6PiI1OFJ0fERqcKTo+IjU4EgZkSJSYyPF81JEanCk8FJEanCkeF6KSA2OFM9LEanBkcKeD47UmtPPg9daO8fWabnd26hpeg7gTzwFEy2NB6srjQdDKo0H2zh6OdPK7eDp6QT/hk9KDz513uBj8JHmgwfT5oNU0uaDodHmg+7Q5oM7kOZjyANtPtgDbT7og0/yyY8XLOb81xH/eOXEW1pu59jS+uvRV5rYBk80DZqOaGIyzkTz9Ytvk+E9PNHEkniiiVPxRBMD44hmxdd4oond8UQTF+SJJi7IE02DpiOauCBPNHFBJ6J5jk2kKkaKTI3OFF6MTI3OFHaOTA3O1IwjJFOjM4WpJFOjM4UvJVOjM4W1JVOjM2VkikwNzhQGm0yNzhQenUyNzhQenUyNzhQenUyNzhQenUwNztSCRydTozOFRydTozOFRydTozOFRydTozNlZIpMDc4UHp1Mjc4UHp1Mjc4UHp1Mjc4UHp1Mjc4UHp1MDc5Uw6OTqdGZwqOTqdGZwqOTqdGZwqOTqdGZwk+Rqe9mKpdHpqx+zRR9H5n6bqY67w1d6fvI1OhM0feRqdGZou8jU6MzRd9HpkZnysgUmRqcKZ6fIlOjM4WfIlOjM8XzU2RqdKZ4fopMjc1UnvBT/UzN2e6ZWroxWaf7nYu1ls7RNk23CNpkz3m9AWJxMhhQmaZ0G8jUujjLY9aX5ddZfwXEN704IL42xQFxL1cbUOLGqDggVnHigLhlJw6I+1/igAxA2oC4M/NhQPkOyCz9AmhDT3VecnaRXeD0hBNL4QonTsMVTgyIJ5wZX+IKJ3bFFU5cjCucmBtXOA2cnnBihVzhxAqdCecp9gfIGTdFqIaHCkNGqIaHCk9HqEaHqmALCdXwUOEsCdXwUGFOCdXwUOFvCdXwUBmhIlSjQ4XLJlTDQ4VRJ1TDQ4VRJ1TDQ4VRJ1TDQ4VRJ1SjQ2UYdUI1PFQYdUI1PFQYdUI1PFQYdUI1PFRGqAjV6FBh1AnV8FBh1AnV8FBh1AnV8FBh1AnV8FBh1AnV6FBVjDqhGh4qjDqhGh4qjDqhGh4qjDqhGh4qPBWh+naocnmEyurXUNH9Eapvh6rzkqiZ7o9QDQ8V3R+hGh4quj9CNTxUdH+EaniojFARqtGh4nkqQjU8VHgqQjU8VDxPRaiGh4rnqQjV8FBh1EeHKk3tPpC6dI62Zb2zbDY9Hf0T0IKdFgeE6RUHhDUVB4SBHA5ouQPKuQeopnT72zXVeQOQAUgbEGZMHBCWSRwQxkYcEPZDHBAmQRtQwySIA8IkiAPCJHwUUH68wDHn8jj6D1/32PAOrnAaOD3hxGm4wokBcYUTX+IKJ3bFFU5cjCecK+bGFU48jyucWCFXOLFCZ8J5jt1QViNUhGp0qDBkhGp4qPB0hGp4qLCFhGp4qHCWhGp4qDCnhGpwqMqEvyVUw0OFRSZUw0OFyyZUw0OFUSdUw0NlhIpQjQ4VRp1QDQ8VRp1QDQ8VRp1QDQ8VRp1QDQ8VRp1QjQ5VwqgTquGhwqgTquGhwqgTquGhwqgTquGhMkJFqEaHCqNOqIaHCqNOqIaHCqNOqIaHCqNOqIaHCqNOqEaHKmPUCdXwUOGpCNW3Q5XLI1RWv4aK7o9QfTtUr9+DVzLdH6EaHiq6P0I1PFR0f4RqdKgK3R+hGh4qnqciVMNDxfNUhGp4qPBUhGp4qIxQEarRoeJ5KkI1PFQhPVVd2y0mS7NeqC607+DL05+udYt7Wm7jaGn9NSXXioeUOJ+suIU0HB+teMj2/9CKv351QbGQvfFHKx6ycfxoxY2Kj634OR4lspCND9wt5NM+cLeQD+TA3XARMbljREJyr3iZmNyxQzG546hicseUxeRucA/JHV8Xkzu+LiZ3fF1M7vi6mNzxdSG5z/i6mNzxdTG54+ticsfXxeRucA/JHV8Xkzu+LiZ3fF1M7vi6mNzxdSG5L/i6mNzxdTG5G9xdcu/sirywnvfJvbN3x8J6PiZ31vMhuTfW8zG5s56PyZ377zG5c/89JneDe0ju3H+PyZ377yG5rwHW89cTDbCAvZ6oyxXb0+Tc/MOp3b305a+1+8H2c7++1ajKRlVcftvvrorL78LdVXF5Z2d3VVze99hdFZd3BXZWxSaXznx3VVyuQHdXxeVydXdVWNtuVcWoykZVWNtuVYW17VZVWNtuVYW17VZVWNtuVCWxtt2qCmvbraqwtt2qCmvbraqYk6qUbLebNqX0/nAuj9f7leXrS60seVncDi6Ll9Xt4LJ4Wd4OLouX9e3gsnhZ4I4tS/aywh1cFi9L3MFl8bLGHVwWL4vcb5Yl38tiln4py9eje+8etGwUcX8Rg66gxxYx6Hp7bBGDrs7HFjHoWn5sEYOu/IcWsQTtE8YWMWhXMbaIQXuQsUWkYxlQRKOI3SKeYmMfK/RNblDSvblBSQ/pBiWdrBuU9NNeUBpdvRuUuAU3KDEcblDiWdygNFB6QYntcYMS2+MGJbbHDUpsjxuU2B4vKCu2xw1KbI8blNgeNyixPW5QGii9oMT2uEGJ7XGD8v9v72x2JMdxPP4ue86DKVFfz7JoDGZ6G4sGGtOD3pkF5lDvPo7MtMJVpq3Sv2y1Q+KlkFnpX4giKYmiGLJme7oxpWZ7ujGlZnt6MaXXbE83ptRsTzemZDXlq5jy+KXA7DWCfRlTHr8vhr1GsN2YUiPYXkwZNILtxpQawXZjSj2v7MaUel7ZjSlZTdmLKfW8shtT6nllN6bsJttj2S4i82SOP9gRLTkwR+4pBdlFLd1kTs5VSzdZiFPVErvZ0Z+rlm52x+eqpZud5rlq6WbXdq5aWNUiqaWb3cS5aukmMq9Ri3leaTifboZSZF66ADEOGROfrcQhI+izlThkvH2yEtOQ0fnZShwylj9biUNG/mcrcch9wtlKZFXijytxyD3I2UrUHcsJStQdS1mJr1FJnXTf1I0pdffWiSndpHvIbkypO9luTKn76W5Mqbv6bkzJaspeTKkZjm5MqXmWbkyp2Z5uTKnZnm5MqdmeXkxJmu3pxpSa7enGlJrt6caUmu3pxpSspuzFlJrt6caUmu3pxpSa7enGlJrt6caUmu3pxZRGsz3dmFKzPd2YUrM93ZhSsz3dmJLVlL2YUveVL2PK4yvbndUI9mVMeXwfm7MawXZjSo1guzGlRrDdmJLVlL2YUs8ruzGlnld2Y0rdV3ZjSj2v7MaUel7Ziym5m2zPrIpsSu/WH/zR0W52XaWO8igd7SViZ4r2OZ658MH7D39opZfg91yt9BJHVmnFR7ek+n0Mz5eM+E+l9BKRnaqUXmKbM5XieokS6pSSpixyMmGjlF5OV05VSi/nFKcqpZfY81SlsCplq5QhY9qSUoYMaUtKGTOiLShlzIi2oJQxI9pjpXiNaAWlaEQrKEUjWkEpGtEKSmFVylYpGtEKStGIVlCKRrSCUjSiFZSiEe1WKUEjWkEpGtEKStGIVlCKRrSCUliVslWKRrSCUjSiFZSiEa2gFI1oBaVoRLtVStSIVlCKRrSCUjSiFZSiEa2gFFalbJWiEa2glEEjWs6FgMltlTJoRHuslEEj2mOlDBrRHiolDRrRHitl0Ij2WCmvGbx9yK7f9HyZrwfaaXnWWOL1wx+m1G96dmJKr2+d7seUeq9XN6bUe726MaXe69WNKVlN2Ysp9V6v17mZNplsysltTan3enVjSr3XqxtTaranG1NqtqcXU+pbp/sxpWZ7ujGlZnu6MaVme7oxJaspezGlpgh6MWU/r180vCjF2tIHG2uyKZnpRUxZyMH28/pFNWU3YY+aktWUvZiym0MuNWU3EayasptDLjVlN4dc/ZuytK/s5pBreFP286piNaVme7oxpWZ7ujGlZnu6MSWrKXsxpWZ7ujGlZnu6MaVme7oxpaYIejFlN29DNSm/yNeSoeMPdikul0uEyE+tEImGNzYb3q4+2rnXTdh283JYtXud3XsJqNTudXbvJfpSu9fZvZeDObV7nd17CdHV7lV27+ZN1Gr3Orv3cj6odq/av3fzPnG1e53dezl5VLvX2Z3V7kPaXfN1Y9pd83Vj2l3zdWPaXfN1Y9pd83VD2t1rvm5Mu2veZky7DxnXhfmRRd3BluxO3ixeQiE8ZabH1S1b3VFYpLZm9Zoy+eku73D2QwaN6lTXOtWQEak61aVOFYYMd9WprnWqIc++1amudaohN2jqVNc61ZCn9upU1zoVq1OpU52cpwpD1huoU13rVEMWM6hTXetUmlFXpzrdqTSjrk51ulNpRl2d6mynippRV6c63ak0o65OdbpTaUZdnep0p9KMujrV6U6lyU91qrOdKmmgfrZTTRMtgkyx9HSX791IGqirU53uVBqoq1Od7lQaqKtTne5UrE6lTnW2U+nuT53qdKfS0hd1qtOdSktf1KlOz1Np6Ys61elOpaUv6lQnO1WYNKOuTnW6U2lGXZ3qdKfSjLo61elOpRl1darTnYrVqdSpznYqzairU53uVJpRV6c63ak0+alOdbZTkQbqZaeag4TsVD4V3CRGuzw8TUWf6vDSl0CsPqU+dbJPaZiuPnW2T2mUrj51tk9p2Yv61Nk+pRs/9amzfUqLXtSnTvYpozUv6lMn56eMlryoT53tU1rxoj51tk9pHl196myfYvUp9amTfUrz6OpTZ/uU5tHVp872Kc2jq0+d7VOaR1efOtunNI+uPnWyT1nNeapPne1TGqOf7VP54RhsyaU6vOElWA3R1aVOdimN0NWlTnYpDdDVpc51KdY6F3Wpk11Kt3zqUie7lFa5qEud7FJa5KIudW5eilldSl3qXJfSEhd1qZNdSrPn6lInu5Rmz9WlTnYpzZ6rS53sUpo9V5c616WcZs/VpU52Kc2eq0ud7FKaPVeXOtmlWF1KXepcl+omPHd+edh4CscfTDEt5bxmsp2crfluwmI1ZTfhqJqymzBQTdlN8YKaktWUvZiym8N6NWU3h+T9m7Kwr/TdHE6rKbs5FFZTaranF1MGzfZ0Y0rN9nRjSs32dGNKzfZ0Y0pWU/ZiSs32dGNKTRH0Ysp4wmYk5NygCyEem5I45Je0OloVbkSpo56Xh72j1bPuU3i6tfAhe3h0gvDm3sJTFt4LwttXFp5fWXj3ysL7VxY+vLLw8ZWFT7cW3i8rrPdxK3y69wpbEP7eK2xB+HuvsAXh773CFoS/9wpbEP7eK2xB+HuvsAXh773CFoS/9wpbEP6FV9g4vfAKG6cXXmEjicKTc/mLHH56Yk7+Hsci+7qfxPTZgrm8BXt5C3x5C+7yFvzlLYQfb8E9vxPkv2pBSIxNz8QYrXKKLCbz8h3yiUzpg23KpXK8yrhZaz47GkfpaBqko/LLj3vsaHm+N1919IMyEGURSr75kqaQF7LHz8/px39idgfLpxQ0zXPgBmMMcxjmMUyeWKdony/GiKsjmAWLGJYgTL4Zoozt2C05yljytMF2NJnitGBfvSxkwQKGRQjzE9Q3+RtoZWxn4KR86PUQ0m0wi2GMYQ7DZHPPj6YnZtYGEI4VV2eQZnVUuDQRrm8iXt9EurwJufrx3Cbo+ibM9U1YaNYIjGEOw7CJNGATacAm0pAgLE4YRhhmMAzzkoh5ScS8JGJeIielOEzLZM9hFdJaju9YktNBZUy0G89x6IJFK2EGwyyGMYY5GctJpvkTJgHzGBYwLGJYgjCaMIwwzGCYxTDGMMxL5G2+MzknaVbv0fsoO0ryjrnAEMAYgLEAwwDjAMYDTACYCDCAH1jZD/yyLrjVRiUzBDAGYGQ/SLkkbbWKZIYBxgGMB5gAMBFgUj0jv1apwBDAGIAB/IABP2DAD+Sr6kzIl3SZYO2WkoNG7/Mu2sfteJDvMCtSDqI8RMnbihCWKYjmVNmWihCVEGonp1OiCKIMRFmIYohyEOUhCvIND/mGh3wjQL4RIN8IkG/spCRSvuWP5qBmSzFCyQWLxV1cxPaMaWfPmE8NOAQSMMIwg2EWw7A9Y3IYhu0ZE7ZnTNieMSF7Rp6mCcMIwwyGWQxjDHMY5jEsYFiEMNrZNLhntc3qrIGsfF9qPqu10+oQ+PH0RyOxRSOpQSM7e/qTG6EWjbQw/E6a4eRGuEUjrkUjvkUjoUUjLUa8aTHibYsRb1uMeNtixNsWI962GPG2xYi3LUa8bTHibYsRb1uMeG4x4rnFiOcWI55bjHhuMeK5xYjnFiOeW4x4bjHiucWIdy1GvGsx4l2LEe9ajHjXYsS7FiPetRjxrsWIdy1GvGsx4n2LEe9bjHjfYsT7FiPetxjxvsWI9y1GvG8x4n2LEe9bjPjQYsSHFiM+tBjxocWIDy1GfGgx4kOLER9ajPjQYsSHFiM+thjxscWIjy1GfGwx4mOLER9bjPjYYsTHFiM+thjxscWITy1GfGox4lOLEZ9ajPjUYsSnFiM+tRjxqcWITy1GfGow4mmaWjRCLRoxLRqxLRrhFo24Fo34Fo2EFo3EFo20GPHUYsRTixHfovSKqMWIpxYjnlqMeGox4qnFiG9Rc0ctau6oRc0dtai5oxY1d9Si5o5a1NxRi5o7alFzRy1q7qhFzR21qLmjFjV31KLmjlrU3FGLmjtqUXNHLWruqEXNHbWouaMWNXfUouaOWtTcUYuaO2pRc0ctau6oRc0dtai5oxY1d9Si5o5a1NxRi5o7alFzRy1q7qhFzR21qLmjFjV31KLmjlrU3FGLmjtqUXNHLWruqEXNHbWouaMWNXfUouaOWtTcUYuaO2pRc0ctau6oRc0dtai5oxY1d9Si5o5a1NxRi5o7alFzRy1q7uiMmjs7H1MvjRgqPR0WgcLzli8On9KEW0kTbyVNupM0Z9QFnigN3Uoacytp7K2k4VtJ424lza3m4niruTjeai6Ot5qL063m4nSruTjdai5Ot5qL063m4nSnudhMom7CtNyxub4cjhbGAYw454f8MpOwfgPWwgSZyd3xdsuI82eIi7pCClsm1TNyZVnMd/tG3upALhSLJr/oyPktI47rmE0aJdnsMZME++y8yGjK96bStHrf3cedhDNlIEq+NZGeb7YhR1uKIcpBlIeonVee+Pw2onl531By/cJ8yJlfBcDTti25IKFIGYiyECXby+XrEufk/rSlHER5iAoQFSEqIRRPEEUQZSDKQhTkGztvCXN5YpuPJsyW8hAVICpCVEKonReElSiCKANRspXt855ba7fzxs792CXKQ1SAqAhRCaF27scuUQRRBqIsREG+4SHf2Lkf23LIlN/ONjv3Y5eoCFEJoXbuxy5RBFEGoqDIYed+7BLlIMoDlJW/f0WGlveXkVlpwzlhU/ZwsM+HH1IcP0yPN9Flgew6pk7Tp0j2fiLx/URy9xPJ30+kcD+R4v1ESrcTSc5K/Lki0f1Eut/sTZfO3h9N8PVNuOub8Nc3Ea5vIl7fRLq8CXPGbOM4N7F6wUpugq5vwlzfhL2+Cb6+CXd9E/76JsL1TZwxuk1uYnaf44cjhWV5ibQ6D3iM2Q+B0s0EstPdBKK7CWTuJpC9m0B8N4Fca4HywVKczzC/Ekj46OP3VM3i+9cWP7y2+PG1xU8vLT5Pry0+vbb45rXFt/cW//ilbpb5tcW/+apbEv/mq25J/JuvuiXxb77qlsS/+apbEN/dfNUtiX/zVbck/s1X3ZL4r73qutdedd1rr7rutVdd99qrrmu96hp6iu9MQfyQeHk6pGQLT9tcts/mq/qX7aOG0iKzMbQpl7MuqVoEtfhJ1SKphVQtklqMqkVSi1W1SGphVYukFqdqkdTiVS2SWoKqRVKLRrmiWjTKldQSNMoV1aJRrqgWjXJFtWiUK6qFVS2SWjTKFdWiUa6oFo1yRbVolCuqRaNcSS1Ro1xRLRrlimrRKFdUi0a5olpY1SKpRaNcUS2Dxi3GPtXCbqOWNOhKFPKNZSZYu1XLoCtRSS2DrkQltQy6EpXUMuhKVFLLoPmWkloGzbeU1DJo3FJSy6D5lmO18DRovqWklp0oNy4tkDXuuKfOuaXIdf7JrB/+aMJc34S9vgm+vgl3fRP++ibC9U3E65tIlzexd0PVmU2cMbqnfBu7n0xh0itcDMBk7iaQvZtA3Fqg/S80fAjk7iaQv5tA4W4CxbsJlG4mkJnuJhDdTSBzN4Hs3QS620xtWs/UL3G+wcarWiS1BFWLpJaoapHUklQtglrspGqR1EKqFkktRtUiqcWqWiS1sKpFUotGuaJaNMoV1aJRrqgWjXJFtWiUK6mFNcoV1aJRrqgWjXJFtWiUK6qFVS2SWjTKFdWiUa6oFo1yRbVolCuqRaNcSS1Oo1xRLRrlimrRKFdUy6Bxy/GXydgNuhIVqo/doCtRQS1+0JWopJZBV6KSWgZdiUpqGTTfUlILq1oktQwat5TUMmi+paSWQfMtBbWEQVcim2U2lnirlkFXopJaBl2JSmoZdCUqqWXQlaiklkFXopJaBs23lNQyaL7FJJPVMm2zc3HQfEtJLYPmW0pqGTTKLall0Ci3pBZWtUhqGfWcqKCWQaPckloGjXJLahk0yi2oJWk4J6pl0EsHC3uiUS8dLKll0EsHS2oZ9NLBkloGvXTwWC1u1EsHS2oZ9GrtkloGvVr7OG5x06BXa5fUwqoWSS2DRrkltQwa5ZbUMmiUW1LLqK8EKahl0Ci3oBYaNMotqWXQKLekFg3nJLXIlzcGuxTcBbZbRpymEy8NJSe0k+oZ+ZazAkMAI2+Aplx1SJOPW8pCFEOUgygPUQGiIkQlhNq5F6REEURBvsGQbzDkGwz5BkO+IX+z+Xi2kL/2m6ZlKk1myzhg5DsLtMMA4wDGA0wAdADMzA6YmT1gHw/MzPJ3jAqMBRjZD9zi1ymYLeMAxgNMAJgIMKmeCRPAlPxAYgA/CIAfyLXhBcYBjAcYYD4IwHwQgPkgAvNBBOaDCPhBBPwgAn4QAT+IlX4w/0KPB+UIiPPize55TzvZ9A6ax5M7d7X7fEJAPtAT5fCQc+cm8wIUECgiUAKgnRuUj6D5N3ugQ5NXczLfrcMCFBAoIlACoL1bqA+g+Td+PCu/bsbEvBs3cbUbp3kYPFC3j3LIW/MYVqB/B/37oBEnHEPP0zFa7bzf25ylNdXQ/Ft4F1Q+WEu5Hiil9dsU3psj+dSpwDDAOIDxABMAJgJMqmfkBGKBIYAB/IAAPyDADwjwAwL8gAA/IMAPCPAD+a08yedpbJrMFiIEMghkEYgRyNVC82/xfa7bSxpRRu0zlKH35YMiwKR6xkwAQwBjAMYCDNczcgIx5JU6rO5U+iR8NRHk5JDNyaH0LbGTTlrC3+Dtt4Ro/xBzAmr1brsPQg6VDwnR9tEsU0jkb3suBwlz2n8h5jDkG0K0ewxLz+NWKj4m0jf2mH9J7yNTDjzn4GTxlnm9/b5RRvmMYl4CvurRm9RAeD49pVUT8WMfMx1KV4Dfd0HyLs17O32y84/P+NO6977J27QS5BEoIFBEoARAcrl6CSIEMghkEQjxiIR4REI8IiEekRCPSIhH0DRBFEGU7BSBl2nWhzBtqZ11jPKyNFm/pTxEBYiKECXba45Wjyg54J/X6JCpsNU8OYjyEBUQSo5wgn0GH9ZstbF3lF2gPEQFiNqJd2w++388uaESQsnJmSJFEGWKlDdbasde8UmtVv5MeYgKEBUhKiGUHHUGziUn89mq3VIeonaiaLfsIEL0W0q+enaesGNuy6ctZSGKIUr2KJ8rcYI3W++VD2eLVICoCFEJoeRD2iJFEGUgSrbXfPyyUC5t5w35cDOElDeaUYg35OPNEhUmZKTIR5xFykCUhSiGKAdRHqICREWIgubDCPlGhHwjQr4Ry/Oh4PPRQ1SAqAhRO/Ohz2PZh+0KK28O511G1mFYfTsqUw6iPEQFiNrRYQpPym2pBFBmmiCKIMpAlIUohqgde7nsh8HxliqvX/T1WBbSaxxdLlyeTzzjtpWdOY38wXpn5COxwipp5EOxImUgykIUQ5Srpr48NmyPh/1ODtVOU85sWtrYTQ44yhhhmMEwi2GMYQ7DPIYFDNupXHG5Nnb+ebsJ3rkZr4Tt3BxXxAjDzA4W6InFLWYxbKdwyOddAfk5a/TluxLn86Pm2bd50/jlu1LnRWznrpciRhi2Y4AQV9VK25xCshjGGOYwzGNYwLCIYTteEp+Tgo/0vQn17+AI5PYcZTXkIplScGEC5+fNHIyXnncuH6fOP6dtYmayN5WLbyqXu6lc/qZyhZvKFW8qV7qnXDT9WXLledX5aXvsSHSSXLkY5iFXKm/y8s5//pm2qVAyN5Ur/ElyHW+KdyoKbyBXuqdcZrqpXHRTucxN5dqLJ9wq7PUC50EugFwEuYRxe98CKXIEcgbkLMgxyIH+YkF/2fnOuY82PMeNEwoPIsgljOMJ5AjkduyenvGNT357JLDzTfIyt2OH5J9ypiAcvMt6CfMCsnCBhAKmnZf8ljkDchbkGOQcyHmQCyAXQS7tcLlOY/45buNpv+cvTz8L6+9VyeueTzkM9YlWBdNRvI+Fl/xhNKsc56OieLfs4U+VyNxOIns7ifh2ErnbSeRvJ1G4m0Q7p27B5Krdx8/bQ/Sdg7Bg8gnw/LMw/+0caQVjn/Om4e8tpfkObkfjxq/kFNb1nVOt8LxRdv7ZbPf/O8daRW7nXKvMEcgZkLMgxyC34y+WV5zb+ufOez3KXAC5CHJ7/mLX3Db+SBPIEcgZkLMgxyDnQG7PX5750fnn7TyRAshFkEsQt1O+ND8bVlyathyBnAE5C3IMcg7kPMjt+Auv1ls2dstFkEsYt3MeUeZ2/IWnNbctDdvJ55c5C3IMcg7kPMgFkNvxFxOfcQ9b96WUX7WUn2dhfTY7+fv6dvI3ZuafXfHcqlgEaKaT5HL8lGtbaGx28vE/1n+pHdOoHduoHW7UjjupneCf7STz4/7pT5IrPfs/zwnbdsL5/RfbiY3aSW3asVOjdk6aP5jCsx3740XU9qT5hu2q/7wtJLf2gv5L7XCjdlyjdnyjdgKU5zE2glzCOJ5AjkDOgJwFOQY5B3Ie5EB/YdBfGPSXnXO00nmfcXvnkum571vfFZU5BjkHch7kAshFkEsYt3OOVuYI5AzIgf7iQX/xiL98eRQGPB7fi/5z7eJqJM0puo8RWI+4esTXI6EeifVIqkb2QssjhOoRU4/UW9/WW9/WW9/WW9/WW9/WW9/WW5/rrb9zfWvOAM3JyA1i6hFbj3A9Ilp/Ds8XZH2B3yfi65FQj8R6JFUjcrnQMUL1iKlHbD3C9Ui99V299V299V299V299X299X299eWyB5M3/GZ9RfonIvaF3RIzsIvfIvL3bg9bkb9za8ISqZvVVyIXRHQYS4tg6++jPhDh1VX712PvfVN29fF2MxnLBQXHSKxHUjUiVxAcI1SPmHrE1iNcj7h6pN76cnmAdcuVotbZDZKqEflw/xihesTUI6IpOV/3Oqc4NwjXI64e8fVIqEdiPZKqkZ3vzj5PXtmYLUMAYwDGAgwDjAMYDzABYCLApHqGAD8gwA8I8AP53P0wYti5tPOYkXeLZ1ZAypvLU1sIl7cQL28hXd2CvDE+tQW6vAVzeQu2soWfdr8UU4JqR957GpE1jahpRE0jViKaRtQ0oqYRNY34fYimETWN+J2IphE1jahpRE0jahpR04iaRtQ0oqYRNY340wukEd/fd212rknPV8GGsO7Zx2urjS1Cgb+ChGA/LdsPt5LNhM+S46sbcFc34K9uIFzdQLy6gXRxAzsvKTuxAbq6AXN1A1ePZHv1SLZnjGSzbKScSV81sH02pPye2pBW18iY4IWnbb6ajs1z92Ck7IeZ46glu2JWtziag7x6f90MY3QzjtHNNEQ3eRqjmzRGN80Y3bRjdJPH6OYYURCPEQXxGFEQjxEF8RhRkBsjCnJjREFujCjIjREFuTGiIDdGFOTGiILcGFGQGyMKcmNEQX6MKMiPEQX5MaIgP0YU5LtZN1dFxWZ1oZw5qBB+xW4GWr5q8Xhn2TfdDN3MtMfd7GamPe5mNzPtcTe7mWmPu8ljdLOb/eZxN7tZN4+72c1+87ib3ew3D7sZu5lpn6/vMZb42252M9Med7Obmfa4m93MtMfd7GamPe5mNzPtcTe72W8edjN1s980yeRuTt9mD1I3+83jbnaz3zzuZjdR0HE3eYxudhMFHXeznzztYTe7iYKOu9lNFHTczW6ioMNu7nx7vb9+yt/OdsZnycMGMfWIrUe4HnH1iK9HQj0S65FUjcjvKTxG6q0vf5PW+WVcOE8bxNYjXI/I1s8npX5zUEryt1ePkVCPxHokVSPyt0CPEapHTD1i6xGuR+qtb+utb+utv3Mj3WFSd+eb7uSfb5r3cTMAdt6zVYACAkUE2rmZ8PlWw5A2y5ObEIgQyCCQRSBGIIdAHoECAkUEQjzCIx7hEY/wiEd4xCM84hEe8Qi5NogSLTEiJbOFAgDJJQBzXJ2vFZ183ECMQLIi5oVngchtZiP5sLcEBQSKCCQPjdnoGYobRcg34RHnPcv846Yl+QCxBDECOQSS7eRM1p5z0wYKCBQRKAGQnGIvQYRABoEsAjECOQRCPCLteETIU5hLm9AtRQRK9ZCZJgQiBDIIZBGIEUg2rn0uNdbSBgoIFBEoAZB8aV4JIgQyCGQRiBHIIRDiEYR4BO14BOfX+Fo/baAEQGZCIEIgg0AWgRiBgJDA7Lx5oQAFBIoAtHMVlF1C2MB2g4jCJV68NTm3QWI9kqoR+cqXY4TqQ/i9V6AXIItAjEAOgTwCBQSKCJQAaCcdU4AQj3CIRzjEIxziEQ7xiJ1veh7NDHJeJeX3WSSzReqHuZzpOGxFznMcI1yPuHrE13e/fvr19dOvr7dLqJ9+5e/RHCOmHpGt7xZPTmET2cupnWPE1SO+Hgn1SKxHUjUSS9YXkHrrx3rryymjY4TrEVeP1I/9WD/2Y/3Yj/VjP9WP/VRv/VRv/VRv/VRv/VRp/S+PPPXjSXmTGZNZYvaY0uoFB4+bnr/Mv/7/X//49a9/++2X/5uhx1//9fef//nr73///PWf//7H8pe//fHrb7/9+r9/+ccfv//8y//8649f/vLb7z8//vZf0+c//83zaH9jO01zRx7KsmnOydsU/U+PwpLHf8R5BZv/SY//eBiNHfm3+Z/43o/3bjye8+EtmMd/mcd/vX8UvzEvH8PuzU2PP9vjP3P+wLkVQ4//ctv/8suHmDjLlj9k/sT0+HNY/hzjW8p/ns/D3+ZD4ccDMX/k4wPs47/S87/C28dTND1bTm+G3/+PFs0ZO0vjwqfefHwLuaV5e/4270wXjc0buvnXd8nIZDzOep4W3E1vfsr4/GHzspXxwPOv/h23Cz7n4d9oVvgHTjR3zYRnT+Pc0/wB8xnoG32o9+NFhT/yAS53IKVZT1lomt2Enl5iDc1/tStff3/ooYjZh2c//g8=",
      "brillig_names": [
        "discover_new_messages",
        "get_block_header_at_internal",
        "get_archive_membership_witness",
        "get_note_hash_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15748358241952124793": {
            "error_kind": "string",
            "string": "wow too big!"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBLJwAABAMnAgIEAScCAwQAHxgAAwACgEouCIBKAAElAAAARSUAAAB3KAIAAQSASycCAgQAOw0AAQACKACAQwQQACgAgEQEAAMoAIBFAQAAKACARgQAACgAgEcAAAAoAIBIAQABKACASQQAASYlAAAM2SkCAAIAAtJCngo4AQIDJwIEBAAnAgYEAwA4BAYFLQgBAgAQAQUBJwMCBAEAKAICBS0OBAUAKAUCBS0OBAUnAgUEAwA4AgUEJwIEAAMnAgUEAiQCAAMAAADaIwAAB10tCAEGJwIHBAMAEAEHAScDBgQBACgGAgcfNIBJAAUABy0NBgcAKAcCBy0OBwYtCAEHAAABAgEtDgYHLQgBBgAAAQIBLgqARgAGJwIJBAotCAAKLQwHCy0MBgwAEAAJACUAAA0CLQQAAC0MCwgBKAAIgEkACi0NCgkcDAkKBBwMCggAHAwICQQnAgsEDC0IAAwtDAcNLQwGDgAQAAsAJQAADQItBAAALQwNCgEoAAqASQAHLQ0HBhwMBgcALAIACgAAAAAAAAAAAAAAAAD//////////////////////////w44BwoLJAIACwAAAcwlAAANex4CAAcANjgABwAKAAsAHAwLDAAEOAwKDSQCAAsAAAH1JwIKBAA8CQEKNjgABwAKAAsCHAwLBwAEOAcKDCQCAAsAAAIZJwIHBAA8CQEHLQgBBycCCgQCABABCgEnAwcEAQAoBwIKHySARoBJAAoBKAAHgEkACy0NCwocDAoLBBwMCwcALQgBCicCCwQDABABCwEnAwoEAQAoCgILHzSASQAFAAstDQoLACgLAgstDgsKASgACoBJAA4tDQ4LADgKBQ8tDQ8OJwIKACwtCAEPJwIQBAQAEAEQAScDDwQBACgPAhAtDBARLQ4KEQAoEQIRLQ4LEQAoEQIRLQ4OES0NDwoAKAoCCi0OCg8rAgAKAAAAAAAAAAADAAAAAAAAAAAnAhIEEy0IABMtDAoUABAAEgAlAAANjS0EAAAtDBQLLQwVDi0MFhAtDBcRLQ0LEgAoEgISLQ4SCy0IARIAAAECAS0OCxItDQ4LACgLAgstDgsOLQgBCwAAAQIBLQ4OCy0IAQ4AAAECAS0OEA4tCAEQAAABAgEtDhEQLgiARgADIwAAA24NKAADgEQAESQCABEAAAxmIwAAA4MnAhEEEy0IABMtDBIULQwLFS0MDhYtDBAXABAAEQAlAAAOLS0EAAAtDBQPJwILAA0tCAEOJwIQBAQAEAEQAScDDgQBACgOAhAtDBARLQ4LEQAoEQIRLQ4HEQAoEQIRLQ4PES0NDgcAKAcCBy0OBw4nAhEEEi0IABItDAoTABAAEQAlAAANjS0EAAAtDBMHLQwUCy0MFQ8tDBYQLQ0HCgAoCgIKLQ4KBy0IAQoAAAECAS0OBwotDQsHACgHAgctDgcLLQgBBwAAAQIBLQ4LBy0IAQsAAAECAS0ODwstCAEPAAABAgEtDhAPLgiARgADIwAABHYNKAADgEQAECQCABAAAAvzIwAABIsnAg4EEC0IABAtDAoRLQwHEi0MCxMtDA8UABAADgAlAAAOLS0EAAAtDBEDCjgMAwckAgAHAAAEyCUAAA6hCygADYBHAAMeAgAHAQo4DQcKEjgDCgckAgAHAAAE7CUAAA6zDSgACYBDAAMkAgADAAAFASUAAA7FKQIAAwA7msoDLwwAAwAHCygAB4BHAAkkAgAJAAAFJSUAAA7XKAIABwDerTAMAAcAAysCAAMAAAAAAAAAAAEAAAAAAAAAACcCDQQOLQgADi0MAw8AEAANACUAAA2NLQQAAC0MDwktDBAKLQwRCy0MEgwtDQkNACgNAg0tDg0JLQgBDQAAAQIBLQ4JDS0NCgkAKAkCCS0OCQotCAEJAAABAgEtDgoJLQgBCgAAAQIBLQ4LCi0IAQsAAAECAS0ODAsnAgwEDi0IAA4tDA0PLQwJEC0MChEtDAsSLQwIEwAQAAwAJQAADuktBAAAJwIOBA8tCAAPLQwNEC0MCREtDAoSLQwLEwAQAA4AJQAADi0tBAAALQwQDDAMAAgABCcCCAAEMAwADAAIKQIACAA7msoGLwwACAAJCygACYBHAAokAgAKAAAGSyUAAA7XMAwABwAIJwILBAwtCAAMLQwDDQAQAAsAJQAADY0tBAAALQwNBy0MDggtDA8JLQwQCi0NBwMAKAMCAy0OAwctCAEDAAABAgEtDgcDLQ0IBwAoBwIHLQ4HCC0IAQcAAAECAS0OCActCAEIAAABAgEtDgkILQgBCQAAAQIBLQ4KCScCCgQLLQgACy0MAwwtDAcNLQwIDi0MCQ8tDAYQABAACgAlAAAO6S0EAAAnAgsEDC0IAAwtDAMNLQwHDi0MCA8tDAkQABAACwAlAAAOLS0EAAAtDA0KJwIDAAYwDAAGAAMnAgMABzAMAAoAAx4CAAMANAIAAwAoAgIHLQ0HBicCCAQCADgHCAM7DQADAAYjAAAHXSkCAAMA1Al0wQo4AQMGJAIABgAAB3gjAAAJsy0IAQYnAgcEAgAQAQcBJwMGBAEAKAYCBx8kgEmASQAHASgABoBJAAgtDQgHLQgBBgAAAQIBLgqARQAGLQgBBgAAAQIBLgqARwAGLQgBBgAAAQIBJwIIABAtDggGHgIABgAeAgAIADM4AAYACAAJJAIACQAAB/MlAAAQFCcCBgABMAwABwAGJwIGAAUvDAAGAAgcDAgKBBwMCgkAHAwJCAQnAgoAAi0IAQsnAgwEAwAQAQwBJwMLBAEAKAsCDC0MDA0tDgoNACgNAg0tDgkNKwIACQAAAAAAAAAAAgAAAAAAAAAAJwIPBBAtCAAQLQwJEQAQAA8AJQAADY0tBAAALQwRCi0MEgwtDBMNLQwUDi0NCgkAKAkCCS0OCQotCAEJAAABAgEtDgoJLQ0MCgAoCgIKLQ4KDC0IAQoAAAECAS0ODAotCAEMAAABAgEtDg0MLQgBDQAAAQIBLQ4ODS4IgEYAAyMAAAjfDDgDBQ4kAgAOAAALgCMAAAjxJwIFBA4tCAAOLQwJDy0MChAtDAwRLQwNEgAQAAUAJQAADi0tBAAALQwPAwsoAAOARwAFCygABYBFAAkkAgAJAAAJOSUAABAmMAwABwADASgACIBJAAMOOAgDBSQCAAUAAAlZJQAAEDgvDAAEAAUcDAUHBBwMBwQAHAwEBQQGOAMFBwQ4BwUIAjgDCAQcDAQDADAMAAMABi0NAgMAKAMCAy0OAwIAKAICBS0NBQQnAgYEAgA4BQYDOw0AAwAEIwAACbMnAgICcicCAwJrJwIEAnMnAgUCICcCBgJlJwIHAnsnAggCbCcCCQJuJwIKAncnAgsCdCcCDAJvJwINAmMnAg4CVScCDwJ9LQgBECcCEQQcABABEQEnAxAEAQAoEAIRLQwREi0ODhIAKBICEi0OCRIAKBICEi0OAxIAKBICEi0OCRIAKBICEi0ODBIAKBICEi0OChIAKBICEi0OCRIAKBICEi0OBRIAKBICEi0OBBIAKBICEi0OBhIAKBICEi0OCBIAKBICEi0OBhIAKBICEi0ODRIAKBICEi0OCxIAKBICEi0ODBIAKBICEi0OAhIAKBICEi0OBRIAKBICEi0OBxIAKBICEi0OBBIAKBICEi0OBhIAKBICEi0OCBIAKBICEi0OBhIAKBICEi0ODRIAKBICEi0OCxIAKBICEi0ODBIAKBICEi0OAhIAKBICEi0ODxILIIBFgEgAAiQCAAIAAAt/JwIDBB4tCAEEJwIFBB4AEAEFAS0MBAUqAwAFBSdGSLL1QRe9ACgFAgUAKBACBicCBwQbLgQABoADLgQABYAELgQAB4AFJQAAEEonAgYEGwA4BQYFLgqASQAFACgFAgUtDgEFACgFAgU8DQQDJiQCAA4AAAuNIwAAC+InAg8EAgw4Aw8QJAIAEAAAC6QlAAAQkAAoCwIPADgPAxAtDRAOJwIPBBAtCAAQLQwJES0MChItDAwTLQwNFC0MDhUAEAAPACUAAA7pLQQAACMAAAviASgAA4BJAA4tDA4DIwAACN8kAgAQAAAMACMAAAxVJwIRBAMMOAMREiQCABIAAAwXJQAAEJAAKA4CEQA4EQMSLQ0SECcCEQQSLQgAEi0MChMtDAcULQwLFS0MDxYtDBAXABAAEQAlAAAO6S0EAAAjAAAMVQEoAAOASQAQLQwQAyMAAAR2JAIAEQAADHMjAAAMyCcCEwQDDDgDExQkAgAUAAAMiiUAABCQACgPAhMAOBMDFC0NFBEnAhMEFC0IABQtDBIVLQwLFi0MDhctDBAYLQwRGQAQABMAJQAADuktBAAAIwAADMgBKAADgEkAES0MEQMjAAADbigAgAQEeAANAAAAgASAAyQAgAMAAA0BKgEAAQX3ofOvpa3UyjwBAQImJQAADNktDQEDLQ0CBCcCBgQCDDgEBgckAgAHAAANJiUAABCQACgDAgYAOAYEBy0NBwUtCAEGJwIHBAIAEAEHAScDBgQBACgGAgctDAcILQ4FCAEoAASASQAFDjgEBQckAgAHAAANbiUAABA4LQ4DAS0OBQItDAYBJioBAAEFWgLkG7UeqZ88AQECJiUAAAzZLQgBAicCAwQEABABAwEnAwIEAQAoAgIDLQwDBC4KgEcABAAoBAIELgqARwAEACgEAgQuCoBHAAQtDQIDACgDAgMtDgMCLQgBAycCBAQFABABBAEnAwMEAQAoAwIELQwEBS4KgEcABQAoBQIFLgqARwAFACgFAgUuCoBHAAUAKAUCBS0OAQUuCIBFAAQtDAIBLQwDAi4IgEYAAyYlAAAM2S0NBAULKAAFgEUABiQCAAYAAA5PJwIHBAA8CQEHJwIFBAYtCAAGLQwBBy0MAggtDAMJLQwECgAQAAUAJQAAEKItBAAALQ0BBS0NAgYtDQMHLQ4FAS0OBgItDgcDLgqASAAEASgABoBJAAItDQIBJioBAAEF9IABplnTJ0I8AQECJioBAAEFHwBQEkAkIu48AQECJioBAAEF2o1oYfcmz3k8AQECJioBAAEFHwotJ9yCh6I8AQECJiUAAAzZLQ0DBi0NBAcLKAAHgEUACCQCAAgAAA8PJwIJBAA8CQEJCygABoBEAAckAgAHAAAPoCMAAA8kLQ0BBi0NAgctDQMILQ0ECScCCwQDDDgICwwkAgAMAAAPSyUAABCQLgQABoADKACABAQABCUAABH6LgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEkABQ44CAUGJAIABgAAD4slAAAQOC0OCgEtDgcCLQ4FAy0OCQQjAAAQEycCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAABCiLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAR+i4IgAUACQAoCQIKASgACoBGAAstDgULLQ4JAS0OBwIuCoBJAAMtDggEIwAAEBMmKgEAAQW+Hj//PqT2+jwBAQImKgEAAQUC3G4ngHYSnTwBAQImKgEAAQVFp8pxGUHkFTwBAQImAQCAA4AFgAcuAIADgAguAIAEgAkLAIAIgAeACiQAgAoAABCPLgGACIAGLgKABoAJAQCACAACgAgBAIAJAAKACSMAABBeJioBAAEF6J0J/qERLQ48AQECJiUAAAzZLgiARgAFIwAAELINKAAFgEQABiQCAAYAABEiIwAAEMctDQEFLQ0CBi0NAwctDQQIJwIJBAQtCAEKJwILBAUAEAELAScDCgQBACgGAgsnAgwEBAAoCgINPw8ACwANLQ0KBgAoBgIGLQ4GCi0OBQEtDgoCLQ4HAy0OCAQmLQ0DBgw4BQYHASgABYBJAAYkAgAHAAARQCMAABHxLQ0BBy0NAggtDQMJLQ0ECicCDAQEDDgFDA0kAgANAAARZyUAABCQACgIAgwAOAwFDS0NDQsnAg0EAww4BQ0OJAIADgAAEYwlAAAQkAAoBwINADgNBQ4tDQ4MADgLDA0nAgwEBAw4BQwOJAIADgAAEbYlAAAQkC4EAAiAAygAgAQEAAUlAAAR+i4IgAUACwAoCwIMADgMBQ4tDg0OLQ4HAS0OCwItDgkDLQ4KBCMAABHxLQwGBSMAABCyLgGAA4AGCwCABgACgAckAIAHAAASFSMAABIgLgCAA4AFIwAAEocuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAScy4BgAqACC4CgAiACwEAgAoAAoAKAQCACwACgAsjAAASQigBgAUEAAEDAIAGAAKABiMAABKHJg==",
      "debug_symbols": "7Z3djty2DsffZa/3QhJJUeqrFAdFkqbFAkFSJOkBDoq8+/HOrj82I486lGyNNbwpuq3/Q/FHWaIoW/7n4feP7//+87enz398+fbwy6//PHz68uHd96cvn4e//vnx+PD+69OnT09//rb8zw/m+R/W4Unw7a93n5///vb93dfvD7+AcfHx4ePn34d/tcTDT/zx9Onjwy/Wuh//eXywACJVSKkcW/+qGv41nKkQRCqRLRLZIpaovBOpRLZYZIu9RBWsSEUSVTQClbPJvmERzavKkrVvVI/nVxuEMF5ukON0vfcnI87tYYR3MAJ7eAJ7eIJ7eELJPmkJxz5pvfVnfZJQpIoSlQeRiiWq9MiTVXmJKojIp0eenComRzkbI40jj7GQ6UrBjtNlAJyuBbIvFvzGFsCYzS3g5hbC1hYsbG5hcx9WJqOaFmr0VsOTBX5j4TF1f8I0aJObr4bT/QmAN9ae0LI98aw9CDfWnhvjQ5vf9bT5Xe83v+v95nMUbz5HMW1tIWzuQ9h8ng07359M7vVa9nNKPiS8p9ZEf0OtwSp51DWtmcos7N2b1iTGOTuPc9aHzNXE48UU5zFxWEKf3KS7cBPdfbjJd+Em3Uen9ckhCONYqXBkMePl0BjEsTmISxs22XqKKytkn7gavbevV6Nn82NRNEkAJzOGJ5CzP95WWNDT/s56iJOzwWWcHepyY0VpqJ4trkZK/rafmsLLlg9XP7vLeF/uxrtyN7SObsy4y34cd5jnuxxfbsXoDt16PnDrydj9W89umrGYOdP6ocA4zhBgfMzcKMNEzNOczOHnG4WsuS936a7cdY2jG7DkVnThyK1P7+YfpvUNBvEw7xgGyqW+ZGHs+sNd7S+nvrntRUJ7X+76u3KX7iu6dF/R9fcVXR9v3t04ueus+7n9fPszy8X2h9vvbj7M7YfL3c3HqQZv5mY7+5I/htsfSar5GlvE1c++BpvzFXDql8AZXzm6sSUcQ8g1JDfoRFI4a3C8MQpnHY72nHU4VnvOBTjac9bhOLgXOCdv+Z68BXdX3vq+vJ0aHgzmbnM37MmObkY714ajSVwcrJ/2b52ZfXSc3BoOUy0QAywencTT3rZHVOwtsAfF3gA7dTZdHgV7Z/P2zWCfnp0aImDOsPvOEoijYNdMpgV27qxwdxTs2ttbYA/a25tg197eAnvsrEB6FOyo2Ftgj4p9f+xstDjQBLuWwlpgt1ocKMd+AqkpYR2QTpc0lUB2tmO+HUhnZ5CLc0XSIypHHK8e2gSZq4HGFzhwMfo6TLXZxpG1Wz5pOFz8HE7UAaancJIOc12FUwfbrsKpa++ewulRw9lTOPXu7CmcrBW3rsKpj/n0FE7dYu4rnLpQ6Sqcmgr1FM6oqVBX4dRNzY7CGYxulnYVTt1R6SmcVhcqXYVTFypdhVMXKj2FM/1NQw3nUcOpC5WewtnbmRH3Hk7dUekpnKgLla7CqQuVnsJJ+pJhV+FEDWdP4dSFSk/h9Lrf2VM4We/OY4XTwRzO52/KvA2nvoF+sHDy9H1ZxwA/hTMa1HD2FE4dbHsKp76J31c49eGSnsLptCrUVThRw9lTOHWh0lM4Qe/OrsKpC5WewoktFirWzeHMfcoWjB3bAsOvZ66uep5aRFY4q3CanHlzGDhe4azC8dpzLsDRnrMOh7XnXIBDCmcdTlQ4q3ACKpx1OEHhrMJp8or7YeDcz/JhcNcacz+z84u/95Oqnfxt8knjDf09wlNYA/XO0rqDUO8sXzwGdddZOnEQ6p1luMegDtrXW1DvLCc/BnXsbGVwEOqaObagrpljA+qks2kL6jqbNqDuO3tm4yDUO6v2HYM6a82xBXXNHFtQ18yxAfWgmWML6lpzbEA9aubYgrpmjvtTt709jXAQ6po5tqCumWMD6haVegPqmjk2oO40c2xBXevrDaj39k7kEY4nG5qudZgtqF98/Xdous6mDaizjjAtqGsdpgH1oDt4LaijUm9AXWfTBtR7ewnxINS1r+9P3RnNHFtQb5E5xvHl4mGAgzccT21q8oXUXJvi7bWpxemQMY791Bn7Lw4sG9tC4Bedj8KLBw0+AOcMTCedvT0XLeUBhqm0gwHnuzh55FogHoeTQIGXF794yw28ncYsZ8hkvI3TuBKjPY9Wi+phnAuahuz5PdDiILNcm4hur02+fK063K12vBr8fC/Q61RSoeCWM1GhzpEzEWwFE2GacxHM0kTi4ujGUd7FRZ5gPafyBApjnNkbujweMQQYL0aXGbysBR7v/mGjYHFKwjh8RaNkVsj4vcnEcQ4Ds/D1mcxzg8DgjTWowlcDKjeI920QDPsR0+IhYqYzBwNjjwuGQqYzBxjbwSGaXGfGQFNnJud/7szgUMmkycDOAyA4Hi8Gt0wBkmSsweksYbOY2GzkXRecl7eggaxCLIfoFWIxRK+3cwWIqBDLIUaFWAyRtSdWgBgUYjHE4BRiOURNccohRk1xKkDUiaUCRJ1YiiGiAYVYDpEVYjFEq1WcChA1xSmH6DTFqQARFWI5RK3ilEMETXEqQNQUpxwiahWnAkRNccohkqY4FSCSQiyHqClOOUSvKU4FiFpPLIfImuL8m9Md4vhUvwND5xA12S6HGLSeWAGipjgVIGqKUw4xaopTAaJOLMUQyejEUgGiVnHKIeqWaQ2ImuIUv/NPumVaAyIqxHKIWsUphwhaxakAUVOccoioE0sFiJrilEPULdMaEFEhlkPcPcUBmCBSDmLD1+lp/1dHD0MmKpk0mQqfb3Top01RXJw3cewzaKjCsbidkqnxEtx1ZC6fPUM13oWq2SBfo75btUE1aqXXNOgwZ9D4GucWXUWmw+defIVP/ihE5xViMUQwCrEcIinEYoioPbECRFSI5RCDQiyGSJriVICoKU45RK8TSwWIOrFUgBgVYjFEBoVYDlGrOOUQg6Y4FSBqilMOMWqKUwGiVnEqQNQUpxgiG01xKkDUKk45RKspTgWImuKUQ3RWIZZD1BSnAkRNccohAirEcoia4hS/0cmoyXYFiFpPLIdImuJUgKgpTgWImuKUQ/Q6sVSAqBNLOUTWKk4FiNoTyyEGTXGK3+hk3TKtAFG3TGtARIVYDlGrOMUQg9EUpwJEnVjKIVpNcSpA1J5YDtFpilMBIu4N8SBHYYT990GPQmb/90GPQmb/lzwPQ6Z8xrPopyNRLLI3i+tj4nri8ce9sYtrUw6g93YcUj1nvA1kRmcDOXvma4WNrmt99XacbDy4nK84HeiCZOxlX6OPYw+L7Ojc1+RY4Px03sfzBJRz1kSD01wZ3dkRMyH9jlt1K7iLlbiHFd7Fl/QXMcC4KVGyxG+snGTpukpOFtNPa1qcEy2yNusTQph8Qj7zKaZz89pW0s/7Vbeyiy+wiy+wiy/pEwZsjOOI74yFjJUwpdwB5oEeyGYGbv/m2lNz0q+Zt2tO+Sw+7NbFOQmJb+a1k40K7zPnbdD2NtjuYGMHP8IO8Qg79Ku4gx9x83g4Y8wONrBCBhumcsnzZ2Iwk8Fa49w8Mmdz2Hr5+uBtbOBtnC63bxKxzb21LWJL86wbcrEdcr9p6eMXJav0+oTiiCb6xfQ2elvhKLoSb6176+2pTRUOJavfpgo1nThVDFxcVDyTlQs7lC7GBgEuKxfhpioXztSo6XRKpnzWBmOmg0ENZqpd1sI8aHrMkGl3JK4zFSpAvZLh2ybDMxmXvUGmVZh1i6UngH3x1bs78vWO4so14jpt4YEJOV+NhzlZXCz3n8vC51eH6Q6M83wAg+6l8Xzgxgd75Mb7Azc+Hpl8PDB5aw5Mflh2HLnx8cCNr7DMb9j4cNONn355qC+8aXwi82jz8rQb0iNFWIgQb/sWOgRCvZFLEdJtrzYOgfC21zxHQOi1FxYjvO1VyBEQslGEpQhREZYi1KSmFGHQ6aQYoU4npQhvvKh5CIS3XeA7BEKt1BQidAYVYSlCTWpKEVpNaooRaqWmFKHTpKYYoSY1pQhBKzXFCFERliLUpKYUYYXzo+8eoSY1pQhJk5pihFovLEXI2gvzJ6TCjBDpDGHQYlfZkU3OVTiV8u4Ral5YiBCMFruKEeqMXIrQapmhGKFOJ8UINakpRei0FxYj1KSmFCHsndTYMB3LsFwtpRHS4kTDsFieng50OIfox1M0eNGM5/djT66iuR9Xw924unuRp52rvm4xxi4OQjj2uRxQ4118S2Yi43lJ5mSiwsFjORMVzh3Lmgibm4gVtk8sj0ccgTP+ci8FwvEYLVie7bFySLmbu9Lye0Yrh5S3OzcEajwkdzscK55GgQaVzAoZ7TMrZGqs+S3OX0Mw4eeBD2usiTMm3PZeVPgIADg7HWvjqHKSwTAlGQFyncIsjoBLdIoaz5ts6WuzhArTa6VhMTktadmGN2heZCiTRZGMYPsTvwcrYQ8r6bdNq1vhPazwLr6Eq6P/IgsiWZRZiyJrZEAmk1mzMmtWZs3JrDmZNZBZA5k1lFlDmTWSWSMWya4foV5kMmsss8Yya+lT1vIyEsmikclQJosSmZcNQV42BHnrZDJRuL2zMpkXycDIZCSTycKNKJPJwi0bubxs5PKykct7WbhZ1rlYFu4g61xBFu4g61yy5MnLkic2TiYTdS62ViYTdS52RiYjmUwUbgaUyWThluVcjLJwk6xzkSzcXta5vCzcLOtcLAs3yzqXbNnHsmUfR1m4o6hzBWNlMlHnCtbIZCSTJcMNMJWtANj/uFwU4LHYzPO2E/LL7zve9vfT6Vi9309X3Cr+Pm78+xvHlzZuf7rMV+/302lhxd/32/5+2Lj9YeP2p0fyir+/bf8ZqqEb//6292+0G7d/4/klum3H/whm49/fmD9szF9PNM0/6wlmagUsaLw+6xn1RNNyhNoLSxGyHjVSijDoO0DFCLUXliKM2guLEaIizL5eH92E0NA5Qn0TrQwhGKMH3hQj1LywFKHVo0aKEWpSU4xQp5NShE6nk2KE+mJzKULQXliKELVeWIqwwoeTLQJOT8IjxuXeekxdH+zYJBuWrxHbpK9mfn/FYu7q4OzIMThyGY6NltVQ44vPSv1q6kH7egPqFapwSv166qTUd6dujfb1FtS1r7egHpX67vl6jW/IK/XrqQelvj91p/l6C+peqe9PHTRzbEFdZ9MW1HU2bUC9wleDlPr11LWvN6BOWl9vQD20oO7NTN1mOBLgeH4tAWcOZxvYjQ0PBkOmIS5Mh466aOe3Q6I5boUnOo1nV/HU+7OneLomdW+N52bxtEbj2VU89f7sKp5O78++4okaz0PF8/L607mo8ewpngAaz67iqevPruKJVuPZVTx1vdJXPDUf6iqepPlQX/EMGs+e4un1/uwqnqz7nz3FE9InJFMYRbT4XhuQfRVFgSj9rJW3I1IPPiEKAhFJLKVPbc+JvEDEEksssZQ+co6mPu8NJ0QoEUWBKEosRYGllY+P5kRBIEp/E8dPN6xndy5Kb6LkRCQQpcuHOVEQiFACIv1VAnKjiBz/PIIhh+s16e8RZDQCO1FgJ15vh9JfT8loBHYsCDTxeo27vh9Q+m0BmnIH8vZcgwJNvF6TnvsojmmQt+5cw9dr0h86yWgEdrzAjhfYSU+VGY3AThD4szIeXNREQT9Ym/AuaPzafHdJs/IBILbjWeCOAc5VSQrWz4fC+HB2P3j0ElX6axJZVZSo0utWy/P33znSuSpIVOk1VVblJap0SphVoUglohFF5KPE1spXx7IqCXm2RqRCkUpEw4loOBENSNuK8wsD0Z2r0t/byajCil9mGtms8eFc5SWqdBZiLcyHZJE9VwWJamUUzajIilSUVvn5k+ThnMbKGIVmKuigObe1MkblVChSBYkq/RaApflL8UTmXMUCVTQSW3FltMmpSKJKf5k1qwoSVXoBm1VFiSr99a2sSmSLVvyavq5iKZ7lbNFbkcpLVIwiVZSogohGYIkqChgOw0P6/oJ5JgKw5yoSqaJElV6rZ1UsUa2MADmViAaIyIPMlog8isijiPzKbD5vgljw5lzFEpVHkSpKVEwS1UrmkFMFiWolB7iYOQwqQUaEK2eoZVUSWy49zvP0STBGONOkT9aLOHbdSHSuiVdrIP3Rg4yGr9ekj7W/nPsPKi9RpYv/WRVJVCCyBSJbKLKFIlskskWieHmRLS/ya2XszKgYRCqWqILoTkl/N/TiGAPpM1OjGWua0SU0149LmL6LL9pZ2cDLaFCgCddr0pWWywzg+jFzZcPvsiZ932Y0gph6gR0vsZOe02js15HPVhIre54ZjcBOenV0WZPOcTKa6+2s7F9mND4Tn4QmPa9fjClZf73GCey46/Ohlf3Lyxo0As3148HKXmRGE67XeBBoBHZY4A8L+k4QxCdc2Q9+DH/9993Xp3fvP338Niie/+ffnz98f/ry+fXP7//7a/w/778+ffr09Odvf3398uHj739//fjbpy8fnv/fg3n9x6/R8ONQ0Bva8hyM4PAxAA5/naqQntyjJ37+8/m2YDKPTG5ow9CO/wM=",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "mint_giga_root",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_historical_giga_root_by_index",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "7Z3djuw4cq3fpa/7Qvwn51UMwxiP5xgNDGaMmfEBDgy/+8kqlZRZnaxUlTKoDJHfTWPv3WIytNYiGbFEif/zy3/8+d//+z//7be//p+//eOXP/zL//zyl7/96Y///O1vf7387X9+Mf793/7xX3/869tf//HPP/79n7/8wfpcfv3lz3/9j8sfQ/D/++sv/+e3v/z5lz8YU/731/urrZ+Wq22069VlqlzsphI+LnYm5scXm1CC/7j68ueby22KtUiMjUskxofr1cXVft1Ft/y4N9Onq//1119MAJqvoIlA8xU0CWi+gibXobHuCk3YgMabuADp7XS9Oob3HkrrHuxU68H4nMoK62S2CDbOmuVyF+LN1TUSzOTWkC5/zvE2phpnqVxJy/buFsz5b8FWbyF4t8YUQp4+3cJbM1drli7NPlqlkMza6G2YVm7kKnFj3LWHWB9u611M12HsTG3wpOKXcZxKcRsD062/fBHp9dpayDaZde5Jzj2+2KS0/PCFg7Bx8WSupN7OJf4dbQ/aB6Idnkfb5Lx0YG8m+zraIaTl6pjNFW9jbQ3vmJY48s3UcrmNt9jjiWOvrvcpxmUFT8nEx7EXk6683gQz1YLJ1izCvcyLdkO4/ck8A/eRcBfgPhBuNz0N9yUvC2teFuMnvN96MM17sM17cM178M17CM17iM17SM17yM17eH6CMzavJbW35vc9+Kl5DwJjurh1li7RbczSl8l2maTN7Rztql6GWYtva9Onq99ityeO3Z04dq86dmfX2P197OHEsccTx55Uxx6usd9Ui0vs+cSxl/PGHibdc+RN7PYudt3r6lp1WFviXey619XHseteVx/HrntdvdF7uZvfw9Hral5/+fJMIGwE367Yt2VFxU1b9btbITTOmWeK/RCB+0i405hwv8jKChm4j4S7nBXuS/BRIkk0q0VSbqD8YtH06xOdWyRzdQtEjkvsNucb8+X98U805w3dnjd0d97Q/XlDD+cNPZ439HTe0PN5Qy+nDT2ddzVN511N03lX03Te1TSddzVN511N03lX03Te1TSddzVN511N83lX03ze1TSfdzXN511N83lX03ze1TSfdzXN511N83lX03ze1bScdzUt511Ny3lX03Le1bScdzUt511Ny3lX03Le1bScdzUt511NzXTe5fTyOPvEsR+9oF7DyTevNb/F/h6O0xXO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",
      "brillig_names": [
        "discover_new_messages",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_chain_id",
      "is_unconstrained": true,
      "custom_attributes": [
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_chain_id"
      ]
    },
    {
      "name": "get_balance",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_balance"
      ]
    },
    {
      "name": "hash_commit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "destination_chain_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nullifier_preimg",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "parameters": [
          {
            "name": "log_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2588366281349374274": {
            "error_kind": "fmtstring",
            "length": 136,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "3473764466780631008": {
            "error_kind": "fmtstring",
            "length": 106,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5533887251808526417": {
            "error_kind": "fmtstring",
            "length": 120,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "process_log"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "initializer",
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "giga_root_history_size",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "L1_contract",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "15748358241952124793": {
            "error_kind": "string",
            "string": "wow too big!"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "receive_giga_root",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "giga_root",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "receive_giga_root"
      ]
    },
    {
      "name": "get_historical_giga_root",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "burn",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "destination_chain_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nullifier_preimg",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAQAAAAAAAAAAAAFAAAAAAAAAAQAAAAAAADKLEBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAAAAJb1QjGji\nTJ9/VKcyhE6WQnWQLF+8wnoy3Dm4Y7CJIdIIljvIdh5bwTmgzgz3yQoZlxUgrwYYty00Jz2TZMvA\nwylQGMNFt5CXVbBwukZPXqx7f8UzpHi6QBR/TpxmuSm4IosD0i4fVLvCofHbv14JDtb0AOjDalwn\n7vlUpYCtdu0rlMLUqESzEv+52TDF472bdu3W0jXCO6FU9GdmqodnWhQVF3SjZWzc4SsUgI9t9zMi\neCPLNf4aRgcCrp5Hi7xgClTyNd/94IQyes59y/6iSbZD61efNuElgLvbS98J4q4wTh69srUeyNUK\n2xL+W65CenYDJa/dtZOGeNIbE3AaqiiUPZFbwI+cYd6jonrb0KECojbxinsNqsJNzgmEfRPdBwzD\nzZ6QPrd/0fWijxEcVr8s10wdwKZHBHT/mjkynAAQruZC8vBR/s1YnRunaCIMl2TurR9JWxR2JiBw\nwZ3ZdxRNkn01C0HGd9a0gLYueZ+MnVxGEkqN5Xf4hThEyVVZIuSmLVifXcWOAD4X0sKeZqqcjXq3\nWBuYEO2nPlPhfd8OP4PTyf+mJHwLpRXOLm9SrLCVbfb6d5ltuCSwof5icAk+ps4l0iidGzqEEel0\n4WNIxiEo91BZ8VnuZefYs7wZDxS3i9rTZKuMHj8DAAet/OJUWGqCck6/7/wLHapiW7owMMaw5g8U\nQ0SZrASVF07krrxnbENRm7g/o668fHjQ3hN6LWTtLbsBYXbXD0ozI071GXj7jwlMkqy3zlfZITlT\nLYjp6uzwCceYRT3Y9rdYxNFQEZ4gQCfO6fuYvZ3PWvoZYgLyqMl/GFATA0a6HQo6wmHwR0ATudPq\nzghioq2xdCgWjE/0BqUNWdQS5VtN9TIuNEklQwWBMiCajiwb9WUaLRCBgAfJcCIVWZBaHgFYILR6\nyg/v7f6TjVOnYsi2LMsUZdz9OQ+TfCxqtDA+kbE0hH7Cnb3Ar6jWcpI/tZTUuiqRJyzdD4DaqPAm\nl680UGX3Z96v0a/v2f+77wJ3q4FUCR1AZlXR+39BYg6WRXERPlA5nv7CAPXHT5VNxeHkFlEnw4gF\npxRkCcepNnq+rJjPUQ4Tp+cYj9Lf8zZ94XtpJDAMQUqj4OCYUcSIukT6BeNegAZdA9IHfV2U2Bc6\nM82MGYFvevcVGiTyRCGK+AATtcKw2uxqKP1hb9f4JygWa8YhQP/qj+EHVKhTbDRkSjJfSLUxBjaq\n448Zdxnbl2H9uAAYOC3n4Hsl3fdwOpBJUGu2m/3ndgU53uep/cY66kvrJ0txpsxkcqw9GuJWAuae\nsXIWJ6ydMT7OWBK35SaVffcNyQByZsZJYHg6PioGG5mf0B9La64Ny9lEW7P38VZdUySehvmqcfMP\nMdOO73XwRHisf8aYQOVzkjqu+XAwvxNlDE+cMgY2HKC3HUcRty+OHMpZLXPDWDwbme6c7z5lKycu\nojo38jPagoXSjGK8StF/mRjW16wfl44FK0467svlZxR2id+dntLkhd+4FLjAk6cmpWJPRt0O64Aj\no2BVvx/nIXXMQgutgfInCsOxAoOo3j/oylxYqBJH5fZxv+7cxgEBtTOwoR5YllA+jEcPA3n2JCeS\nHLRV7r2HQIao2w/GZBK9qPQma/ZIxwzD1R0b41xZb9zQkgf72FvoeuXy7NocDGYBy7l+XVGQ9QZh\ni2lqosRLGxCt3YM1/2ZCke+kEOkDeuN1kk35M6N/IELtrhNmZ6SnHRQvuD9WgBADZtrZgyMh4b/n\n9WM9VFzYEzh9oRxgv9apMEgA+2Px1BPpKVmQBS7fBib3memFfXi+akxofbrwGUt5jTqujJUKuUeI\n+aQIHPd6s6x13yjy1c9N93WBdkKbktGV7RTVdR/6kmlOMAtaDT7C5fKzBDrVkn917iJOe4uwdsAd\nnRXmldtJYoR5L0k+SqJepx+Q/5V+KqqeomSYTxXLfqssT2ml2Ailb00MDfwyFqfkTkJc7/GGGfQr\nfw/rg2SOEbH+DYvGtgxvIQt+Bww1reRIgasMq+ppQb4/zeTE4IFhvnl5SCKu+7P2F0xNqsxv6+gt\niDGpBETvEX32GkvxinRGtU2OzdDlJyENPQ9wXJw7Qm4veGR5CujPFMTyBusHozGX/1z2u6wLrwcD\nm+cLVXtvDU1Z+xKAoZlYPQqQ5tVT5L1kSbWO9QehChGFSw0wrqddreiukl/tbL8F77PitlsEveca\nM00v6zMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAACEjCLODpE+FYyUgRnie8IcfREuEMbUYJjUhYkwfYwD5wo3X9STtdwVk/o4M1K\nF3RyQ8sMi3kjpCRIXlDVRHn6wgDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04s\nAZaN5cMkgqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJ\niS18GKk8Pa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "hash_unique_note_hash",
      "is_unconstrained": true,
      "custom_attributes": [
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "note_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hash_index_in_tx",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "hash_unique_note_hash"
      ]
    },
    {
      "name": "get_all_giga_roots",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4096,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_all_giga_roots"
      ]
    },
    {
      "name": "transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_note_proof",
      "is_unconstrained": true,
      "custom_attributes": [
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "block_number",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "note_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::oracle::get_membership_witness::MembershipWitness",
            "fields": [
              {
                "name": "index",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "path",
                "type": {
                  "kind": "array",
                  "length": 40,
                  "type": {
                    "kind": "field"
                  }
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_note_proof"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "kind": "string",
              "value": "WarpToadNote"
            },
            {
              "fields": [
                {
                  "name": "nullifier_preimg",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "secret",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "destination_chain_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "amount",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000003"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "ValueNote"
            },
            {
              "fields": [
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "WarpToadCore"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "giga_root",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "giga_root_history",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "giga_root_history_size",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "giga_root_history_index",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "L1_contract",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::mint_for_testing_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::mint_for_testing_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::mint_giga_root_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::mint_giga_root_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "destination_chain_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_preimg",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::burn_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::burn_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "WarpToadCore::get_historical_giga_root_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::get_historical_giga_root_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "destination_chain_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_preimg",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::hash_commit_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::hash_commit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::get_historical_giga_root_by_index_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::get_historical_giga_root_by_index_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "giga_root",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::receive_giga_root_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::receive_giga_root_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "giga_root_history_size",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "L1_contract",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "destination_chain_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_preimg",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "block_number",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  },
                  {
                    "name": "burn_tx_first_nullifier",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "note_index_in_tx",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::mint_local_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::mint_local_abi"
        }
      ]
    }
  },
  "file_map": {
    "102": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "105": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "106": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "107": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "111": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    discovery::private_notes::MAX_NOTE_PACKED_LEN,\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{\n            stub_registry,\n            utils::{create_message_discovery_call, find_and_transform_top_level_unconstrained_fns},\n        },\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    find_and_transform_top_level_unconstrained_fns(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform message discovery, resulting in new private notes, partial notes and events.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll\n                // not be modified by the macros that alter unconstrained functions. As such, we need to manually inject\n                // the unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_ciphertext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let message_discovery_call = create_message_discovery_call();\n    quote {\n        unconstrained fn sync_notes() {\n            // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n            // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n            // unconstrained execution context since it will not be available otherwise.\n            let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n            $message_discovery_call\n        }\n    }\n}\n"
    },
    "112": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "116": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "119": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_public, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn find_and_transform_top_level_unconstrained_fns(m: Module) {\n    // Top-level unconstrained fns are contract entrypoints, but they're not explicitly designated in any way. They're\n    // the fallback case for a function that matches no other rules.\n    // TODO(#12743): improve this\n\n    // We first find non-standard contract entrypoints, i.e. functions in the `contract` mod that are not private or\n    // public, but which *are* contract entrypoints (i.e. they're not opting out via the #[test] or\n    // #[contract_library_method] attributes). Ideally entrypoints would be explicitly designated instead.\n    let non_private_public_entrypoint_functions = m.functions().filter(|f: FunctionDefinition| {\n        !is_fn_private(f)\n            & !is_fn_public(f)\n            & !f.has_named_attribute(\"contract_library_method\")\n            & !f.has_named_attribute(\"test\")\n    });\n\n    // TODO: uncomment the code below and emit a warning once support for them is added to Noir (tracked in\n    // https://github.com/noir-lang/noir/issues/7714). We can't simply print a message since that'd otherwise break the\n    // output of utils such as `nargo test --list-tests`.\n    // // We don't expect to see any custom constrained entrypoints (i.e. private functions created outside of aztec-nr's\n    // // #[private] macro, possibly resulting in a non-standard interface).\n    // for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n    //     !f.is_unconstrained()\n    // }) {\n    //     let name = f.name();\n    //     warn(\n    //         f\"found private contract function '{name}' which does not have the #[private] attribute - make sure you know what you're doing!\",\n    //     );\n    // }\n\n    // An unconstrained contract entrypoints is what we call a top-level unconstrained function, to which we apply the\n    // appropriate transformation. Ideally these would be explicitly designated as such instead.\n    for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n        f.is_unconstrained()\n    }) {\n        transform_top_level_unconstrained(f);\n    }\n}\n\npub(crate) comptime fn transform_top_level_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "121": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "122": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "126": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "128": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "131": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "134": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "135": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "137": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "139": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/block_header.nr",
      "source": "use protocol_types::{\n    block_header::BlockHeader, merkle_tree::root::root_from_sibling_path, traits::Hash,\n};\n\nuse crate::{\n    context::PrivateContext, oracle::get_membership_witness::get_archive_membership_witness,\n};\n\n#[oracle(getBlockHeader)]\nunconstrained fn get_block_header_at_oracle(_block_number: u32) -> BlockHeader {}\n\nunconstrained fn get_block_header_at_internal(block_number: u32) -> BlockHeader {\n    get_block_header_at_oracle(block_number)\n}\n\npub fn get_block_header_at(block_number: u32, context: PrivateContext) -> BlockHeader {\n    let historical_header = context.historical_header;\n    let historical_block_number = historical_header.global_variables.block_number as u32;\n\n    if (block_number == historical_block_number) {\n        // If the block number we want to prove against is the same as the block number in the historical header we\n        // skip the inclusion proofs and just return the historical header from context.\n        historical_header\n    } else {\n        // 1) Get block number corresponding to the last_archive root in the header\n        // Note: We subtract 1 because the last_archive root is the root of the archive after applying the previous block\n        let last_archive_block_number = historical_block_number - 1;\n\n        // 2) Check that the last archive block number is more than or equal to the block number we want to prove against\n        // We could not perform the proof otherwise because the last archive root from the header would not \"contain\"\n        // the header we want to prove against\n        assert(\n            last_archive_block_number >= block_number,\n            \"Last archive block number is smaller than the block number we want to prove against\",\n        );\n\n        // 3) Get the header hint of a given block from an oracle\n        // Safety: The header is constrained to be in the archive tree below.\n        let header = unsafe { get_block_header_at_internal(block_number) };\n\n        // 4) We make sure that the header hint we received from the oracle exists in the state tree and is the actual header\n        // at the desired block number\n        constrain_get_block_header_at_internal(\n            header,\n            block_number,\n            last_archive_block_number,\n            historical_header.last_archive.root,\n        );\n\n        // 5) Return the block header\n        header\n    }\n}\n\nfn constrain_get_block_header_at_internal(\n    header_hint: BlockHeader,\n    block_number: u32,\n    last_archive_block_number: u32,\n    last_archive_root: Field,\n) {\n    // 1) Compute the block hash from the block header\n    let block_hash = header_hint.hash();\n\n    // 2) Get the membership witness of the block in the archive tree\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let witness = unsafe { get_archive_membership_witness(last_archive_block_number, block_hash) };\n\n    // 3) Check that the block is in the archive (i.e. the witness is valid)\n    assert_eq(\n        last_archive_root,\n        root_from_sibling_path(block_hash, witness.index, witness.path),\n        \"Proving membership of a block in archive failed\",\n    );\n\n    // 4) Check that the header hint has the same block number as the block number we are looking for, ensuring we are actually grabbing the header we specify\n    assert_eq(\n        header_hint.global_variables.block_number as u32,\n        block_number,\n        \"Block number provided is not the same as the block number from the header hint\",\n    );\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::{constrain_get_block_header_at_internal, get_block_header_at_internal};\n\n    #[test(should_fail_with = \"Block number provided is not the same as the block number from the header hint\")]\n    unconstrained fn fetching_a_valid_but_different_header_should_fail() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_by(4);\n\n        // We get our current header for the last archive values.\n        let current_header = env.private().historical_header;\n\n        let target_block_number = 3;\n        let bad_header = get_block_header_at_internal(target_block_number);\n\n        // We pass in a different block number than the header received\n        constrain_get_block_header_at_internal(\n            bad_header,\n            target_block_number - 1,\n            current_header.global_variables.block_number as u32 - 1,\n            current_header.last_archive.root,\n        );\n    }\n}\n"
    },
    "141": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "143": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "144": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "145": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "147": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_membership_witness.nr",
      "source": "use protocol_types::constants::{ARCHIVE_HEIGHT, NOTE_HASH_TREE_HEIGHT};\n\nglobal NOTE_HASH_TREE_ID: Field = 1;\nglobal ARCHIVE_TREE_ID: Field = 4;\n\n// Note: We have M here because we need to somehow set it when calling get_membership_witness function and one way to\n// do it is to set M here and then set type of the return param, e.g.:\n//\n// `let witness: MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> = get_membership_witness(...);`\n//\n// Another way to do it would be to add \"type_hint: [Field; T]\" as argument to `get_membership_witness` but that's\n// a bit too boilerplatey for my taste.\npub struct MembershipWitness<let N: u32, let M: u32> {\n    pub index: Field,\n    pub path: [Field; N],\n}\n\n#[oracle(getMembershipWitness)]\nunconstrained fn get_membership_witness<let N: u32, let M: u32>(\n    _block_number: u32,\n    _tree_id: Field,\n    _leaf_value: Field,\n) -> MembershipWitness<N, M> {}\n\n// Note: get_nullifier_membership_witness function is implemented in get_nullifier_membership_witness.nr\n\npub unconstrained fn get_note_hash_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n    get_membership_witness(block_number, NOTE_HASH_TREE_ID, leaf_value)\n}\n\n// There is no `get_public_data_membership_witness` function because it doesn't make sense to be getting a membership\n// witness for a value in the public data tree.\n\npub unconstrained fn get_archive_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<ARCHIVE_HEIGHT, ARCHIVE_HEIGHT + 1> {\n    get_membership_witness(block_number, ARCHIVE_TREE_ID, leaf_value)\n}\n"
    },
    "149": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "150": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "151": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "153": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "155": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "156": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "157": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "158": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        embedded_curve_add_unsafe(point1, point2)\n    } else {\n        // In a constrained context we need to do some black magic in order to satisfy the backend's\n        // expectations about the inputs to an `embedded_curve_add` opcode.\n        //\n        // TODO: document this better.\n        let x_coordinates_match = point1.x == point2.x;\n        let y_coordinates_match = point1.y == point2.y;\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n        result.is_infinite = x_coordinates_match;\n\n        // dbl if x_match, y_match\n        let double = embedded_curve_add_unsafe(point1, point1);\n        result = if double_predicate { double } else { result };\n\n        // infinity if x_match, !y_match\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "160": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "165": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // docs:start:insert\n    pub fn insert(self, note: Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteType + NoteHash + Packable<N> + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "167": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "168": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "182": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "183": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "184": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr",
      "source": "pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n"
    },
    "185": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "186": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "188": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "189": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "191": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "193": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "194": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "197": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/poseidon/bn254/perm.nr",
      "source": "// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n"
    },
    "215": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "22": {
      "path": "std/hash/poseidon/bn254.nr",
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n"
    },
    "23": {
      "path": "std/hash/poseidon/mod.nr",
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n"
    },
    "24": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "258": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "259": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "264": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/block_header.nr",
      "source": "use crate::{\n    abis::{append_only_tree_snapshot::AppendOnlyTreeSnapshot, global_variables::GlobalVariables},\n    constants::{BLOCK_HEADER_LENGTH, GENERATOR_INDEX__BLOCK_HASH},\n    content_commitment::ContentCommitment,\n    hash::poseidon2_hash_with_separator,\n    state_reference::StateReference,\n    traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arrays::subarray,\n};\n\n// docs:start:block-header\npub struct BlockHeader {\n    pub last_archive: AppendOnlyTreeSnapshot,\n    pub content_commitment: ContentCommitment,\n    pub state: StateReference,\n    pub global_variables: GlobalVariables,\n    pub total_fees: Field,\n    pub total_mana_used: Field,\n}\n// docs:end:block-header\n\nimpl Eq for BlockHeader {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive)\n            & self.content_commitment.eq(other.content_commitment)\n            & self.state.eq(other.state)\n            & self.global_variables.eq(other.global_variables)\n            & self.total_fees.eq(other.total_fees)\n            & self.total_mana_used.eq(other.total_mana_used)\n    }\n}\n\nimpl Serialize<BLOCK_HEADER_LENGTH> for BlockHeader {\n    fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, BLOCK_HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n        fields.push(self.total_mana_used);\n        fields.storage()\n    }\n}\n\nimpl Deserialize<BLOCK_HEADER_LENGTH> for BlockHeader {\n    fn deserialize(serialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = subarray(serialized, offset);\n        offset = offset + last_archive_fields.len();\n\n        let content_commitment_fields = subarray(serialized, offset);\n        offset = offset + content_commitment_fields.len();\n\n        let state_fields = subarray(serialized, offset);\n        offset = offset + state_fields.len();\n\n        let global_variables_fields = subarray(serialized, offset);\n        offset = offset + global_variables_fields.len();\n\n        let total_fees = serialized[offset];\n        offset = offset + 1;\n\n        let total_mana_used = serialized[offset];\n\n        BlockHeader {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees,\n            total_mana_used,\n        }\n    }\n}\n\nimpl Empty for BlockHeader {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0,\n            total_mana_used: 0,\n        }\n    }\n}\n\nimpl Hash for BlockHeader {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = BlockHeader::empty();\n    let serialized = header.serialize();\n    let deserialized = BlockHeader::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = BlockHeader::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = BlockHeader::empty();\n    let hash = header.hash();\n\n    // Value from header.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x28e48e620bc00817609b5fc765bc74864561f25a3c941b33e5ee05266b752839;\n    assert_eq(hash, test_data_empty_hash);\n}\n"
    },
    "273": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "275": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "276": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "277": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "286": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "29": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "290": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "292": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "293": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "302": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "313": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "327": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "331": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "332": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "348": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "349": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "351": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "357": {
      "path": "/home/jimjim/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "358": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr",
      "source": "use dep::aztec::{\n    context::PrivateContext,\n    encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n"
    },
    "360": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/balance_utils.nr",
      "source": "use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UnconstrainedContext, note::note_viewer_options::NoteViewerOptions,\n    state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UnconstrainedContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n"
    },
    "361": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/filter.nr",
      "source": "use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n"
    },
    "364": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/value_note.nr",
      "source": "use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n"
    },
    "46": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "47": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "54": {
      "path": "/home/jimjim/Desktop/warp-toad/contracts/aztec/WarpToadCore/src/main.nr",
      "source": "use aztec::macros::aztec;\nmod types;\n// from\n// https://github.com/privacy-scaling-explorations/zk-kit.noir/blob/fa5fdb0f0d0867e367388f85079db3b1f9a47590/packages/merkle-trees/src/merkle.nr#L3\n\n// token functionality based of: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/easy_private_token_contract/src/main.nr\n// TODO upgrade to more fleshed out version at: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/token_contract/src/main.nr\n\n#[aztec]\npub contract WarpToadCore {\n    // TODO cleanup imports\n    use dep::easy_private_state::EasyPrivateUint;\n    use dep::value_note::balance_utils;\n    use aztec::macros::{functions::{initializer, private, public, view}, storage::storage};\n    use aztec::oracle::get_membership_witness::{\n        get_note_hash_membership_witness, MembershipWitness,\n    };\n\n    use aztec::prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable};\n    use aztec::protocol_types::constants::NOTE_HASH_TREE_HEIGHT;\n    use std::hash::poseidon;\n\n    use aztec::history::public_storage::PublicStorageHistoricalRead;\n    // use aztec::history::note_inclusion::{ProveNoteInclusion};\n\n    use dep::aztec::{macros::notes::{ note}};\n    use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n    use dep::protocol_types::hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash};\n\n\n\n    // use crate::types::WarpToadNote::{WarpToadNote};\n    \n    // arbitrary number because noir didn't like it when i returned a slice at get_all_giga_roots\n    global max_history_size: u32 = 4096;\n\n    #[storage]\n    struct Storage<Context> {\n\n        giga_root: PublicMutable<Field, Context>,\n        giga_root_history: Map<u32, PublicMutable<Field, Context>, Context>,\n        giga_root_history_size: PublicImmutable<u32, Context>,\n        giga_root_history_index: PublicMutable<u32, Context>,\n\n        L1_contract: PublicImmutable<EthAddress, Context>,\n\n        balances: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n\n    /**\n     * initialize the contract's initial state variables.\n     */\n    #[initializer]\n    #[public]\n    fn constructor(giga_root_history_size: u32, L1_contract: EthAddress) {\n        // TODO cleanup\n        assert(max_history_size > giga_root_history_size, \"wow too big!\");\n        storage.giga_root_history_size.initialize(giga_root_history_size);\n        storage.L1_contract.initialize(L1_contract);\n    }\n\n    // @TODO @WARNING remove this in prod!!\n    #[private]\n    fn mint_for_testing(amount: u64, recipient: AztecAddress) {\n        storage.balances.at(recipient).add(amount, recipient, context.msg_sender());\n    }\n\n    #[public]\n    fn receive_giga_root(giga_root: Field) {\n        // TODO make only the bridge able to use this function. And also make sure the contract that send the bridge transfer is L1_contract\n        storage.giga_root.write(giga_root);\n        let current_index: u32 = storage.giga_root_history_index.read();\n        storage.giga_root_history.at(current_index).write(giga_root);\n\n        let next_index: u32 = (current_index + 1) % storage.giga_root_history_size.read();\n        storage.giga_root_history_index.write(next_index);\n    }\n\n    // Transfers `amount` of tokens from `sender` to a `recipient`.\n    #[private]\n    fn transfer(amount: u64, sender: AztecAddress, recipient: AztecAddress) {\n        storage.balances.at(sender).sub(amount, sender, sender);\n        storage.balances.at(recipient).add(amount, recipient, sender);\n    }\n\n    // we can split up mint types based on where the burn happened to make users staying on aztec have faster proof time.\n    // you can only do this on aztec because on aztec everything is private. So others don't see what function you called!!! :D\n    #[private]\n    fn mint_giga_root(amount: u64) {\n        let chain_id: Field = context.chain_id();\n\n        let giga_root_slot: Field =\n            aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(\n            giga_root_slot,\n            contract_address,\n        );\n\n        // TODO check if commitment (from the other chain) is in that root\n    }\n\n    // TODO this is not safe. if sender reveals their viewing keys others can spend their token(they should only be able to see them!)\n    // Look at the token contract example for how to do that \n    // https://discord.com/channels/1144692727120937080/1359842526915203096\n    #[private]\n    fn burn(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        sender: AztecAddress,\n    ) {\n        storage.balances.at(sender).sub(amount, sender, sender);\n\n        // add the commitment\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        context.push_note_hash(commitment); // TODO this doesnt actually put it in the fucking tree???\n    }\n\n    #[private]\n    fn mint_local(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        recipient: AztecAddress,\n        block_number: u32,\n        burn_tx_first_nullifier: Field, // any nullifier that is in the same tx as ur commitment\n        note_index_in_tx: u32,\n    ) {\n        let chain_id: Field = context.chain_id();\n        assert(destination_chain_id == chain_id, \"not here bro\");\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        let nullifier: Field = poseidon::bn254::hash_1([nullifier_preimg]);\n        let block_header = context.get_block_header_at(block_number);\n        \n\n        let siloed_note_hash = compute_siloed_note_hash(context.this_address(), commitment);\n        \n        let nonce = compute_note_hash_nonce(burn_tx_first_nullifier,note_index_in_tx);\n\n        let unique_note_hash = compute_unique_note_hash(nonce,siloed_note_hash);\n        let note_hash = unique_note_hash;\n        // let note_hash = unique_note_hash;\n\n        let witness: MembershipWitness<40, 41> = unsafe {\n            get_note_hash_membership_witness(block_number, note_hash)\n        };\n\n        assert_eq(\n            block_header.state.partial.note_hash_tree.root,\n            root_from_sibling_path(note_hash, witness.index, witness.path),\n            \"Proving note inclusion failed\",\n        );\n        \n        // TODO pushing the same nullifier twice is impossible right??\n        context.push_nullifier(nullifier);\n        // mint!\n        storage.balances.at(recipient).add(amount, recipient, recipient);\n    }\n\n    // we dont need history we have the archive treee!!!\n    #[private]\n    fn get_historical_giga_root() -> pub Field {\n        let giga_root_slot: Field = aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(giga_root_slot,contract_address);\n        giga_root\n    }\n\n    #[private]\n    fn get_historical_giga_root_by_index(index: u32) -> pub Field {\n        let giga_root_slot: Field = aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root_history.at(index));\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(giga_root_slot,contract_address);\n        giga_root\n    }\n\n    // i think this allows us to do a eth_getProof like thing for a commitment. Kinda cringe that i cant just call a api in js like on ethereum? Maybe you can?\n    #[view]\n    unconstrained fn get_note_proof(\n        block_number: u32,\n        note_hash: Field,\n    ) -> pub MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n        get_note_hash_membership_witness(block_number, note_hash)\n    }\n\n    #[view]\n    unconstrained fn get_chain_id() -> pub Field {\n        context.chain_id()\n    }\n\n     // TODO long term we need js equivalent for performance and cleaner code but we need poseidon2 in js for that\n    #[view] // #[utility]\n    unconstrained fn hash_unique_note_hash(\n        note_hash: Field,\n        first_nullifier_in_tx: Field,\n        unique_note_hash_index_in_tx: u32,\n    ) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(context.this_address(), note_hash);\n        let nonce = compute_note_hash_nonce(first_nullifier_in_tx,unique_note_hash_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce,siloed_note_hash);\n        unique_note_hash\n    }\n\n    #[private]\n    fn hash_commit(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n    ) -> pub Field {\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        commitment\n    }\n\n\n        // Helper function to get the balance of a user.\n    // #[utility] //not in this version??\n    unconstrained fn get_balance(owner: AztecAddress) -> pub Field {\n        balance_utils::get_balance(storage.balances.at(owner).set)\n    }\n\n    // #[utility] //not in this version??\n    unconstrained fn get_giga_root() -> pub Field {\n        storage.giga_root.read()\n    }\n\n    unconstrained fn get_all_giga_roots() -> pub [Field; max_history_size] {\n        let mut all_roots: [Field; max_history_size] = [0;max_history_size];\n        let amount_of_roots = storage.giga_root_history_size.read();\n        for i in 0..amount_of_roots {\n            let root: Field = storage.giga_root_history.at(i).read();\n            all_roots[i] = root;\n        }\n        all_roots\n    }\n}\n"
    },
    "55": {
      "path": "/home/jimjim/Desktop/warp-toad/contracts/aztec/WarpToadCore/src/types/WarpToadNote.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128, log_type::PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID,\n    },\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize},\n        utils::arrays::array_concat,\n    },\n};\n\n\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct WarpToadNote {\n    // owner: AztecAddress,\n    // randomness: Field,\n    // token_id: Field,\n    nullifier_preimg: Field,\n    secret: Field,\n    destination_chain_id: Field,\n    amount: u64,\n}\n\nimpl NoteHash for WarpToadNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n\n        let private_content = WarpToadNotePrivateContent { nullifier_preimg: self.nullifier_preimg, secret: self.secret, destination_chain_id: self.destination_chain_id  };\n        let partial_note =  WarpToadNotePreCommitment { preCommitment: private_content.compute_partial_commitment(storage_slot) };\n        partial_note.compute_complete_note_hash(self.amount)\n    }\n\n    fn compute_nullifier(self,context: &mut PrivateContext,note_hash_for_nullify: Field,\n    ) -> Field {\n        // let owner_npk_m = get_public_keys(self.owner).npk_m;\n        // let owner_npk_m_hash = owner_npk_m.hash();\n        // let secret = context.request_nsk_app(owner_npk_m_hash);\n        // poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER,)\n\n        poseidon2_hash_with_separator([self.nullifier_preimg],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        // let owner_npk_m = get_public_keys(self.owner).npk_m;\n        // let owner_npk_m_hash = owner_npk_m.hash();\n        // let secret = get_nsk_app(owner_npk_m_hash);\n        // poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER,)\n        poseidon2_hash_with_separator([self.nullifier_preimg],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n}\n\nimpl WarpToadNote {\n    pub fn new(nullifier_preimg: Field, secret: Field, destination_chain_id: Field, amount: u64,) -> Self {\n        Self { nullifier_preimg, secret, destination_chain_id,  amount}\n    }\n\n    // pub fn get_token_id(self) -> Field {\n    //     self.token_id\n    // }\n\n    pub fn partial(\n        // owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        // recipient: AztecAddress,\n        // sender: AztecAddress,\n        nullifier_preimg: Field,\n        secret: Field,\n        destination_chain_id: Field\n\n    ) -> WarpToadNotePreCommitment {\n        //let randomness = unsafe { random() };\n        //let commitment = WarpToadNotePrivateContent { owner, randomness }.compute_partial_commitment(storage_slot);\n        let preCommitment = WarpToadNotePrivateContent { nullifier_preimg, secret,destination_chain_id }.compute_partial_commitment(storage_slot);\n\n        // we dont need log?        \n        // let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n        //     owner,\n        //     randomness,\n        //     public_log_tag: commitment,\n        // };\n\n        // let encrypted_log = default_aes128::note::compute_partial_note_log(\n        //     private_log_content,\n        //     storage_slot,\n        //     recipient,\n        //     sender,\n        // );\n        // context.emit_private_log(encrypted_log);\n\n        WarpToadNotePreCommitment { preCommitment }\n    }\n}\n\n\n#[derive(Packable)]\nstruct WarpToadNotePrivateContent {\n    nullifier_preimg: Field,\n    secret: Field,\n    destination_chain_id: Field\n}\n\nimpl WarpToadNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n\n        // TODO do old  poseidon and use hash_3([self.nullifier_preimg, self.secret, self.destination_chain_id]) instead\n        // is okay to drop GENERATOR_INDEX__NOTE_HASH??\n        poseidon2_hash_with_separator(array_concat(self.pack(), [storage_slot]),GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n\n// #[derive(Packable)]\n// struct PrivateNFTPartialNotePrivateLogContent {\n//     nullifier_preimg: Field,\n//     secret: Field,\n//     destination_chain_id: Field\n// }\n\n// impl NoteType for PrivateNFTPartialNotePrivateLogContent {\n//     fn get_id() -> Field {\n//         WarpToadNote::get_id()\n//     }\n// }\n\n#[derive(Packable, Serialize, Deserialize)]\npub struct WarpToadNotePreCommitment {\n    preCommitment: Field,\n}\n\nimpl WarpToadNotePreCommitment {\n    pub fn commitment(self) -> Field {\n        self.preCommitment\n    }\n}\n\nimpl WarpToadNotePreCommitment {\n    /// Completes the partial note, creating a new note that can be used like any other NFTNote.\n    pub fn complete(self, amount: u64, context: &mut PublicContext) {\n        //context.emit_public_log(self.compute_note_completion_log(token_id));\n        context.push_note_hash(self.compute_complete_note_hash(amount));\n    }\n\n    // fn compute_note_completion_log(self, token_id: Field) -> [Field; 2] {\n    //     [self.commitment, token_id]\n    // }\n\n\n    // TODO use old poseidon? and drop the GENERATOR_INDEX__NOTE_HASH? is that safe?\n    fn compute_complete_note_hash(self, amount: u64) -> Field {\n        poseidon2_hash_with_separator([self.preCommitment, amount as Field], GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n"
    },
    "57": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T, let N: u32> CapsuleArray<T>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T) {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().unkonstrained().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "65": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "66": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "68": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "70": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/mod.nr",
      "source": "use crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod private_logs;\npub mod private_notes;\npub mod partial_notes;\npub mod nonce_discovery;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal PRIVATE_LOG_EXPANDED_METADATA_LEN: u32 = 1;\n\n/// The maximum length of the log's content, i.e. after log type ID and metadata extraction.\npub global MAX_LOG_CONTENT_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - PRIVATE_LOG_EXPANDED_METADATA_LEN;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "71": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr",
      "source": "use crate::{\n    discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n"
    },
    "72": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (e.g.\n/// the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\n// TODO(#11630): come up with some sort of slot allocation scheme.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = 77;\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_log(log_metadata, log_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = 0;\n    while i < pending_partial_notes.len() {\n        let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(i);\n\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            i += 1 as u32;\n            // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n            // for this tagged log when performing message discovery in the future until we either find it or the\n            // entry is somehow removed from the PXE DB.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n            // complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            array::for_each_in_bounded_vec(\n                discovered_notes,\n                |discovered_note: DiscoveredNoteInfo, _| {\n                    // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                    // temporary node connectivity issue - is simply throwing good enough here?\n                    assert(\n                        deliver_note(\n                            contract_address,\n                            pending_partial_note.storage_slot,\n                            discovered_note.nonce,\n                            complete_packed_note,\n                            discovered_note.note_hash,\n                            discovered_note.inner_nullifier,\n                            log.tx_hash,\n                            pending_partial_note.recipient,\n                        ),\n                        \"Failed to deliver note\",\n                    );\n                },\n            );\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n\n            // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n            // shifts the elements to the left if the removed element is not the last element.\n        }\n    }\n}\n\nfn decode_partial_note_private_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all partial note private logs must have at least {PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private log encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = log_content.get(0);\n    let note_completion_log_tag = log_content.get(1);\n\n    let packed_private_note_content = array::subbvec(log_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "73": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr",
      "source": "use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier, MAX_LOG_CONTENT_LEN,\n        partial_notes::process_partial_note_private_log, PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        private_notes::process_private_note_log,\n    },\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::from_expanded_metadata,\n    },\n    oracle::message_discovery::sync_notes,\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    debug_log::{debug_log, debug_log_format},\n};\n\n// TODO(#12750): don't make these values assume we're using AES.\nuse crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    _contract_address: AztecAddress,\n    _compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually fetch tagged logs, decrypt and process them here, but for now we simply call the `syncNotes`\n    // oracle. This has PXE perform tag synchronization, log download, decryption, and finally calls to the the\n    // `process_log` contract function with the decrypted payload, which will in turn call `do_process_log` with a\n    // decrypted log, letting us continue the work outside of PXE.\n    sync_notes();\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\npub unconstrained fn do_process_log<Env>(\n    contract_address: AztecAddress,\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log_format(\"Processing log with tag {0}\", [log.get(0)]);\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (log_type_id, log_metadata, log_content) = decode_log_plaintext(log_plaintext);\n\n    if log_type_id == PRIVATE_NOTE_LOG_TYPE_ID {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            compute_note_hash_and_nullifier,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(contract_address, recipient, log_metadata, log_content);\n    } else {\n        // TODO(#11569): handle events\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id as Field],\n        );\n    }\n}\n\n/// Decodes a log's plaintext following aztec-nr's standard log encoding.\n///\n/// The standard private log layout is composed of:\n///  - an initial field called the 'expanded metadata'\n///  - an arbitrary number of fields following that called the 'log content'\n///\n/// ```\n/// log_plaintext: [ log_expanded_metadata, ...log_content ]\n/// ```\n///\n/// The expanded metadata itself is (currently) interpreted as a u128, of which:\n///  - the upper 64 bits are the log type id\n///  - the lower 64 bits are called the 'log metadata'\n///\n/// ```\n/// log_expanded_metadata: [  log_type_id    |  log_metadata  ]\n///                        <---  64 bits --->|<--- 64 bits --->\n/// ```\n///\n/// The meaning of the log metadata and log content depend on the value of the log type id. Note that there is\n/// nothing special about the log metadata, it _can_ be considered part of the content. It just has a different name\n/// to make it distinct from the log content given that it is not a full field.\nunconstrained fn decode_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (u64, u64, BoundedVec<Field, MAX_LOG_CONTENT_LEN>) {\n    assert(\n        log_plaintext.len() >= PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        f\"Invalid log plaintext: all logs must be decrypted into at least {PRIVATE_LOG_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If PRIVATE_LOG_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_LOG_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for PRIVATE_LOG_EXPANDED_METADATA_LEN\",\n    );\n\n    // See the documentation of this function for a description of the log layout\n    let expanded_log_metadata = log_plaintext.get(0);\n    let (log_metadata, log_type_id) = from_expanded_metadata(expanded_log_metadata);\n    let log_content = array::subbvec(log_plaintext, PRIVATE_LOG_EXPANDED_METADATA_LEN);\n\n    (log_type_id, log_metadata, log_content)\n}\n"
    },
    "74": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/private_notes.nr",
      "source": "use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note log content that are not the note's packed representation.\nglobal PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the log (e.g. log type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_log(log_metadata, log_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                oracle::message_discovery::deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nfn decode_private_note_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all private note logs must have at least {PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the private note log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = log_content.get(0);\n    let packed_note = array::subbvec(log_content, PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "75": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "78": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/aes128.nr",
      "source": "use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n        log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse std::aes128::aes128_encrypt;\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "82": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::to_expanded_metadata,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The \"2\" in \"N + 2\" is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    log_type_id: u64,\n) -> [Field; (N + 2)]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    let mut fields = [0; N + 2];\n\n    // We pack log type id and log metadata into the first field. Search for `decode_log_plaintext` function to see\n    // where the value gets decoded.\n    fields[0] = to_expanded_metadata(Note::get_id() as u64, log_type_id);\n    fields[1] = storage_slot;\n    for i in 0..packed_note.len() {\n        fields[i + 2] = packed_note[i];\n    }\n\n    fields\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_LOG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    log_type_id: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let plaintext = compute_note_plaintext_for_this_strategy(note, storage_slot, log_type_id);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\nfn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "86": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/metadata_packing.nr",
      "source": "global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\npub fn to_expanded_metadata(log_metadata: u64, log_type: u64) -> Field {\n    let metadata_field = log_metadata as Field;\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (log_type as Field) * U64_SHIFT_MULTIPLIER;\n    type_field + metadata_field\n}\n\npub fn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let metadata = (input as u64);\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    let log_type = ((input - (metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    (metadata, log_type)\n}\n\nmod tests {\n    use super::{from_expanded_metadata, to_expanded_metadata};\n\n    global U64_MAX: Field = 2.pow_32(64) - 1;\n    global U128_MAX: Field = 2.pow_32(128) - 1;\n\n    #[test]\n    fn packing_metadata() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(0, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let packed = to_expanded_metadata(0, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn unpacking_metadata() {\n        // Test case 1: All bits set\n        let input = U128_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let input = U128_MAX - U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let input = U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let input = 0;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn roundtrip_metadata(original_metadata: u64, original_type: u64) {\n        let packed = to_expanded_metadata(original_metadata, original_type);\n        let (unpacked_metadata, unpacked_type) = from_expanded_metadata(packed);\n        assert(original_type == unpacked_type, \"Log type bits should match after roundtrip\");\n        assert(\n            original_metadata == unpacked_metadata,\n            \"Metadata bits should match after roundtrip\",\n        );\n    }\n}\n"
    },
    "90": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
