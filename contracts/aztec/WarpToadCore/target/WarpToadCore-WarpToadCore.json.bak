{"noir_version":"1.0.0-beta.3+0000000000000000000000000000000000000000","name":"WarpToadCore","functions":[{"name":"constructor","hash":"13931061741499857056","is_unconstrained":true,"custom_attributes":["initializer","public"],"abi":{"parameters":[{"name":"giga_root_history_size","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"L1_contract","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"15748358241952124793":{"error_kind":"string","string":"wow too big!"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["constructor"],"brillig_names":["constructor"]},{"name":"mint_giga_root","hash":"3452374722020029744","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["mint_giga_root"],"brillig_names":["discover_new_messages","get_public_data_witness","field_less_than","decompose_hint","lte_hint","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"get_chain_id","hash":"1284554202850291661","is_unconstrained":true,"custom_attributes":["view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_chain_id"],"brillig_names":["get_chain_id"]},{"name":"process_log","hash":"7985758934542246821","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"log_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"7b3druQ8cqZ7L33cB+I/Obcy2DBsj2fQQMMe2J4NbAx87zursqTM+lJKauXHRTEYz0mjultayXjjoRgRpEL/9y//41/+6f/8r3/427/+z3/7j7/8t//+f//y93/753/8z7/927/e/tv//a+//uWf/v1vf//73/7XPzz/z39ZfvyHMfbnDf/xv//xX3/89//4z3/89//8y38zpizlr3/5l3/9Hz//nZfbH/mff/v7v9z+21L+668v1+cl/Lo6W7ddG+POpcGul4bw9Ge9+a//56+34bgmwwlxHU7K74fj3fqHfcyvw/EthlMW9+vqYtL74cRNyGjj63BCk+F4sw4n+Mpw8vLr0rTsOCvuDseaYNfhWF98ZTg25/TrcrcE+7jalPuvpC6/krv8SunxK3bp8iumy6/YLr/iuvyK7/IrocuvdJn7tsvct13mvu0y912Xue+6zH3XZe67LnPfdZn7rsvcd13mvusy912Xue+6zH3fZe77LnPfd5n7vsvc913mvu8y932Xue+7zH3fZe77LnM/dJn7ocvcD13mfugy90OXuR+6zP3QZe6HLnM/dJn7ocvcj13mfuwy92OXuR+7zP3YZe7HLnM/dpn7scvcj13mfuwy91OXuZ+6zP3UZe6nLnM/dZn7qcvcT13mfuoy91OXuZ+6zP3cZe7nLnM/d5n7ucvcz13mfu4y93OXuZ+7zP3cZe7nLnO/dJn7pcvcL13mfmk09/26mW/z0wGGZHYudrbkdUjOPO213wfkRxtQGG1Asf+AXCzbgPLTaY29syNmG7y3zyc77oNPkgff5lGZin8MPrwffF7Wa7Mr26U2ub0jLHk94FPK79f+HHyRO3i7LJIHbyQP3koevJM8eC958EHy4KPkwSfJgxe8wtpF8gprJK+wRvIKawZfYeN6rVkW+zr6wZfYyugHX2Mrox98ka2MfvBVtjL6wZfZyujbrLPFbKMvLr4fvfFpG1Iwj/dhboXhnavjsubhv73ykX8Nv4gefqNXES4bvpE9fCt7+E728L3s4QfZw4+yh59kD1/2qmtlr7pO9qrrZK+6Tvaq62Svuo1etLps+MM/OP16cQzmZfh++Kkb14HE5/f91+FfMHWDCdvwnf9t+D+H5MYbkh9vSGG8IV0RgG6tHW5DCpWpYIrN28wptvzhDID1SboBWboBRbgBYZFuwHevZz9/xPb4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","names":["process_log"],"brillig_names":["process_log"]},{"name":"public_dispatch","hash":"4188759956405555492","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15748358241952124793":{"error_kind":"string","string":"wow too big!"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"hash_unique_note_hash","hash":"16119998260008796929","is_unconstrained":false,"custom_attributes":["view"],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"note_hash","type":{"kind":"field"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hash_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/72TXQ6CMBCEW0BQQQX1AB6hv9C+eRWJ5f4nMBYpydoQHqS4yaSTTdrMfm0xGupqtXMeW8VgvaHvwm69u5WTWgjTMEM5fRCmWyWJkG2tqKJSySdTnBslVKNb3RBNBTe0k5p3ZKgNOIssK7FmzvT3nNxv9NnOVgnI2nN4gdyjx8Cnzo/7Mqutu7s96K/FIA93V2yKQQ5mjYCPZxgUVgero9XpDwzKcAz4FIMSzFoAn80wqNw5FzT8ZZ9B5DEgy4omAXlW4XJ9/tU4e+K9gci9I9hDE6z6egMur/R3GAUAAA==","debug_symbols":"7ZZNioQwEEbvkrULU5WkTF9lGBp/YhMQlagDg/TdJ90YR2jRnavs8qVeivACRWZWmWJ63G1bdwO7fc2s6cp8tF3r08z4e2vo8/aVhjF3I7tJqTBhpq38UnH1TFhtG+ODeCYfMCDIBQYh+AoD7dEZ8EBnIOGEJi0CTVrjCY1SLbCA9J/dvTRxHS5NiMcwJwqNOWl5AqdrZ56qbAt/Jwyi7it1Y9R9pW6xq1thFnQTx2PdPNPhbSDFqPtQt4y6r9StdnWTUKtuLU6GCVfrMAGkqPtIN0Xd1+n2oXC2aezjvv0e+u2f3Nm8aMwS66ktN9Xxtw+VcL53XWmqyZlXp3fNt/8D","names":["hash_unique_note_hash"],"brillig_names":[]},{"name":"get_note_proof","hash":"1680327446176637399","is_unconstrained":true,"custom_attributes":["view"],"abi":{"parameters":[{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"note_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::oracle::get_membership_witness::MembershipWitness","fields":[{"name":"index","type":{"kind":"field"}},{"name":"path","type":{"kind":"array","length":40,"type":{"kind":"field"}}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_note_proof"],"brillig_names":["get_note_proof"]},{"name":"get_giga_root","hash":"5784386767684952052","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_giga_root"],"brillig_names":["get_giga_root"]},{"name":"sync_notes","hash":"16299606118316967019","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"burn","hash":"17699365226281542941","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"destination_chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"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","debug_symbols":"","names":["burn"],"brillig_names":["discover_new_messages","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"get_historical_giga_root","hash":"9428065088716654068","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_historical_giga_root"],"brillig_names":["discover_new_messages","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"get_balance","hash":"4718812892448426468","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"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","names":["get_balance"],"brillig_names":["get_balance"]},{"name":"mint_for_testing","hash":"2662607626374964626","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["mint_for_testing"],"brillig_names":["discover_new_messages","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"transfer","hash":"6718311766873817835","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["transfer"],"brillig_names":["discover_new_messages","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"get_all_giga_roots","hash":"9905764089193955118","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":4096,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["get_all_giga_roots"],"brillig_names":["get_all_giga_roots"]},{"name":"hash_commit","hash":"14269858104874161303","is_unconstrained":false,"custom_attributes":["view"],"abi":{"parameters":[{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"destination_chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","names":["hash_commit"],"brillig_names":[]},{"name":"hash_unique_note_hash_helper","hash":"13085156484819478275","is_unconstrained":true,"custom_attributes":["view"],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"note_hash","type":{"kind":"field"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hash_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["hash_unique_note_hash_helper"],"brillig_names":["hash_unique_note_hash_helper"]},{"name":"prove_note_hash_inclusion","hash":"3899844689897763836","is_unconstrained":false,"custom_attributes":[],"abi":{"parameters":[{"name":"plain_note_hash","type":{"kind":"field"},"visibility":"private"},{"name":"block_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]},"visibility":"private"},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hash_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"4174732183419875782":{"error_kind":"string","string":"Proving note inclusion failed"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7d3fSiNJGEDxd8m1F91dX1V3+yrLMETNDIGQiH8WFvHdN3Gno7ubSZgWDgVzbobJWKU1v4qfHkR9Wdytbp6/f11vv+0eF9d/vCw2u9vl03q33T96WfRv//R4v9weHj0+LR+eFteltOlqsdre7f/at+Pr1eLberNaXOd4vfrf4pzLtDiXtpxf3KUu/1jcRbTHxV1/avXQtdPqocvdhdX9GNPqfhzThdUplx+Lo2ve15489N5gOnSf0vnFbd9Pr7jtx3xhcXN8zW1Tho+Lv1wtBu+m2rsZvZtq76ZtPn85JQ3T5fRtOr+4HcbpNXdN8nLOX07r5dR7Od3nL6ePcrycMS6MtbYcx1qXei/n7OUkL6fey4mTlzMcP2yXof+X92FPnrGnzNjTz9gzzNgz/vqerpmxp52xp5ux5/Q7XD92xz1j+u+e08+Dceynp3tTLnyu18dx7cen2XDy6T68v48Ow/tHt3Z4O0yu6TClpsP0NR1mqOkwY0WHSU1Nh2lrOkxX02FSTYepaQKnmiZwqmkCp5omcKppAqeaJnDUNIGjpgkcNU3gqGkCR00TOGqawFHTBI6aJnDUNIGjpgmca5rAuaYJnGuawLmmCZxrmsC5pgmca5rAuaYJnGuawLmmCVxqmsClpglcaprApaYJXGqawKWmCVw+P4HHMq1tm6a9cJqcuunrNjnlD2f/Pb4wVXq5Se5BbpJ7lBvk7hu5Se5WbpK7k5vkTnKT3CE3yZ3lJrmtSpTbqkS5rUqU26pEv8/NqkS5rUqU26pEua1KlDvkJrmtSpTbqkS5rUqU26pEua1K9Cd0WJUot1WJcluVKLdViXKH3CS3VYlyW5Uot1WJcluVKLdVyf5sQbOS9bYrWW/DkvW2LFnv0Bv1ti1Zb+OS9bYuWW/zkvW2L9kfj25fst72JettX7Le9iXrHXqj3vYl621fst72JettX7Le9iX7G57sS9bbvmS97UvW275kvUNv1Nu+ZL3tS9bbvmS97UvW275kf0mtfcl625est33JetuXrHfojXrbl6y3fcl625est33JetuXqHfYl6y3fcl625est33JeofeqLd9yXrbl6y3fcl625est32Jemf7kvW2L1lv+5L1ti9Z79Ab9bYvWW/7kvW2L1lv+5L1ti9R72Jfst72JettX7Le9iXrHXqj3vYl621fst72JettX7Le9iXq3duXrLd9yXrbl6y3fcl6h96ot33JetuXrLd9yXrbl6y3fYl6D/Yl621fst72JettX7LeoTfqbV+y3vYl621fst72JettX6Leo33JetuXrLd9yXrbl6x36I1625est33JetuXrLd9yXrbl6R319iXrLd9yXrbl6y3fcl6h96ot33JetuXrLd9yXrbl6y3fYl6t/Yl621fst72JettX7LeoTfqbV+y3vYl621fst72JettX6LenX3JetuXrLd9yXrbl6x36I1625est33JetuXrLd9yXrbl6h3si9Zb/uS9bYvWW/7kvUOvVFv+5L1ti9Zb/uS9bYvWW/7EvUO+5L1ti9Zb/uS9bYvWe/QG/W2L1lv+5L1ti9Zb/uS9bYvUe9sX7Le9iXrbV+y3vYl6x16o972JettX7Le9iXrbV+y3vYl6l3sS9bbvmS97UvW275kvUNv1Nu+ZL3tS9bbvmS9f9KX6WfeX/YPbh7Wm836+9fN7nb5tN5tHw9bm8Mfp789vO2amM6w/58eX10b+Z9DzNnUz9k0zNk0zth0+vv+zm563T/8c/mwXt5sVgfRw0uft7cT8P7h01/300umK7h/2N2u7p4fVofLeL+Hw2dBKa4i9kd5+xGq++dtbvZvYv9m/gY=","names":["prove_note_hash_inclusion"],"brillig_names":["get_note_hash_membership_witness","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"get_historical_giga_root_by_index","hash":"13717419320442053640","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_historical_giga_root_by_index"],"brillig_names":["discover_new_messages","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"mint_local","hash":"1621555251138874753","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"burn_tx_first_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"note_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"4174732183419875782":{"error_kind":"string","string":"Proving note inclusion failed"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["mint_local"],"brillig_names":["discover_new_messages","get_note_hash_membership_witness","notify_created_nullifier_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"receive_giga_root","hash":"10241476373710879200","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"giga_root","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VaS28jRRBuP8avsePZJCu4r5CQkNCMH3FyM9qEI0hw4DxkxqtIQYuSgDiOuHBHHLgiceTOhZ+BxAUkJCT+BBe2d7vWnz/XTOz1jFlKsnp6qrpeXVX9GNfMEmqubVLfKDRz14a7QVQir1BVtAiE5tw9dF2/DvhGicZ2SW6Z/E/Dyayr2Fei/uOu41mlf4RnBfzDtuPzfrbkz7ZYGLg+xpCM6Tz79c3yOXDPXRpTxdxW6PvwSNG/DrZZeJxVInss/M+r4R8K/4tq+Ee+i4XfHL+BWY0nkam1xqzGuwD63r7nojwvR/cwMOs516zQDg9w8wpt8Cq0oVW+DSPNBpFj643UmfjLzz78/PJpkr6XJDfp7W2N7NL012Abnu0teL7JPD/44vr6anGV3lx8dXV7t8a7o/CW57rRbWO9kA5BW08szF0b7gaRRzY8cq3t/0E6tEGvsuRbfz90vF76++O7pzfxk/STm6u71BDUcxwofc3xmkMrMGZqjTnOMeajNE42CRzuFwVvw73r5fBsAA1u3HoKDxzXJR4DZZzoIv70aczc9cPdYLxJgUP5PcUnZS6UNZKHPkT/SPyJ7/qKroGCa8Ez4lBOX5Gj8eqSDlj0ef661fhrsun8ifye4ocq5q+r+LWl+FV85yu6BgrOg+e8OPEVOfviNTTr880xp/mmWyAHxwtdVxk3d224HYz4Bc+JyEa5mAclxs9003gW+T1TaX2MiuqEFhviu4Gia6DgOAYHipyBIuf/xEtidF+5MVDG1XJakcPvWI6m81DRwSd7Woo9rQI5viKnaH15VXs0nYvy/lXlIK/zbFVOv0Q5WI/kcCq1CmOxxNowEjvqio3WvwnItb8D1/fMMhbwsmYAeKT/1ix5PnHPQ2V8n+TJfgkvBuqKnzyivzZ78V94CHzZBxVfZiVcpxEEdwCyubYMAcd5GgCOc+sB4HC+GBrUR1/Ys8SfwJfpBLQY4VrcU+wQ3ECxQ6uHRbWlRzisbwPC8Z5CnrFvjH4euMjybeZLAel7Ci2ve9Jv5ujGOST0X7vWztVbblJ2Poxzv6bQGYWGi2nNLA+kFsR5NZLTMvoBVvixA79xraV92xFxIluYuzbcDcbbXgjk3XwxXT2HTnyRFwx4IaAVWuTRyJEneBzXoPeabAy++ga6Fsk1xE/D4Xzu/ZbJN+ur5HeutUH7q3uW4BuSoXPXD3eDkegqFT9vZR8CHum/d61NmHdqq/bLGGOKb0BYB6RHu4V+SH7DsUNlnE84XN14xyGrW1PhrVVLof/BtTJfuDOoesdxSDYEYAP70YJ84uK5/MW1Nv5+NKs+Q3/yCoz+4RUYdws8D6h3n/x3XI3/xuIjSXaMd9T12Kz6SOh/ci3Gu+wCGtly/BDssdDMKrFnYvV4F/Swj0dmCR7IRbuMWdqN9JyTDxV6nBvxWUD0nJ/YR14P4B0v4uLDltHnCE8jSP+za3ER13Z9R6Q77voCwvmKXG3Xdwg676eGRyHv2hG0XTufBDAP+SRwBDg+CWAcbHsSEF9sexIoow71Sd7rkrcyDxY4bzFHGwo95+19eX6evWgDsz6XHN+YM4eE2yRnLFyQPIwXmRvMmaKaUVf48k0GjsWbjCrndXYahhKzElOyvjA0AY/0v7s+nmqlbe6g52IWR4txvIincZJMLmPeRxjwnV+B/E/TKB0vFotxGk8WJ4t75Wt/NcG/VZxnL1o7t38BL4xJXNtxLO9/hP4fs+T5t3se0niRgTjMAd6j4pfZBuHwQMo3flV9bfsPv9Ru/GXkdfhSq91wV/zlaCL6aF8qtHOTrZsHZn3OUD/hhecZXje12y7Opft8EyjjW4TDOfYIV1d00P4u1CYc2iX55OfYxpcHwkurEzw2zxdYV2Qt8oi/GG7HP3LPWn3guoL1gesK1wfE4RxwXdlX7Ob5tG9WfST0HWe8do+gfbnEyz/e+2j5g3bzl27tRrfiLwdj3t/k+Svvi8qwwF+a/e0Cf2l7rEGBv9CXOJZl59WlfcXifb7lWBT6NxTfameFDthjoZlVYs9UOyvgmuWB3Lx80b70F82/li8B0eN8azWeazXK5a8xWJv53zNY46W2YS3l/SHWatwflr2nDUfJ5Uk6erbtn51Eo7Nk33vqyTSeXcazKDqbROkkmu5bfnp6loRnizSOomiUhOl98l/e52RLPOaThbbry90l0ws/j+hHsMZOKGc9RZ6le1xAV8tpn/NQ3jWz1XfdbJ2+ka3Ti+xetq6j4HzAYa5b6Ls++gt5iR4e0c9hH2KhA2NkfKDI75D8Fb2Vd/whylfofYXezs+ZGyRxi7aXfQ54LpP44zvWTWLHxvW/GIt/UWA2AAA=","debug_symbols":"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","names":["receive_giga_root"],"brillig_names":["receive_giga_root"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"WarpToadCore::burn_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::burn_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"destination_chain_id","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"nullifier_preimg","type":{"kind":"field"}},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"WarpToadCore::receive_giga_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::receive_giga_root_parameters","fields":[{"name":"giga_root","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_by_index_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_by_index_parameters","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"WarpToadCore::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::constructor_parameters","fields":[{"name":"giga_root_history_size","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"L1_contract","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"WarpToadCore::transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::transfer_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"WarpToadCore::mint_for_testing_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::mint_for_testing_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"WarpToadCore::mint_giga_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::mint_giga_root_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]},{"kind":"struct","path":"WarpToadCore::mint_local_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::mint_local_parameters","fields":[{"name":"nullifier_preimg","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"burn_tx_first_nullifier","type":{"kind":"field"}},{"name":"note_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"WarpToadCore"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"giga_root","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"giga_root_history","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"giga_root_history_size","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"giga_root_history_index","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"L1_contract","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        embedded_curve_add_unsafe(point1, point2)\n    } else {\n        // In a constrained context we need to do some black magic in order to satisfy the backend's\n        // expectations about the inputs to an `embedded_curve_add` opcode.\n        //\n        // TODO: document this better.\n        let x_coordinates_match = point1.x == point2.x;\n        let y_coordinates_match = point1.y == point2.y;\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n        result.is_infinite = x_coordinates_match;\n\n        // dbl if x_match, y_match\n        let double = embedded_curve_add_unsafe(point1, point1);\n        result = if double_predicate { double } else { result };\n\n        // infinity if x_match, !y_match\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"22":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"23":{"source":"pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon/mod.nr"},"24":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"46":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"54":{"source":"use aztec::macros::aztec;\n// from\n// https://github.com/privacy-scaling-explorations/zk-kit.noir/blob/fa5fdb0f0d0867e367388f85079db3b1f9a47590/packages/merkle-trees/src/merkle.nr#L3\n\n// token functionality based of: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/easy_private_token_contract/src/main.nr\n// TODO upgrade to more fleshed out version at: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/token_contract/src/main.nr\n\n#[aztec]\npub contract WarpToadCore {\n    // macros\n    use aztec::macros::{notes::note, functions::{initializer, private, public, view, internal}, storage::{storage}};\n    \n    // storage types\n    use aztec::prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable};\n    use dep::easy_private_state::EasyPrivateUint;\n    use dep::value_note::balance_utils;\n\n    // note proving\n    use aztec::oracle::get_membership_witness::{\n        get_note_hash_membership_witness, MembershipWitness,\n    };\n    use aztec::protocol_types::{\n        merkle_tree::root::root_from_sibling_path, \n        constants::NOTE_HASH_TREE_HEIGHT,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash}\n        };\n    use std::hash::poseidon;\n\n    // archive tree proving\n    use aztec::history::public_storage::PublicStorageHistoricalRead;\n    use protocol_types::{block_header::BlockHeader, transaction::tx_context::TxContext};\n\n    // arbitrary number because noir didn't like it when i returned a slice at get_all_giga_roots\n    global max_history_size: u32 = 4096;\n\n    #[storage]\n    struct Storage<Context> {\n\n        giga_root: PublicMutable<Field, Context>,\n        giga_root_history: Map<u32, PublicMutable<Field, Context>, Context>,\n        giga_root_history_size: PublicImmutable<u32, Context>,\n        giga_root_history_index: PublicMutable<u32, Context>,\n\n        L1_contract: PublicImmutable<EthAddress, Context>,\n\n        balances: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n\n    /**\n     * initialize the contract's initial state variables.\n     */\n    #[initializer]\n    #[public]\n    fn constructor(giga_root_history_size: u32, L1_contract: EthAddress) {\n        // TODO cleanup\n        assert(max_history_size > giga_root_history_size, \"wow too big!\");\n        storage.giga_root_history_size.initialize(giga_root_history_size);\n        storage.L1_contract.initialize(L1_contract);\n    }\n\n    // @TODO @WARNING remove this in prod!! Do minting from giga root instead\n    #[private]\n    fn mint_for_testing(amount: u64, recipient: AztecAddress) {\n        storage.balances.at(recipient).add(amount, recipient, context.msg_sender());\n    }\n\n    #[public]\n    fn receive_giga_root(giga_root: Field) {\n        // TODO make only the bridge able to use this function. And also make sure the contract that send the bridge transfer is L1_contract\n        storage.giga_root.write(giga_root);\n        let current_index: u32 = storage.giga_root_history_index.read();\n        storage.giga_root_history.at(current_index).write(giga_root);\n\n        let next_index: u32 = (current_index + 1) % storage.giga_root_history_size.read();\n        storage.giga_root_history_index.write(next_index);\n    }\n\n    // Transfers `amount` of tokens from `sender` to a `recipient`.\n    #[private]\n    fn transfer(amount: u64, sender: AztecAddress, recipient: AztecAddress) {\n        storage.balances.at(sender).sub(amount, sender, sender);\n        storage.balances.at(recipient).add(amount, recipient, sender);\n    }\n\n    // we can split up mint types based on where the burn happened to make users staying on aztec have faster proof time.\n    // you can only do this on aztec because on aztec everything is private. So others don't see what function you called!!! :D\n    #[private]\n    fn mint_giga_root(amount: u64) {\n        let chain_id: Field = context.chain_id();\n\n        let giga_root_slot: Field =\n            aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(\n            giga_root_slot,\n            contract_address,\n        );\n\n        // TODO check if commitment (from the other chain) is in that root\n    }\n\n    // TODO this is not safe. if sender reveals their viewing keys others can spend their token(they should only be able to see them!)\n    // Look at the token contract example for how to do that \n    // https://discord.com/channels/1144692727120937080/1359842526915203096\n    #[private]\n    fn burn(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        sender: AztecAddress,\n    ) {\n        storage.balances.at(sender).sub(amount, sender, sender);\n\n        // add the commitment\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        context.push_note_hash(commitment); // TODO this doesnt actually put it in the fucking tree???\n    }\n\n    // TODO long term we need js equivalent for performance and cleaner code but we need poseidon2 in js for that\n    #[view]\n    fn hash_unique_note_hash(\n        contract_address: AztecAddress,\n        note_hash: Field,\n        first_nullifier_in_tx: Field,\n        unique_note_hash_index_in_tx: u32,\n    ) -> pub Field {\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, note_hash);\n        let nonce = compute_note_hash_nonce(first_nullifier_in_tx,unique_note_hash_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce,siloed_note_hash);\n        unique_note_hash\n    }\n\n    //TODO long term we need js equivalent for performance and cleaner code but we need poseidon2 in js for that\n    #[view]\n    unconstrained fn hash_unique_note_hash_helper(\n        contract_address: AztecAddress,\n        note_hash: Field,\n        first_nullifier_in_tx: Field,\n        unique_note_hash_index_in_tx: u32,\n    ) -> pub Field {\n        hash_unique_note_hash(contract_address, note_hash,first_nullifier_in_tx,unique_note_hash_index_in_tx)\n    }\n\n\n    fn prove_note_hash_inclusion(\n        plain_note_hash: Field,      \n        block_header: BlockHeader,\n        contract_address: AztecAddress,\n        first_nullifier_in_tx: Field, // any nullifier that is in the same tx as ur commitment\n        unique_note_hash_index_in_tx: u32\n    ) {\n        let unique_note_hash = hash_unique_note_hash(contract_address,plain_note_hash,first_nullifier_in_tx,unique_note_hash_index_in_tx);\n\n        let witness: MembershipWitness<40, 41> = unsafe {\n            get_note_hash_membership_witness(block_header.global_variables.block_number as u32, unique_note_hash)\n        };\n\n        assert_eq(\n            block_header.state.partial.note_hash_tree.root,\n            root_from_sibling_path(unique_note_hash, witness.index, witness.path),\n            \"Proving note inclusion failed\",\n        );\n    }\n\n\n    #[view]\n    fn hash_commit(\n        nullifier_preimg: Field,\n        secret: Field,\n        destination_chain_id: Field,\n        amount: u64,\n    ) -> pub Field {\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        commitment\n    }\n\n    #[private]\n    fn mint_local(\n        nullifier_preimg: Field,\n        secret: Field,\n        amount: u64,\n        recipient: AztecAddress,\n        burn_tx_first_nullifier: Field, // any nullifier that is in the same tx as ur commitment\n        note_index_in_tx: u32,\n    ) {\n        let chain_id: Field = context.chain_id();\n        let commitment: Field = hash_commit(nullifier_preimg, secret, chain_id, amount);\n        let nullifier: Field = poseidon::bn254::hash_1([nullifier_preimg]);\n\n        let block_header: BlockHeader = context.historical_header;\n        let contract_address: AztecAddress = context.this_address();\n\n        prove_note_hash_inclusion(\n            commitment,       \n            block_header,\n            contract_address,\n            burn_tx_first_nullifier, \n            note_index_in_tx,\n        );\n\n        // TODO pushing the same nullifier twice is impossible right??\n        context.push_nullifier(nullifier);\n        // mint!\n        storage.balances.at(recipient).add(amount, recipient, recipient);\n    }\n\n    // we dont need history we have the archive treee!!!\n    #[private]\n    fn get_historical_giga_root() -> pub Field {\n        let giga_root_slot: Field = aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(giga_root_slot,contract_address);\n        giga_root\n    }\n\n    #[private]\n    fn get_historical_giga_root_by_index(index: u32) -> pub Field {\n        let giga_root_slot: Field = aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root_history.at(index));\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(giga_root_slot,contract_address);\n        giga_root\n    }\n\n    // i think this allows us to do a eth_getProof like thing for a commitment. Kinda cringe that i cant just call a api in js like on ethereum? Maybe you can?\n    #[view]\n    unconstrained fn get_note_proof(\n        block_number: u32,\n        note_hash: Field,\n    ) -> pub MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n        get_note_hash_membership_witness(block_number, note_hash)\n    }\n\n    #[view]\n    unconstrained fn get_chain_id() -> pub Field {\n        context.chain_id()\n    }\n\n\n    // Helper function to get the balance of a user.\n    // #[utility] //not in this version??\n    unconstrained fn get_balance(owner: AztecAddress) -> pub Field {\n        balance_utils::get_balance(storage.balances.at(owner).set)\n    }\n\n    // #[utility] //not in this version??\n    unconstrained fn get_giga_root() -> pub Field {\n        storage.giga_root.read()\n    }\n\n    unconstrained fn get_all_giga_roots() -> pub [Field; max_history_size] {\n        let mut all_roots: [Field; max_history_size] = [0;max_history_size];\n        let amount_of_roots = storage.giga_root_history_size.read();\n        for i in 0..amount_of_roots {\n            let root: Field = storage.giga_root_history.at(i).read();\n            all_roots[i] = root;\n        }\n        all_roots\n    }\n}\n","path":"/home/jimjim/Desktop/warp-toad/contracts/aztec/WarpToadCore/src/main.nr"},"55":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T, let N: u32> CapsuleArray<T>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T) {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().unkonstrained().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"63":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"64":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"66":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"68":{"source":"use crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod private_logs;\npub mod private_notes;\npub mod partial_notes;\npub mod nonce_discovery;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal PRIVATE_LOG_EXPANDED_METADATA_LEN: u32 = 1;\n\n/// The maximum length of the log's content, i.e. after log type ID and metadata extraction.\npub global MAX_LOG_CONTENT_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - PRIVATE_LOG_EXPANDED_METADATA_LEN;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/mod.nr"},"69":{"source":"use crate::{\n    discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr"},"70":{"source":"use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (e.g.\n/// the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\n// TODO(#11630): come up with some sort of slot allocation scheme.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = 77;\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_log(log_metadata, log_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = 0;\n    while i < pending_partial_notes.len() {\n        let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(i);\n\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            i += 1 as u32;\n            // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n            // for this tagged log when performing message discovery in the future until we either find it or the\n            // entry is somehow removed from the PXE DB.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n            // complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            array::for_each_in_bounded_vec(\n                discovered_notes,\n                |discovered_note: DiscoveredNoteInfo, _| {\n                    // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                    // temporary node connectivity issue - is simply throwing good enough here?\n                    assert(\n                        deliver_note(\n                            contract_address,\n                            pending_partial_note.storage_slot,\n                            discovered_note.nonce,\n                            complete_packed_note,\n                            discovered_note.note_hash,\n                            discovered_note.inner_nullifier,\n                            log.tx_hash,\n                            pending_partial_note.recipient,\n                        ),\n                        \"Failed to deliver note\",\n                    );\n                },\n            );\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n\n            // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n            // shifts the elements to the left if the removed element is not the last element.\n        }\n    }\n}\n\nfn decode_partial_note_private_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all partial note private logs must have at least {PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private log encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = log_content.get(0);\n    let note_completion_log_tag = log_content.get(1);\n\n    let packed_private_note_content = array::subbvec(log_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr"},"71":{"source":"use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier, MAX_LOG_CONTENT_LEN,\n        partial_notes::process_partial_note_private_log, PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        private_notes::process_private_note_log,\n    },\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::from_expanded_metadata,\n    },\n    oracle::message_discovery::sync_notes,\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    debug_log::{debug_log, debug_log_format},\n};\n\n// TODO(#12750): don't make these values assume we're using AES.\nuse crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    _contract_address: AztecAddress,\n    _compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually fetch tagged logs, decrypt and process them here, but for now we simply call the `syncNotes`\n    // oracle. This has PXE perform tag synchronization, log download, decryption, and finally calls to the the\n    // `process_log` contract function with the decrypted payload, which will in turn call `do_process_log` with a\n    // decrypted log, letting us continue the work outside of PXE.\n    sync_notes();\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\npub unconstrained fn do_process_log<Env>(\n    contract_address: AztecAddress,\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log_format(\"Processing log with tag {0}\", [log.get(0)]);\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (log_type_id, log_metadata, log_content) = decode_log_plaintext(log_plaintext);\n\n    if log_type_id == PRIVATE_NOTE_LOG_TYPE_ID {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            compute_note_hash_and_nullifier,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(contract_address, recipient, log_metadata, log_content);\n    } else {\n        // TODO(#11569): handle events\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id as Field],\n        );\n    }\n}\n\n/// Decodes a log's plaintext following aztec-nr's standard log encoding.\n///\n/// The standard private log layout is composed of:\n///  - an initial field called the 'expanded metadata'\n///  - an arbitrary number of fields following that called the 'log content'\n///\n/// ```\n/// log_plaintext: [ log_expanded_metadata, ...log_content ]\n/// ```\n///\n/// The expanded metadata itself is (currently) interpreted as a u128, of which:\n///  - the upper 64 bits are the log type id\n///  - the lower 64 bits are called the 'log metadata'\n///\n/// ```\n/// log_expanded_metadata: [  log_type_id    |  log_metadata  ]\n///                        <---  64 bits --->|<--- 64 bits --->\n/// ```\n///\n/// The meaning of the log metadata and log content depend on the value of the log type id. Note that there is\n/// nothing special about the log metadata, it _can_ be considered part of the content. It just has a different name\n/// to make it distinct from the log content given that it is not a full field.\nunconstrained fn decode_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (u64, u64, BoundedVec<Field, MAX_LOG_CONTENT_LEN>) {\n    assert(\n        log_plaintext.len() >= PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        f\"Invalid log plaintext: all logs must be decrypted into at least {PRIVATE_LOG_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If PRIVATE_LOG_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_LOG_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for PRIVATE_LOG_EXPANDED_METADATA_LEN\",\n    );\n\n    // See the documentation of this function for a description of the log layout\n    let expanded_log_metadata = log_plaintext.get(0);\n    let (log_metadata, log_type_id) = from_expanded_metadata(expanded_log_metadata);\n    let log_content = array::subbvec(log_plaintext, PRIVATE_LOG_EXPANDED_METADATA_LEN);\n\n    (log_type_id, log_metadata, log_content)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr"},"72":{"source":"use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note log content that are not the note's packed representation.\nglobal PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the log (e.g. log type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_log(log_metadata, log_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                oracle::message_discovery::deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nfn decode_private_note_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all private note logs must have at least {PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the private note log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = log_content.get(0);\n    let packed_note = array::subbvec(log_content, PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/private_notes.nr"},"73":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr"},"76":{"source":"use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n        log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse std::aes128::aes128_encrypt;\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/aes128.nr"},"80":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::to_expanded_metadata,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The \"2\" in \"N + 2\" is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    log_type_id: u64,\n) -> [Field; (N + 2)]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    let mut fields = [0; N + 2];\n\n    // We pack log type id and log metadata into the first field. Search for `decode_log_plaintext` function to see\n    // where the value gets decoded.\n    fields[0] = to_expanded_metadata(Note::get_id() as u64, log_type_id);\n    fields[1] = storage_slot;\n    for i in 0..packed_note.len() {\n        fields[i + 2] = packed_note[i];\n    }\n\n    fields\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_LOG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    log_type_id: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let plaintext = compute_note_plaintext_for_this_strategy(note, storage_slot, log_type_id);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\nfn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr"},"84":{"source":"global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\npub fn to_expanded_metadata(log_metadata: u64, log_type: u64) -> Field {\n    let metadata_field = log_metadata as Field;\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (log_type as Field) * U64_SHIFT_MULTIPLIER;\n    type_field + metadata_field\n}\n\npub fn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let metadata = (input as u64);\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    let log_type = ((input - (metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    (metadata, log_type)\n}\n\nmod tests {\n    use super::{from_expanded_metadata, to_expanded_metadata};\n\n    global U64_MAX: Field = 2.pow_32(64) - 1;\n    global U128_MAX: Field = 2.pow_32(128) - 1;\n\n    #[test]\n    fn packing_metadata() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(0, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let packed = to_expanded_metadata(0, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn unpacking_metadata() {\n        // Test case 1: All bits set\n        let input = U128_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let input = U128_MAX - U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let input = U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let input = 0;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn roundtrip_metadata(original_metadata: u64, original_type: u64) {\n        let packed = to_expanded_metadata(original_metadata, original_type);\n        let (unpacked_metadata, unpacked_type) = from_expanded_metadata(packed);\n        assert(original_type == unpacked_type, \"Log type bits should match after roundtrip\");\n        assert(\n            original_metadata == unpacked_metadata,\n            \"Metadata bits should match after roundtrip\",\n        );\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/metadata_packing.nr"},"88":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/hash.nr"},"100":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"103":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"104":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"105":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"109":{"source":"use crate::{\n    discovery::private_notes::MAX_NOTE_PACKED_LEN,\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{\n            stub_registry,\n            utils::{create_message_discovery_call, find_and_transform_top_level_unconstrained_fns},\n        },\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    find_and_transform_top_level_unconstrained_fns(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform message discovery, resulting in new private notes, partial notes and events.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll\n                // not be modified by the macros that alter unconstrained functions. As such, we need to manually inject\n                // the unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_ciphertext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let message_discovery_call = create_message_discovery_call();\n    quote {\n        unconstrained fn sync_notes() {\n            // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n            // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n            // unconstrained execution context since it will not be available otherwise.\n            let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n            $message_discovery_call\n        }\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"110":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"114":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"117":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_public, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn find_and_transform_top_level_unconstrained_fns(m: Module) {\n    // Top-level unconstrained fns are contract entrypoints, but they're not explicitly designated in any way. They're\n    // the fallback case for a function that matches no other rules.\n    // TODO(#12743): improve this\n\n    // We first find non-standard contract entrypoints, i.e. functions in the `contract` mod that are not private or\n    // public, but which *are* contract entrypoints (i.e. they're not opting out via the #[test] or\n    // #[contract_library_method] attributes). Ideally entrypoints would be explicitly designated instead.\n    let non_private_public_entrypoint_functions = m.functions().filter(|f: FunctionDefinition| {\n        !is_fn_private(f)\n            & !is_fn_public(f)\n            & !f.has_named_attribute(\"contract_library_method\")\n            & !f.has_named_attribute(\"test\")\n    });\n\n    // TODO: uncomment the code below and emit a warning once support for them is added to Noir (tracked in\n    // https://github.com/noir-lang/noir/issues/7714). We can't simply print a message since that'd otherwise break the\n    // output of utils such as `nargo test --list-tests`.\n    // // We don't expect to see any custom constrained entrypoints (i.e. private functions created outside of aztec-nr's\n    // // #[private] macro, possibly resulting in a non-standard interface).\n    // for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n    //     !f.is_unconstrained()\n    // }) {\n    //     let name = f.name();\n    //     warn(\n    //         f\"found private contract function '{name}' which does not have the #[private] attribute - make sure you know what you're doing!\",\n    //     );\n    // }\n\n    // An unconstrained contract entrypoints is what we call a top-level unconstrained function, to which we apply the\n    // appropriate transformation. Ideally these would be explicitly designated as such instead.\n    for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n        f.is_unconstrained()\n    }) {\n        transform_top_level_unconstrained(f);\n    }\n}\n\npub(crate) comptime fn transform_top_level_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"119":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"120":{"source":"use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"124":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"126":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"129":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"132":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"133":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"135":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"141":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"142":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"143":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"145":{"source":"use protocol_types::constants::{ARCHIVE_HEIGHT, NOTE_HASH_TREE_HEIGHT};\n\nglobal NOTE_HASH_TREE_ID: Field = 1;\nglobal ARCHIVE_TREE_ID: Field = 4;\n\n// Note: We have M here because we need to somehow set it when calling get_membership_witness function and one way to\n// do it is to set M here and then set type of the return param, e.g.:\n//\n// `let witness: MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> = get_membership_witness(...);`\n//\n// Another way to do it would be to add \"type_hint: [Field; T]\" as argument to `get_membership_witness` but that's\n// a bit too boilerplatey for my taste.\npub struct MembershipWitness<let N: u32, let M: u32> {\n    pub index: Field,\n    pub path: [Field; N],\n}\n\n#[oracle(getMembershipWitness)]\nunconstrained fn get_membership_witness<let N: u32, let M: u32>(\n    _block_number: u32,\n    _tree_id: Field,\n    _leaf_value: Field,\n) -> MembershipWitness<N, M> {}\n\n// Note: get_nullifier_membership_witness function is implemented in get_nullifier_membership_witness.nr\n\npub unconstrained fn get_note_hash_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n    get_membership_witness(block_number, NOTE_HASH_TREE_ID, leaf_value)\n}\n\n// There is no `get_public_data_membership_witness` function because it doesn't make sense to be getting a membership\n// witness for a value in the public data tree.\n\npub unconstrained fn get_archive_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<ARCHIVE_HEIGHT, ARCHIVE_HEIGHT + 1> {\n    get_membership_witness(block_number, ARCHIVE_TREE_ID, leaf_value)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_membership_witness.nr"},"147":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"148":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"149":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"151":{"source":"use crate::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"153":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"154":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"155":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"156":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"158":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"163":{"source":"use crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // docs:start:insert\n    pub fn insert(self, note: Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteType + NoteHash + Packable<N> + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"165":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"166":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"180":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"181":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"182":{"source":"pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr"},"183":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"184":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"186":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"187":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"189":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"191":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"192":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"195":{"source":"use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"213":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"256":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"257":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"271":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"273":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"274":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"275":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"284":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"288":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"290":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"291":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"300":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"311":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"325":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"329":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"330":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"346":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"347":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"349":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"355":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"356":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"358":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UnconstrainedContext, note::note_viewer_options::NoteViewerOptions,\n    state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UnconstrainedContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"359":{"source":"use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/filter.nr"},"362":{"source":"use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}