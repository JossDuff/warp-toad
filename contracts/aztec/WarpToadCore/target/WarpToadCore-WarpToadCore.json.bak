{"noir_version":"1.0.0-beta.3+0000000000000000000000000000000000000000","name":"WarpToadCore","functions":[{"name":"receive_giga_root","hash":"6076076523132280067","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"giga_root","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["receive_giga_root"],"brillig_names":["receive_giga_root"]},{"name":"process_log","hash":"1868068257080869205","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"log_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2588366281349374274":{"error_kind":"fmtstring","length":136,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"3473764466780631008":{"error_kind":"fmtstring","length":106,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5533887251808526417":{"error_kind":"fmtstring","length":120,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["process_log"],"brillig_names":["process_log"]},{"name":"public_dispatch","hash":"3107040626052087607","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15748358241952124793":{"error_kind":"string","string":"wow too big!"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"sync_notes","hash":"14650011709505035027","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"get_all_giga_roots","hash":"2198614918027806189","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":4096,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"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71U39L3qhr5X3dD3qhv6XnVj36tu7HvVjX2vurHvVVfiRW81w+971Y19r7qx71U39r3qxr5X3dT3qpv6XnVT36tu6nvVlXjdWs3w+151U9+rbup71U19r7qp71U3973q5r5X3dz3qpv7XnUlXrxWM/y+V93c96qb+151c9+rbu571S19r7ql71W39L3qlr5XXYlXsNUMv+9Vt/S96pa+V93S96rb8bvgbuGbqeMXvN3j73rdvcXf9cJ7i7/rlfcWf9dL7y3+rtfeW/xdL763+LtefW/xd7383uLvfP3t+JVh9/g7X387frnXPf7O19+OX8N1j7/z9bfjF2bd4+98/e341Vb3+Dtff/t+YdUt/s7X375fWXWLv/P1t++XVt3i73z97fu1Vbf4O19/+35x1S3+ztffvl9ddYu/8/W375dX3eLvfP3t+/VVt/g7X3/7foHVLf7O19++X2F1i7/z9bfvl1jd4u98/e37NVa3+Dtff/t+kdUt/s7X375fZXWLv/P1t++XWd3i73z97ft1Vrf4O19/+36h1S3+ztffvl9pdYu/8/W375da3eLvfP3t+7VWt/g7X3/7frHVLf7O19++X211i7/z9bfvl1vd4u98/e379Va3+Dtff/t+wdUt/s7X375fcXWLv/P1t++XXN3i73z97fs1V7f4O19/+37R1S3+ztffvl91dYu/8/W375dd3eLvfP3t+3VXt/g7X3/7fuHVLf7O19++X3l1i7/z9bfvl17d4u98/e37tVe3+Dtff/t+8dUt/s7X375ffXWLv/P1t++XX93i73z97fv1V7f4+15/TefvvzKdv//KdP7+K9P5+6/M1Pf6a9S//6qYMgdSQn6NX/36W/znxXaaynP8rxfnab42u8elNoWVa0uOn9eW8vXauy7q13UhXdTXC0K6qK9DZHTR/34xIV3U101Cuqivx4R0UV/nCeni0WVVF/W+kJAu1LvrulDvrutCvbuuC/Xuqi763+cnpAv17rou1LvrulDvruviR9Ulztf++NGKFWGGLXj3hBm24t0TZtiSd0+YYWvePWGGLXp3hNH/Fs1NYe7x91ud3uPvt4q8x99vtXeP33cef7/F0z3+fmuce/z9liL3+PutGO7x97uwf8Sv/y2aO/F3vv5qf4umNSV/XuzzFL8vDL1bro3+EXL2a3/4cbzI3Ty+7/9wnOw8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","names":["get_all_giga_roots"],"brillig_names":["get_all_giga_roots"]},{"name":"mint_for_testing","hash":"2746166926396095933","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["mint_for_testing"],"brillig_names":["discover_new_messages","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"mint_giga_root","hash":"1554984535494319782","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"7Z3djuw4kqTfpa7rQvwn51UGi0FPT++ggEL3oLtngcVg330jUylFZAUzlKlwKlzkd1M455QYdJkZSXcTJf7PL//xl3//7//8t9/++r//9o9f/uVf/+eX3//25z/987e//fXyt//5xfj3f/vHf/3pr29//cc///T3f/7yL9bn8usvf/nrf1z+GIL/f7/+8r9/+/0vv/yLMeX//Xp/tfXTcrWNdr26TJWL3VTCx8XOxPz4YhNK8B9XX/58c7lNsRaJsXGJxPhwvbq42q+76JYf92b6dPX/+vUXE4DmK2gi0HwFTQKar6DJdWisu0ITNqDxJi5Aejtdr47hvYfSugc71XowPqeywjqZLYKNs2a53IV4c3WNBDO5NaTLn3O8janGWSpX0rK9uwVz/luw1VsI3q0xhZCnT7fw1szVmnljl9HmTbpG9jZM7y4uJq23cTMyzWQrF2drlqF5uQe7MdZS8cvVqbyNr4dXXzC/qvR6bS1mm8w6+STnHl9sUlp++EJC2Lh4MldWbycT/w63B+4j4Q7AfSTcEbiPhDs9DfdlyQrrkhXjJ7zfesjNeyite3BT8x5M8x5s8x5c8x588x5C8x6en+CMzWu14a256yE170FgTBe3ztIluo1Z+jLZLpO0uZ2jXbXMM2tdYm36dPVb7OW8sfvpxLEb1bE7u8bu72O3J47dnTh2rzr2cI09mbvYw4ljjyeOPemeI29it3ex615X16rD2hLvYte9rj6MPeheVx/HrntdvdF7uZvfw9Hrao7T1S4NG8G3K/ZtWVFx01b97lYIjXPmmWI/OOA+Em4/JtwvsrJCAO4j4Y5nhfsteIkk0awWSbmB8otF0y93mm6RzNWnwzkusducb8yX/B56Pm/o5bShx+m8oZvzhm7PG7o7b+j+vKGH84Yezxv6eVfTeN7VNJ53NU3nXU3TeVfTdN7VNJ13NU3nXU3TeVfTdN7VNJ13NU3nXU3TeVfTfN7VNJ93Nc3nXU3zeVfTfN7VNJ93Nc3nXU3zeVfTfN7VNJ93NS3nXU3LeVfTct7VtJx3NS3nXU3LeVfTct7VtJx3NS3nXU3L0avpNZp887rnW+iXaMw06Qrn6FWvxOv7ZZPZYDY4u2yiCC5svRje3S6RC4Kwo5gdBzuK2fGwo5idADuK2Ymwo5idBDuK2cmwo5idAjt62TET7ChmB69AMzt4BZrZwSvQzI6HHcXs4BVoZgevQDM7eAWa2cEr0MwOXoFidixegWZ28Ao0s4NXoJkdvALN7HjYUcwOXoFmdvAKNLODV6CZHbwCzezgFShmx+EVaGYHr0AzO3gFmtnBK9DMjocdxezgFWhmB69AMzt4BZrZwSvQzA5egWJ2PF6BZnbwCjSzg1egmR28As3seNhRzA5egWZ28Ao0s4NXoJkdvALN7OAVKGYn4BVoZgevQDM7eAWa2cEr0MyOhx3F7OAVaGYHr0AzO3gFmtnBK9DMDl6BYnYiXoFmdvAKNLODV6CZHbwCzex42FHMDl6BZnbwCjSzg1egmR28As3s4BUoZifhFWhmB69AMzt4BZrZwSvQzI6HHcXs4BVoZgevQDM7eAWa2cEr0MwOXoFidjJegWZ28Ao0s4NXoJkdvALN7HjYUcwOXoFmdvAKNLODV6CZHbwCzezgFShmp+AVaGYHr0AzO3gFmtnBK9DMjocdxezgFWhmB69AMzt4BZrZwSvQzA5egV527IRXoJkdvALN7OAVaGYHr0AzOx52FLODV6CZHbwCzezgFWhmB69AMzt4BYrZMXgFmtnBK9DMDl6BZnbwCjSz42FHMTt4BZrZwSvQzA5egWZ28Ao0s4NXoJgdi1egmR28As3s4BVoZgevQDM7HnYUs4NXoJkdvALN7OAVaGYHr0AzO3gFitlxeAWa2cEr0MwOXoFmdvAKNLPjYUcxO3gFmtnBK9DMDl6BZnbwCjSzg1egmB2PV6CZHbwCzezgFWhmB69AMzsedhSzg1egmR28As3s4BVoZgevQDM7eAWK2Ql4BZrZwSvQzA5egWZ28Ao0s+NhRzE7eAWa2cEr0MwOXoFmdvAKNLODV6CYnYhXoJkdvALN7OAVaGYHr0AzOx52FLODV6CZHbwCzezgFWhmB69AMzt4BYrZSXgFmtnBK9DMDl6BZnbwCjSz42FHMTt4BZrZwSvQzA5egWZ28Ao0s4NXoJidjFegmR28As3s4BVoZgevQDM7HnYUs4NXoJkdvALN7OAVaGYHr0AzO3gFitkpeAWa2cEr0MwOXoFmdvAKNLPjYUcxO3gFmtnBK9DMDl6BZnbwCjSzI+AV5Dh9xc6lCzc9X/DaUBbcbXy74qEAjLWrXKy7Iu98qcnF5eXq4qd0/e1cpbTkj4tdnK5Rm1S72LqFJ2e9vb34HRcDLlVcLLhUcXHgUsXFj4qLW1c653K+wyWASxWXOCoul59bLvbWPr7YZrfgYbPfutj49WIT0h3iCcSlEbfTmjBat3FxSG7JcUu5vb13cjLk6CWnQI5acsywhU1DcsKKh035GXKGra7OQM6wJV47cq5Jr3U31tRHCmaGLR5fhrgH8YMRH7bgbYe4X8OwwaXHF5uQ7QJHnKY7eqi7VdNDkf5aepJdLjYpmGeyKyr6Xpik/O+ESYtX8GIm0/qQOn1OHX/KJMZCL0ziQnyLyRhXJrdcn40HQRYXQhxxMTvbesjRSw7ehjw5Una2xdlQTA6+hjg5j31Yi/9wNOL4BAcj7qjnxREXNLMdRbpqeqi8X0uPmK/pqOh7YdLDZCdM4hW8mEkph9phLPTCJC7Ed5gsfgnDlvRkjokLcTTiuBDiiIslBR7DQjE52BWKycGskCdHKq/y+A+KyfHDkpPdSk7ZqkgE37T245b+zRAX28Phx63mT0DOuAX6CcgZt5ZvR47UBhs/btmvn5wwbtnfjJzHO0PCuLX8qxAft0B/FeLjVt3NEBfcXhM89GimhyL9tfSIWcOBir4XJin/e2ESr+DFTEo9PggYC50wGXEhvsWk3JvWERdCHHExOztiWCgmB29DnhwpOzt6yNFLDr6GODmPfdiI/3A04vgERyNOPS+OuKCZHSnSNdOTqLxfS4+Yr5mo6HthkvK/FybxCl7MpJRDnTxMdsIkLsR3mBR87zfhQhyNOC6EOOJySQGGhWJysCv0kpMxK+TJkcqrMv6DYnIELIVYzBJ5CuEs5Dw+Gz47cKni4sGliksAlyoucVRcrg8nncv5DpcELlVc8qi4tDsk6fGGz1xAXO1J8WWCHL3kGMjRS86whU1DcqQ2fJZhq6szkOMh59jz58uwxePLEB+2LH0Z4sMWvEpOv338YLhQd6umhyL9tfRIPar0ExV9L0xS/vfCJF7Bi5kUepztJ4yFXpj0MCl9gtXDB0F+woUQR1zKzvYThoVicvA25MkRsrP9hLOhmBx8DXFyHvqw3uA/HI04PsHRiFPPiyMuZ2Z7Q5Gumh4PPV2c5+4NFX0vTFL+98IkXsGLmZRyqA3GQi9M4kL8i/RZwI9zTIsLcTTiuBDiiIslBRbDQjE52BWKyfGQI06OVF5l8R8UkzOupdDskKTHG2zsuKW/+pPivR23mj8BOeMW6PrJcePW8u3Ikdpg48Yt+09Azrhl/2vOn/du3Fr+VYh7ED8Y8XGrbh2n3z424h11t2p6KNJfS4+YNeyo6HthkvK/EyY9XsGLmZR6fOAxFnphEhfiW0zKvWntcSHEERezs72HHL3k4G3IkyNlZ3ucDcXk4GuIk/PYh/X4D0cjjk9wMOKBel4ccUEzO1Ckq6aHyvu19Ij5moGKvhcmPUx2wiRewYuZlHKoA8ZCL0ziQnyHScH3fgMuxNGI40KIIy6WFEQMC8XkYFcoJgezQp4cqbwq4j8oJsc/T05eb9MWYz+R896FQK2bo7124e67eL4Ic5NdyZpuLl67SG27uPzt3//+2++///af//b73/78p3/+9re//uOt7fT2n/qjjAvw65v8U7gB3pq3kOsG+1Yju6eR29PI72kU9jSKexqlPY3ynkZlR6O4RxFxjyLiHkXEPYqIexQR9ygi7lFE3KOIuEcRcY8i0h5FpD2KSHsUkfYoIu1RRNqjiLRHEWmPItIeRaQ9ish7FJH3KCLvUUTeo4i8RxF5jyLyHkXkPYrIexSR9yii7FFE2aOIskcRZY8iyh5FlD2KKHsUUfYoouxRRNmjCDNNu1qZXa3srlZuVyu/q1XY1SruapV2tcq7Wu3ShtmlDbNLG2aXNswubZhd2jC7tFH/OroLdm0V4tUaSFO12l8fh03X2vdihFSuzdPiImRXNq4teXkmV8rna98DT2cNPJ818HLSwOtfTD5D4OasgduzBu7OGrg/a+DhrIGfdeW0Z105reKVM66PdKbJ3keueOl8HLlTvHZuRK548dyIXPHquRG54uVzI/Iv1s+0vEPo0s12pS8iD8vzs8uztutT4OQqF1+/cu3tzaO24OZo6otiun4aO/vyOBoX10d/LrlrF8nOPcTmPaTmPeTmPZTWPdS/6iLag2neg23eg2veg2/eQ/Mx7ZuPad98TPvmY9o3H9Oh+ZgOzcd0aD6mQ/MxHZqP6dB8TIfmYzo0H9Oh+ZgOzcd0bD6mY/MxHZuP6dh8TMfmYzo2H9Ox+ZiOzcd0bD6mY/MxnZqP6dR8TKfmYzo1H9Op+ZhOzcd0aj6mU/MxnZqP6dR8TOfmYzo3H9O5+ZjOzcd0bj6mc/MxnZuP6dx8TOfmYzo3H9Ol+ZguAmM6T3G92Jm7HmzzHlzzHnzzHkLzHmLzHlLzHnLzHopsDzefb557sJPAmE5+fV8ph+m2h4ZPoe1kThu5PW3k7rSR+9NGHk4beTxt5Om0kefTRl7OGrk57RpqTruGmtOuoea0a6jRvIY+3FZkjeZFdCN0zavoRuial9GN0DWvoxuha15IH4duBVbSHMt6cZr+WO9a07wH27oHid0OGz1IuDPrWuKKMXc9pOY95OY9lNY9SOx22OjBNO/BNu/BNe/BS/Rgrz24ux5y8x4E1Fry+hmjaQqPlwV7iefjYuvKzTeP3j8xaSUe+kuGY3SFY3WF43SF43WFE3SFE3WFkw4PZ7qGk+/CybrCKarCyUfPymFaPwoYTLgN5/5iP60LnJ/uhZaN6tijeRT70fO9j+uhbMG6x7FfnyDeBmG8mUN35w3dnzf0cN7Q43lDT+cN/fl1L6S1h5BuTmeohm58Wq2ecPst1hwrV8dpSSHi7WuYebaFBLY2vSx2gU1Tr4vdnDh2e+LY3Ylj9yeOPZw49nji2NOJYz/xulrOu6666bzrqpvOu666yWtOgdejxvPth/MvKXDlh41bQrbm5lgRX8PkYi4stzd9uvQdEtW12GsgUV3jvQQS041KprKesmFuDjepQnI99OPTmR/VHzYlm/VUspLtzf6AMs0YdiOrF2Ko2sM4CYYZDJ/GsIDhsxjaCQyfxtCA4dMYqn58dRIMVT9HOwmGHgyfxpA65XkMqVOex5A65XkMqVOex5A65WkMHXXK8xhSpzyPIXXK8xhSpzyPoQfDpzGkTnkeQ+qU5zGkTnkeQ+qU5zGkTnkaQ0+d8jyG1CnPY0id8jyG1CnPY+jB8GkMqVOex5A65XkMqVOex5A65XkMqVOexjBQpzyPIXXK8xhSpzyPIXXK8xh6MHwaQ+qU5zGkTnkeQ+qU5zGkTnkeQ+qUpzGM1CnPY0id8jyG1CnPY0id8jyGHgyfxpA65XkMqVOex5A65XkMqVOex5A65WkME3XK8xhSpzyPIXXK8xhSpzyPoQfDpzGkTnkeQ+qU5zGkTnkeQ+qU5zGkTnkaw9xPnZLKFcP0GMOHn9XM/ZQdYpD0U0VIQVJeqRI3PYYkxWWOSCneRW5PG7k7beS+ZeTvPYTmPcTmPTyfWPrJhbWHssGvc2Yd4c5dZwMT3BxPVhZPURWPF/hivmw8Rlk8Vlk8Tlk8Xlk8QVk8UVk8uuZnPzWdn997KK17MFPzHgRmReOXMtI7Mz1mLU/L0SDZXX/XplC5tqyHZJfy+dr3yO1pI3enjdyfNvJw2sjjaSNPp408nzbyctbIBQ4XeFXkp11D7WnXUHvaNVTgo/GvilxiPl9Pe7skcHfZqM3Neyite3BT8x5M8x5s8x5c8x588x5C8x5i8x6aj2nXfEy75mPaNx/TvvmY9s3HtG8+pn3zMe2bj2nffEz75mPaNx/TvvmYDs3HdGg+pkPzMR2aj+nQfEyH5mM6NB/TofmYDs3HdGg+pmPzMR2bj+nYfEzH5mM6Nh/TsfmYjs3HdGw+pmPzMR2bj+nUfEyn5mM6NR/TqfmYTs3HdGo+plPzMZ2aj+nUfEyn5mM6Nx/TufmYzs3HdG4+pnPzMZ2bj+ncfEzn5mM6Nx/TufmYLs3HdGk+pkvzMV2aj+nSfEyX5mO6NB/TpfmYLs3HdGk9psM0Ne/BNO/BNu/BNe/BN+8hNO8hNu8hNe8hN++h+Zg2zce0aT6mTfMxbZqPadN8TJvmY9o0H9Om+Zg2zce0aT6mbfMxbZuPadt8TNvmY9o2H9O2+Zi2zcd0831kofk+stB8H1lovo8sNN9HFprvIwvN95GF5vvIQvN9ZKH5PrLQfB9ZcJr35MflWjNN9tPF76Fr3pT/OHSveVf+Ruiat+VvhK55X/5G6Jo35m+E7luG/t6DwEzvrF97uHntdekhNu8hNe8hN++htO5BYu/fRg+2eQ+ueQ++eQ/NR1xoPuJC8xEXmo+40HzESez92+ih+ZiOzcd0bD6mY/MxHZuP6dh8TMfmYzo2H9Ox+ZhOzcd0aj6mU/MxnZqP6dR8TKfmYzo1H9Op+ZhOzcd0aj6mc/MxnZuP6dx8TOfmYzo3H9O5+ZjOzcd0bj6mc/MxnZuP6dJ8TJfmY7o0H9Ol+Zguzcd0aT6mS/MxXZqP6dJ8TJfWYzpOU/MeTPMebPMeXPMefPMeQvMeYvMeUvMecvMemo9p03xMm+Zj2jQf06b5mDbNx7RpPqZN8zFtmo9p03xMm+Zj2jYf07b5mLbNx7RtPqZt8zFtm49p23xM2+Zj2jYf07b5mHbNx7RrPqZd8zHtmo9p13xMu+Zj2jUf0675mHbNx7RrPqZ98zHtm49p33xM++Zj2jcf0813ecXmu7xi811esfkur9h8l1cMzcd0831ksfk+sth8H1mU2EcW15PifDbltocnN50++qZylNif9qLI42kjT4ojf7hFOUps1HtV6OW0oUtsLXxV6Oa8odvzhi6w4mXv1tDDRuiPjpeMEhsy5YIJmoKJLYN57yE17yE37+H5iTuYuJzVFkyeHlPmbFneA3TO+PXimTOBLaGS0RhV0diDo3GxrNHkdBNNRWRmjdxbk/4YuTtt5F40cmvzH8efwNbYrR5i8x6enwdDmpakPqSUH/NrfFoX6GCuZ4SbXGM4ri8eX56A3Fw7L+YCm25fF3s5b+wCm2xbxu6Xiy8ezX3sQXXscXlJ9ZI+3MceD449mLDG7vyn2N/jScriycriKbriEdgM/EPte3ONJ2xo3xSb16FSbPnjei6w0fiV0dtTR+9OHb0/dfRNV6z3HmLzHlLzHgTm/osRtfRQQnrMsS9prWluZ9ratTZNy7Juk7V/5LecNPIksBH9VZGb00ZuTxu5O23k/rSRh9NGHk8beTpt5GddQ9N02jXUnHYNNaddQ42aNfQ9GjXr4ns0ata692jUrF/v0ahZk96jUbPOvEejZu14j0bNevAWjVUzx79Hc/C8Hez6/Mnn+2isqmicqmi8qmiCqmiiqmiSqmiyqmiKpmjcwXNxCOtcnO/nYmdURWNVReNUReNVRRNURRNVRZNURZNVRVM0ReNVzcW+6Vz83oNt3oNr3oPAPFjKsk0hurCxH9CkNH1cbNLNfsBkfmz7CLz997LQ43lDT+cNPZ839HLa0AVe3XxZ6Oa8odvzhu7OG/p5V9Nw3tU0nHc1DeddTcN5V9Nw3tU0nnc1jeddTeN5V9N43tVU4H1aqdDfw9GzQr6Ho2fVew9Hz0r2Ho6e1ek9HD0rzls4Sc8q8h6OnpXhPRw9s/17OHpm8PdwdM3KSdesnHTNyknXrJx0zcpJ16ycdc3KWdesnHXNylnXrJx1zcpZ16ycdc3KWdesnHXNylnXrFx0zcpF16xcdM3KRdesXHTNykXXrFx0zcpF16xcdM3KRdWsnCdVs3KeVM3KeVI1K+dJ1aycJ1Wzcp5Uzcp5UjUr50nVrJwnVbNynnTNykbXrGx0zcpG16xsdM3KRtesbHTNykbXrGx0zcpG16xsdM3KVtesbHXNylbXrGx1zcpW16xsdc3KVtesbHXNylbXrGx1zcpO16zsdM3KTtes7HTNyk7XrOx0zcpO16zsdM3KTtes7HTNyl7XrOx1zcpe16zsdc3Kit6lfQ9H16ys6J3X93B0zcqK3k19D0fXrKzoHdL3cHTNyore9XwPR9esrOidzPdwdM3Kit6dfA9H16ys6B3H93B0zcqK3kV8D0fXrKzoncH3cHTNyrre7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7ty7re7cu63u3Lut7tK7re7Su63u0rut7tK7re7SuTqlm56Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerev6Hq3r+h6t6/oerevHP5uX1kPxDUl5LtwDp+Vi/+42E5TuQ3n/uI8Lddmd73UplC5tuT4cW0pn699v007xm26MW7Tj3GbYYzbjGPcZhrjNvMYt1mGuM3j33l9zW2OkQXFMbKgOEYWdPw7xa+5zTGyoDhGFhTHyILiGFlQ7CYLisu1Zprs3X2mbtKgjfvsJg/auM9uEqGN++wmE9q4Tz/IferJhd7D0ZOzvIejJ7d4D0dPDvAejp61+i2crGdJfQ9Hz8r3Ho6eBeo9HD3ryHs4eqb793B0zcpZ16x89BcCrCn542Kfp/h4bfZuvTb69VKTfe2Hr09SnbHm8Q/HyS73F6d4XcmN+UAlD4lKcG4JOYRyj0oBlXtUjv5sw0lQMaBSQcWCSgUVByoVVDyoVFAJoFJBJYJKBZUxc9stVMhta6iQ296jcnE5SW6rsJDdVmEhva3CQn5bhcUDSw0WMtwqLKS4VVjIcauwkORWYSHLrcFiyHKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcFiyXKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcHiyHKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcHiyXKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcESyHKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcESyXKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcGSyHKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcGSyXKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcHCkWd1WMhyq7CQ5VZhIcutwuKBpQYLWW4VFrLcKixkuVVYyHKrsJDlVmAxnH1Wh4UstwoLWW4VFrLcKiweWGqwkOVWYSHLrcJClluFhSy3CgtZbg0Wzj6rw0KWW4WFLLcKC1luFRYPLDVYyHKrsJDlVmEhy63CQpZbhYUstwYLZ5/VYSHLrcJClluFhSy3CosHlhosZLlVWMhyq7CQ5VZhIcutwkKWW4OFs8/qsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcHC2Wd1WMhyq7CQ5VZhIcutwuKBpQYLWW4VFrLcKixkuVVYyHKrsJDl1mDh7LM6LGS5VVjIcquwkOVWYfHAUoOFLLcKC1luFRay3CosZLlVWMhya7Bw9lkdFrLcKixkuVVYyHKrsHhgqcFClluFhSy3CgtZbhUWstwqLGS5NVg4+6wOC1luFRay3CosZLlVWDyw1GAhy63CQpZbhYUstwoLWW4VFrLcGiycfVaHhSy3CgtZbhUWstwqLB5YarCQ5VZhIcutwkKWW4WFLLcKy5hZbop2CTmb9AmW2tVmvTjehBFmCAc9J00UwjGzZ1EIx8y0RSEcMysXhdAD4bMQjpnti0I4ZmUgCuGQVUQo2V8hzBsQ+lTiGrO7Xm1LDQ7jp+W3jbdXOJz7SMXHPLfutZAPWf28EnI76Hl7k13uL07R3tXhdszz9m6UmLIPG0q01i03aN3NT4dQufiyAi5x5MtqdpVtih+ID1kwvRTxIeurlyLuQfxgxIes3l6K+JDF3ksRH702PB7x0UtDecTjcnG2U/mEeOUO8wq0z7dFjc8f/IxeRyrnZ8zjL0/ED9Wvbn6olXXzQ2Wtmx8PP6r5oWrXzQ81vm5+BnAE5hsdoBCfb3SAivb9Rkc4M3a+0QFqrPlGByhW5hsdIOufb9SPcqMD5KHzjQ6Q0M03OkpmNMIZpvONjpIZjXDO6Hyjo2RGI5wFOt/oKJnRCOd1zjc6SmY0wpma842OkhmNcO7lfKOjZEYjnE053+gomdEI50fONzpKZjTCGY/zjY6SGY1wDuN8o6NkRiOclTjf6CiZ0QjnGc43OkpmNMKZg/ONjpIZjXAu4Hyjo2RGI5zdN9/oKJnRCOfrzTc6SmY0whl4842OkhmNcE7dfKOjZEYjnCU33+gomdEI573NNzpKZjTCmWzzjY6SGY1wbtp8o6NkRiOcbTbf6CiZ0Qjnj803OkpmNMIZYfONjpIZjXCO13yjo2RGI5y1Nd/oKJnRCOdhzTc6SmY0wplV842OkhmNcK7UfKOjZEYjnP003+gomdEIZy7NNzpKZjTC+UXzjY6SGY1wFtB8o6NkRiOcqzPf6CiZ0Qhnzsw3Okhm5EY4X2W+0UEyIzfCQSXzjQ6SGbnJj3Kjg2RGboRDKOYbHSQzciMcuTDf6CiZ0QiHAMw3OkpmNMJn6ecbHSUzGuFD6fONjpIZjfDp7vlGR8mMRvkGthvlG9hulG9gu1G+ge1G+Qa2G+Ub2G6Ub2C7Ub6B7Ub5BrYb5RvYbpRvYLtRvoHtRvkGthvlG9hulG9gu1G+ge1G+Qa2G+Ub2G6Ub2C7Ub6B7Ub4Bvb9xTFFu4SczfVc9/oBfvF6ccw3YYQPCIc8Y1wUwhG+290awiFP6paFcMjDtGUhHPK8a1kIPRA+C+GQp0bLQjjkwc6yEA5QQ7SGkOrkaQiHrE5uTmiPuZQNCF1O608Xd73B927urjYux+Vy490N6LZMM+gjfG1fH+hDVkCvBn3ImkkO9BnEIasmaRA9ID4P4pCVkzSIQ9ZO0iAOWT1Jgzhk/SQN4pAVVLpc8nFxSi5sgGjStNygSfEGcpdqcEzu4+Lgp41rxTPWEc77GInOIau+fukcsp48A50zPUNWquehx0OPZnpGr65T9lv0BFNWxK23WyuKtyuZPl3v0ExVgkye1rDL9Wobcu3qyZn16nB9DOOmGtbZxCWSbKcri/Ytqnuw06orn8z1Li9PvD6kMrqHgFS+LZXRnRKk8m2pjO4HIZVvS2X0fQNI5btSGeGcOKQiI5XR92gglW9LZfSdJUjl21IZff8MUvm2VDxSQSrfkwpuLVL5plRwa5HKN6WCW4tUvikV3Fqk8k2p4Na+Vir+GrbPdkMqPq5X+3gDtYkzmyMcLz0Qm3iePbGJLdkTmziHPbHpYbMjNvHfemITi6wnNnGxemITo6knNvGCOmKz4AVtsxndymYOZYPNbNbXdLIpV6P2zXqdIcewORxyXJXDIVddXpn1Wps+QT7HridhmePRs+S+xeMnPYvGHI+eGXWOR890M8ejx4ac4/HK4tEzV83x6DEz5nj0lONzPLrmZ6/oKPX3eBSdeD7Ho2x+VnR++ByPsvlZ0WncczzK5mdFZ1vP8SibnxWdFD3Ho2x+VnTu8hyPsvlZ0SnGczzK5mdFZwLP8SibnxWdsDvHo2x+VnRe7RyPsvlZ0emvczzK5mdFZ6nO8SibnxWdTDrHo2x+VnTO5xyPsvlZ0amZczzK5mdF5znO8SibnxWdNDjHo2x+VnQG3hyPsvlZ0elsczzK5mdF54bN8SibnxWdTzXHo2x+VnSq0RyPsvlZ0Vk7czzK5mdFJ8DM8SibnxWdSzLHo2x+VnRGxRyPsvlZ0SkBczzK5mdF34Gf41E2Pyv6uvYcz8Hzs895/Z5AMf4+nnx0POYaj7W38dxfnKdl02R2tx9OCJVrS44f15by+dr5PssY93n0F1pfdp9mkPu0g9ynG+Q+/SD3GQa5zzjIfaZB7nOQfCgNkg/lQfKhPEg+lLvJh+JyrZkmW7nRbhKirRv1o9xoNynR1o12kxNt3Wg3SdHWjTbNiuYuSvMu2r5gP3dh2ndh23fh2nfh23cR2ncR23eR2nfRfnSX5qM7TFP7Lkz7Lmz7Llz7Lnz7LkL7LmL7LlL7LnL7LtqPbtN+dJv2o9u0H92m/eg27Ue3aT+6TfvRbdqPbtN+dJv2o9u2H922/ei27Ue3bT+6bfvRbduPbtt+dNv2o9u2H922/eh27Ue3az+6XfvR7dqPbtd+dLv2o9u1H92u/eh27Ue3az+6ffvR7duPbt9+dPv2o9u3H92+/ej27Ue3bz+6ffvR7duP7tB+dIf2ozu0H92h/egO7Ud3aD+6Q/vRHdqP7tB+dIf2ozu2H92x/eiO7Ud3bD+6Y/vRHduP7th+dMf2ozu2H92x/ehO7Ud3aj+6U/vRndqP7tR+dKf2ozu1H92p/ehO7Ud3aj+6c/vRnduP7tx+dOf2ozu3H925/ejO7Ud3bj+62+9VC+33qoX2e9VC+71qof1etdB+r1pov1cttN+rFgT2qkW3HmUeLyXRbRdP7j99uOk/COyBe1no+byhl7OGHgX2Ar4sdHPe0O15Q3fnDd2fN/Rw3tBPu5rG6bSraZxOu5rG6byrqTnvamrOu5oazavp4/fFotG8nG7Frnk93Ypd84K6FbvmFXUrds1L6lbsTdfUuYvSvAs7te/CtO/Ctu/Cte/Ct+8itO8itu8ite+i/ei27Ue3az+6XfvR7dqPbtd+dLv2o9u1H90Ce6/j5UHyx8UpuPR4xX58zHUU2OH8IJy5i+fVl4pZLk7l5hTz6h3btF5sk71eHNJHPE5ZPF5ZPEFZPFFZPElZPFlZPEVXPAI7yX8Yj/drPDHex2OUxWOVxXPw/OwudeLyyyaV+3i8sniCsniisnjS0fEE+yieePD841xcPtblXLL38Rhl8Vhl8Thl8Rw9/7gwrfHET/FUyospL+L3U7mfzGNQHfw6k9SDP3pmc2Wd2fzknkQ+qQ5+A/mDc1rnbV6Dv9nDtsZTdMWTJmXxGGXx2FfG4+/jccri8criCcriOXrmt6ms8cTyePI0MS9rnEn+usYZbz6iP3r2TG7NYJIPz61bqagO/vG6lY+el2O5Bv+5lq7oZlovNsZN97rJR8/iKcX1lz/P4jXo02pkf9Z85U7dehjW5QKzXu3chyed7TB36oa5Uz/MnYZh7jQOc6dpmDvNp7zTOfZy3tjLdOLYVWcmbknHfcqV2FXnGhuxP7+mSu5WEHhbUTScqCucpCscXTtdJN4qlAsnSbwpKBmO0RWO1RWOOzgcv87K4XM4tdCvBz9bc706foTuzxt6OG/o8byhp/OGns8bejlt6GY6b+jmvKHb84Z+3tVU4h29V4V+3tXUnHc1NeddTc15V1Nz3tXUnnc1teddTe15V1N73tVU4n3NV4V+3tXUnnc1tUevpm6NJvqN0Ld25SSbzxx8OXHwbjpz8ObMwdszB+/OHLw/c/DhzMFHvcHH60dZkr/ZAlj9YZPd8iDZTvZmv2BwH3eqeDkWvlPFa/eDO51jV7x0b8Xu1azcczhNv/l8f7G9SYfzdN3em8zPn2G2PaKtcezhxLHHE8eeThx7PnHs5byxtz2479nY5byItqcHKrpPO8h9ql7bBe/TD3KfqnMGwftUnV8I3qfqXOQHNc/Gd1FTUJ24SN6o6ixH8Eaj6pRI8kZV50SSN6o6KZK8UdVZkeSN+lFuVHVeJHmjqhMjyRsdJTOKo2RGcZTMKI2SGaVRMqM0SmaURsmM2p4grulGR8mM0iiZURolM0qjZEZplMwoj5IZ5VEyozxKZpRHyYwEvjh2khsdJTPKo2RGeZTMKI+SGeVRMqPSS2ZkQ1wutvHmgXf1h00JyxblSzzmBpaP5+OllzxKGJZesi5hWHrJ0YRh8cBSg6WX/E8Yll6yRWFYeskthWHpJRMVhqWXvFUUljyNmeXm9YgCO7nPsNxfnc16akY2JVVAHDMnFgZxzAxaGMQx821hED0gPg/imLm8MIhjZv7CII5ZJ/wQxLjcYLZTqYA4ZlUhDOKYNYgsiIaKRQBEKhYBEKlYBECkYhEA0QPi8yBSsQiASMUiACIViwCIVCzbIFpzBTHYjavfzoT7uPryOMVtXO3WJw/+5lN31tehW/biWGvs7cUzldRNvVBpqd66oZIashsqqWS7oZJ6uhsqPVT2QiXeQjdU4nB0QyU+SzdU4vZ0QyVuTy9UOtyebqjE7emGStyebqjE7emGSg+VvVCJ29MNlbg93VCJ29MNlbg93VCJ29MLlR63pxsqcXu6oRK3pxsqcXu6odJDZS9U4vZ0QyV15WmotO5KpQ93VOo+Nxkqb+8wmeULHjY5d08lGWw3VJLBdkOlh8peqCSD7YZKnld2QyXPK7uhkrqyGyp5XtkLlZHnld1Q2Yvb46xfQHFu64ets0vI1vvtL+ZsfCg19uKzvBTEXhyOl4LoAfF5EHup6l8KYi/19EtB7KWSfSmI3dSQZc3lnLHm8Q+nyyVLRpnc9TGfMdXcNk3LDZoUr2gYl2qQrxfn5DaulSazmyoSMnPqpo6EzJy6qSSdX+p8528OuK2vVdevqVrr0tMgdlNJvhLEbirJV4LoAfF5ELupJF8JYjeV5CtB7KaSfCWIVJLb+Wq0fs1XU9zIQd00mSWQKW9dLZ2xUkv2RGemmuyKzm72oauh06Qlamdt2qJTdu3M3exFh843OrvZjw6dFzrLkKMzBrfUEjGE8onOGZYhVb4NiweWGizdvA0gC0s3O+tlYelml7osLEN6LNuwDOlVbMFSpiFr/m1Yhqydt2Ehy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcFiyHKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwDJnlhpKXx77x4tt+guX+apfXR7OuuOsNvndzd7VxOS6XG+9iXq+3ZfoAfcgc+sWg2yEz9FeDPmT+Lwf6DOKQ1YI0iEPWFtIgekDcBtGum8SKTxUQh6xbpEEcssqRBnHImkgaRCooARCpiJ4HsZ8T6V8JIhWLAIhULAIgUrEIgOgB8XkQqVi2QSzr2z5+uvk8bN06y9d3g7Kdrr9dfzfIZ+tWPNz1hXrn8wdBVEPKCaLSUk4QVZxygqgQdRPUzwnZvRJEZaucIKpm5QRRkb+YoBXpC1dThSAPQboJwklQThBOgnKCcBKUE4SToJwgnATdBAWcBOUE4SQoJwgnQTlBOAnKCfIQpJsgnATlBOEkKCcIJ0E5QTgJ0gQpOfH7YkJ8XGutsbcXz8TjUIxJfMT5GJR4HJVBicepGZR4HKBBifcQPybxOFaDEo8TNijxOGyDEo9zNyjxOHdjEp9w7gYlHuduUOJx7gYlHuduUOI9xI9JPM7doMTj3A1KPM7doMTj3A1KPM7dmMRnnLtBice5G5R4nLtBice5G5R4D/FjEo9zNyjx1PGdEm/dlXgf7ogvZPWdEp9WPGxy7p54svpBiSerH5R4D/FjEk9WPyjxPI8flHiexw9KPHX8oMTzPH5E4u008Tx+UOKHdO5SiMsvp3hz6MwXxDu7/PKN93nxv2cEh7TARBEc0ksSRdCD4JMIDuluiCI4pE0giuCQ9bYogkMWrqIIDlkBpsslC4LJhQ0ETZqWGzQp3pQNLtXgmJbzDYOfNq51Oa1BFzdtlBjG5bhcbryL+Zrdl2mm0wxZ1/VL55jVWrd0jlk6noDOmZ4x69LT0OOhRzM9Y1bUauixeaXHpwo9Y5brp6FnTC/gNPSMaTSchh5cDM30WFwJ1fTgMqimB9dANT24Bqrp8dCjmR5cA9X04Bq8kp6mB6NatyJ98xD542DUC/U4EsNSj9sxLPU4KaNS73BphqUeB2hY6nGXhqUe52pY6j3U90r9yuFFBVOFehy3YanHzRuWety8YanHzRuWety8Uan3uHnDUo+bNyz1uHnDUo+bNyz1HupHpR43b1jqcfOGpR43b1jqcfOGpR437zzUn+EELzsFXEIkJSwp3EckJSwpXE0kJSwp3FIkJSwpj6SQlKykcHeRlLCkcI2RlLCkcKORlLCkcLmRlLCkcM+RlKykIu45khKWFO45khKWFO45khKWFO45khKWlEdSSEpWUrjnSEpYUrjnSEpYUrjnSEpYUrjnSEpYUrjnSEpWUgn3HEkJSwr3HEkJSwr3HEkJSwr3HEkJS8ojKSQlKynccyQlLCnccyQlLCl8KST1Q0lZd5WUD3eSylR8SOqHkkor0jY5dy8pKj4kJSwpj6SQlKykqPiQlLCkqPiQlLCk2C+FpIQlxX4pJCUsKXwpJCUrqcJ+KSQlLCn2SyEpYUnhnktLKi6PK0LJG9d6G9aDn22+uUW30EP1JExPXi/OyW1ca9064q1L6dOonOmhElFND1m9YnrMRIasmh6yTdX0kLmppoc9BKrp8dCjmR6ebaumh+fEL6XHrvR4bz7RU/nlB6eazWTiMXREJo5ER2TiX/RDpsHt6IhMvJGOyMRJ6YhMfJeOyPSQ2Q+ZeDodkYkD1BGZOEDnIfMUL/obgw+FpIQlhRuGpGQlZfHkkJSwpHAGkZSwpPAnkZSwpHBJkZSwpDySQlKyksIxRlLCksK3RlLCksI9R1LCksI9R1LCksI9R1KyknK450hKWFK450hKWFK450hKWFK450hKWFIeSSEpWUnhniMpYUnhniMpYUnhniMpYUnhniMpYUnhniMpWUl53HMkJSwp3HMkJSwp3HMkJSwp3HMkJSwpj6SQlKyk8KWQ1A8l9fikehOo+JDUDyX1+PgmE6j4kJSwpKj4kJSwpKj4kJSwpDySQlKykmK/FJISlhT7pZCUsKTwpZCUsKTYL4WkhCXFfikkJSupiHsuLKlizcfFJYSNa8OU1mPtzXQrwIUenGjV9ODqqqYHh1Q1PR56hNOZ7JaLp5sb/IIfY678hFjhB+tONz/4YLr5wVTSzQ8OjW5+sDtU85PwDnTzg3mgmx/cA938YB+8kh97PWDR2rcrfnnkiW8ex5g8bHbEJt5ET2ziZPTEJr5HT2zikvTEJp5KR2xmHJie2MSv6YlN3J2e2MQL6olND5vnYfMcnzbJOFJoSlpT+GJoSlpTuHNoSlpTeIRoSlpTOJVoSlhTBb8UTUlrCtcWTUlrCu8YTUlrCgcbTUlryqMpNCWsKXx0NCWtKXx0NCWtKXx0NCWtKXx0NCWtKXx0NCWrKTvho6MpaU3ho6MpaU3ho6MpaU3ho6MpaU15NIWmhDWFj46mpDWFj46mpDWFj46mpDWFj46mpDWFj46mhDVl8NHRlLSm8NHRlLSmPJpCUz/UlHVXTflwrynqPjT1U009Ps3OGuo+NCWtKeo+NCWsKUvdh6akNUXdh6akNcX+KTQlrSn2T6EpaU15NIWmhDXF/ik0Ja0p9k+hKWlN4U9taypav2oqbcqkTOuTixLcxtV+mhYJ+snf6vWDIOchSJYgN01mCWTKm3S666h36fOonwlipVdOEMumcoJ4lqucIB6MKieILE43QZ5HdsoJ4vmXcoJ4mKScIJ7MvJgguxLkvflEUMWe2jjk7PIT0NkTnbgUXdGJp9EVnTggXdGJX9IVnbgrPdEZ8GK6ohPnpis68Xm6ohNXqCs6PXSeiM5zfB8g4E0hKnFR4ZAhKnFR4dMhKnFR4RYiKnFR4VkiKmlRRZxTRCUuKvxbRCUuKlxkRCUuKrxsRCUuKo+oEJW0qHDUEZW4qHDUEZW4qHDUEZW4qHDUEZW4qHDUEZW0qBKOOqISFxWOOqISFxWOOqISFxWOOqISF5VHVIhKWlQ46ohKXFQ46ohKXFQ46ohKXFQ46ohKXFQ46ohKWlQZRx1RiYsKRx1RiYvKIypE9VNRWXcVlQ/3oqL6Q1Q/FtXGIVGZ6g9RiYuK6g9RSYuqUP0hKnFRUf0hKnFRsZ8KUYmLiv1UiEpcVB5RISppUbGfClGJi4r9VIhKXFQ46tKiMlNeAwlp42qfyspl9tPN1QtBuNPKCcLpVU3QZZKHIN0E4UCKE5RWgqzdIigYs/x2MCFWCMLNU04QzphygjwE6SYIx0Y5QbgfygnCSVBOEE6CcoJwEnQTZHASXkqQvR7gaK27Xr3vuEdn8B26ohOXois68TS6otNDZ0904pd0RSfuSld04sV0RSfOTVd04vP0RKfFFeqKTlyhM9F5iq+hXG4bUSEqaVHhkCEqcVF5RIWopEWFW4ioxEWFZ4moxEWFc4qoxEWFf4uoxEWFi4yopEXl8LIRlbiocNQRlbiocNQRlbiocNQRlbioPKJCVNKiwlFHVOKiwlFHVOKiwlFHVOKiwlFHVOKiwlFHVNKi8jjqiEpcVDjqiEpcVDjqiEpcVDjqiEpcVB5RISppUeGoIypxUeGoIypxUeGoIypxUeGoIyppUQV8KkT1Y1FdJqM1aB/uReURFaL6qagen4PnAtUfohIXFdUfohIXFdUfohIXFdUfohIXFfupEJW0qCL7qRCVuKjwqRCVuKjYT4WoxEXFfipEJS6qIX2qUPIik5T9lqiCKe7j6mD9lcr3bu4l6NyCnXH5GoiZUvUW/QrHTRzBfNAzpONzHnqG9E7OQ8+QLsRp6ElD1vPnoWfIyvg89AxZY+qhJ6xJeIg1eoas1s5Dj4eel9KTpuWnU6nQM+SenPPQg2vwWnrWvbdxchV6cA1U04NroIUeYyr04BpopifjGryUnpjMgl2eKvTgGqimB9fgtfTkFbviK/TgGqimx0PPK+lJ0xJ1MrlCD66BanpwDbTQY2OFHlwD1fTgGqimB9fgtfSs2OWpkrkVXAPV9OAavJSevE5uuZa5FVwD1fTgGryWHrf8dL795ZUeDz2a6cE10EJPqDjWBddANT24Bi+lp5jl4lIrSwuugWp6cA1eS49bnpYWf7/XwE+4BqrpwTV4LT3rHusSY4UeXAPV9OAaaKEn+Qo9Hno004Nr8FJ6zBSWVxTMFKcKQfgGygnCOZAmyNsFDuNvv34y1b9+kqc17HK92oZcu3pKS9xuyteHEG6qYe2SWeJ26YaYt6tn8vElBiYf12Nc8g2eysDk49gMTD5+0MDk4zYNTL6H/HHJxykbmHxcuIHJx+EbmHwcvoHJx+Ebl3yLwzcw+Th8A5OPwzcw+Th8A5PvIX9c8nH4BiYfh29g8nH4BiYfh29g8nH4xiXf4fANTD4O38Dk4/ANTD4O38Dke8gfl3wcvoHJx+E7FfnrR1OcCWmD/Hw91D7b6cpi/eB5n6blLn0y17t0Pn9IBT8QqXxTKriHSOWbUsFrRCrfk4rHmUQq35QKPiZS+aZUPFJBKrNUVhovf4wVqVABIZUZ7Lxy7i+XV6RCBTSkVGbyqWnGJT9QpQxMPnVHv+RbcyU/2I0MIRW/XJ1KcRtXu/WDtP4mm7C+TvkCtrU3Bc3l4lmC7OJAgi+WIHtJkOCLJeiRIBJ8rQTZV4MEXyxBdvcgwRdLEM8cCb5YgnjxSPDFEuSJABJ8rQQjzyWQ4IslyNMRJPhiCfJ0BAm+WII8HUGCL5agR4JI8LUS5OkIEnyxBHk6ggRfLEGejiDBF0uQpyNI8MUS5OkIEnytBBNPR5DgiyXI0xEk+GIJ8nQECb5YgjwdQYIvlqBHgkjwtRLk6QgSfLEEeTqCBF8sQZ6OIMEXS5CnI0jwtRLM+IJIsLEErbtK8AbsVYIeCSLBthJMKzM2OXcvQSpiJPhiCVIRI8EXS5CKGAm+WIJUxEjwxRJkvyASfK0EC/sFkeCLJYgviARfLEH2CyLBF0uQ/YJI8MUS9EjwpRJ00ypBZ/0nCc4E8exAOUE468oJwndWThCurHKC8CxVExQmHD3lBOF3KScIN0g5QXglryXI2hVpl/Mngiruh0nLTWZT0ic/Y6bTQ2dPdOJSdEUnnkZXdOKAdEUnfklXdOKu9ESnwYs5FZ3x+ph2KhU6cW66ohOfpys6cYW6otNDZ0904gp1RSeuUFd04gp1RSeuUFd04gr1RKfFFeqKTlyhM9F5io+lBYs3hajERYVDhqjEReURFaKSFhVuIaISFxWeJaISFxXOKaISFxX+LaISFxUuMqKSFpXDy0ZU4qLCUUdU4qLCUUdU4qLCUUdU4qLyiApRSYsKRx1RiYsKRx1RiYsKRx1RiYsKRx1RiYsKRx1RSYvK46gjKnFR4agjKnFR4agjKnFR4agjKnFReUSFqKRFhaOOqMRFhaOOqMRFhaOOqMRFhaOOqKRFFfCpENWPRWXdVVQ38K2i8ogKUf1UVI8PSw2B6g9RiYuK6g9RiYuK6g9RiYuK6g9RiYuK/VSISlpUkf1UiEpcVPhUiEpcVOynQlTiomI/FaISF5VHVC8VlXcr0j6bDVHZtEZis7tebWoqMSUsh6+bkm7wSx/U43sPSz3u9LDU4yEPSz1O77DU48eOSn3CNR2WerzNYanHgXwx9dewfbYb1Pu4Xu3jDdTm42CyhPXXE5seNjtiExutJzZxxnpiE7OrJzbxr3piE0uqIzYzLlNPbGIc9cQmXlBPbOIF9cSmh80zsTmZFZFob9msXHy5m+ViE9I99RhHw1KPyzQs9VhSw1KPfzUs9Zhdo1JfcMaGpR4bbVjq8dyGpR6DbljqPdR3S31eSPR2MvfU4+YNSz1uXrfU2+n6qr29f3xTcPOGpR43r1/qXVipvyFxpR43b1Dq44SbNwT198Xd5aegflTqcfOGpR43TxH1cYN649a4zcWhe0x9MMYuYZvgHl+crojkyZl7nXh0gk6+oRN8QnTyHZ1gKqKT7+gEBxKdfEcn2JXo5Ds6wdtEJ/98E8f6Reo8hXsj1GCEopPv6ATXVFwnU/5KJzPkuJWHQ45LeDjkHsg3Ifdp+ekQbk5/+AJyMy1XX1aAa9huslXjfN0U5a9B21K71pnrdzDtp2tnKvHEuqES26obKnGWuqES86cbKvFneqHSYqF0QyUuRzdU4p50QyWuTDdUeqjshUrcntdSuT7d8d5vUNnuXFpTFjisNfb24lkk+EiIZFMkOFSIZFMkeF+IZFMkuGqIZEskDr8OkWyKBCcQkWyKBI8RkWyKBPcSkWyKxCMSRLIlEhxXRLIpEhxXRLIpEhxXRLIpEhxXRLIpEhxXRLIlEo/jikg2RYLjikg2RYLjikg2RYLjikg2ReIRCSLZEgmOKyLZFAmOKyLZFAmOKyLZFAmOKyLZFAmOKyLZEknAcUUkmyLBcUUkmyLBcUUkmyLBJ0Ek1rqrSG7gWEVCdYNIbFqxs+nmBleRUN0gki2RRKobRLIpEqobRLIpEqobRLIpEvaTIJJNkXhEgki2RIJPgkg2RcJ+EkSyKRL2kyCSTZHguG6LJMTl6hBvj1SrisSFNWhzI6j60W71ay8gzuTgdD5FzjuICSdQAEScMgEQcZIEQMRpEQDRA+LzIFKpC4BIJSsAIpWeAIhUQtsgRrce7Jpvj4CuVkLZrMV1NiV9KmpnyKlvjoY8Uw0dDjm1kzjkcT2J3k6lAjmV1uGQU5cdDrkH8qMhp+Y7HHIqxMMhp548HHKqz8Mhp/o8GvJC9Xk45FSfh0NO9SkNuTVXyIP9BPn91S97x7VQAw9KvIf4MYnHDxiUeFyJQYnHGxmUeByaQYnHJxqS+DThVg1KPJ7ZoMTj3A1KPM7doMR7iB+TeJy7QYnHuRuUeJy7QYnHuRuUeJy7MYk3OHeDEo9zNyjxOHeDEo9zNyjxHuLHJB7nblDice4GJR7nblDice4GJR7nbkziLXV8p8Q/PvovWbL6Tol//AXyZMnqByWerH5Q4snqByWerH5M4h3P4wclnufxgxJPHT8o8TyPH5R4D/FDEu9x7jol3k3LtdYZf088zt2gxOPcDUo8zt2gxOPcjUl8wLkblHicu0GJx7nrdQdOsSvx0/0OnIBzNyjxHuLHJB7nblDice4GJR7nblDice4GJR7nbkziI87doMTj3A1KPAbOoMST3G0T79Py0yHc7GKqE2/MtFxtjL2G7aYaHt4s9Hh/Y6gXq8nXjySCiGRLJImkEZFsioQEE5FsioTHyIhkUyRULIhkUyQekSCSLZHwKBuRbPkkicfeiGRTJDwiRySbIsFxRSSbIsFxRSRbIsk4rohkUyQ4rohkUyQ4rohkUyQ4rohkUyQekSCSLZFgpiGSLZEUEtdtkZiybkm03m6JxNsFDuPT9Q7NlGpUWrsi7XK+8hNy5eqTvKFeSHQRlbioSIwRlbioPKJCVNKiYqsDohIXFdUcohIXFVspEJW4qNh6gajEfSq2aiAqYVHlia0diEpcVDjqiEpcVDjqiEpcVDjqiEpcVB5RISppUeGoIypxUeGoIypxUeGoIypxUWF+IippURmPqF4qKpOnNewSN0TlJmfWq0Nar65vPT7Hk8JsSOuR4IslSBGABF8sQUoGJPhiCbJlBwm+WILUuEjwtRK0bAdCgi+WIJuHkOBrfUHLViMk+GIJsjEJCb5Ygh4JIsHXSpCnI0jwxRLk6QgSfLEEeTqCBF8sQZ6OIMEXS5CnI0jwtRJ0PB1Bgi+WINY0EnyxBDFl+pWgiVcJTmVDVD6tNF7+eI3E+fwhFcwTpDKDnY1fmTGlIhVMDqTyIRXrVmacrUgFMwKpfFMqmAZI5XtS8RT3SOWbUmGLIlL5plTwa5DKN6XClj+k8k2peKSCVGaprJxfVDNVpIJbi1S+KRXcWqTyTang1iKVb0oFtxapfFMquLVI5XtSCbi1SOWbUsGtRSrflApuLVL5plRwa5HKN6XikQpS+Z5UcGuRyvekEoesgNLlkkUqyW1JxUS7CMukW/Jdnfy0RP32ufONq+2VTmtd2qDzJB/fikPWSoiqraiGrKoQVVtRDVl/Iaq2ovKIClFJi2rImg5RtRXVkHt1EFVbUQ25qwdRPSeqjc8FxCH3/yCqtqIacqcQomoqqoSjjqjERYWjjqjERYWjjqjERYWjjqjEReURFaKSFhWOOqISFxWOOqISFxXmJ6KSFlUmUZcW1TStG3mnvHW1deuWYuu9OYmoNp79ZY+oEJW0qEjUEZW4qEjUEZW4qNj6gqjERUX1h6jERcXWF0QlLarC1hdEJe1TFba+ICpxUbH1BVGJiwpHHVGJi8ojKkQlLSocdUQlLiocdUQlLiocdUQlLiocdUQlLiocdUQlLKoyYX4iKnFRkahviypNYRVVLBsyyXn5lqyZpk1NdfjRlzKRp6MpaU2RpqMpaU2RpaMpYU0Ztr2gKWlNUfihKWlNsekFTUlrij0vaErYnzIeTaEpYU2x4wVNSWsKHx1NSWsKHx1NSWsKHx1NSWsKHx1NCWvK4qOjKWlN4aOjKWlN4aOjKWlNeTSFpoQ1RY4uran14pzclqQ6/MJLcaToSEpYUmToSEpYUiToSEpYUuxzQVLCkvJICknJSopdLkhKWFJsckFSsr6UY48LkhKWFFtckJSwpHDPkZSspDzuOZISlhTuOZISlhTuOZISlhTuOZISlpRHUkhKVlK450hKWFJYnUhKVlKB9FxYUmFadgoHP21c68q6UdhPN7S/34BaSW084wuk50hKWFIeSSEpWUmRniMpYUmxuQVJCUuKig9JCUuKzS1ISlhSbG5BUrK+VGRzC5ISlhSbW5CUsKRwz5GUsKRwz5GUsKQ8kkJSspLCPUdSwpLCPUdSwpLCPUdSwpLCPUdSspJKWJ1ISlhSQ6bnoWS/hJxL2ZBUl0/i0pBJNMSXNGSqC/ElDZmQQnxJQ266gPiSh6wXIL7kITcwQHzJQ24zGIH4jTo+D7kZAOIvAED8mMTj3A1KPM7doMTj3A1KPM7doMTj3I1JfMG5G5R4nLtBicfAGZT4Icu5GNyy8yqG8Jn4GZYhi51tWIYsBbZhGTJR3oDFTdOQaeQ2LEMmWduwDPnwcBuWITOzbVg8sNRgGfKxzDYsZLlVWMhyq7CQ5VZhIcutwWLIcquwkOVWYSHLrcJClluFxQNLDRay3CosZLlVWMhyq7CQ5VZhIcutwWLJcquwkOVWYeFFkFKDhafsVVg8sNRgYYt9FRY2oFdhYXt2FRY2L1dhYWtvDRbHxtcqLGwLrcJClluFZcwvg4e4/HKKzn6C5f5q55Zdmc7ffFPOfiDoQfBJBMf87rMkgmN+5lgSwTG/6iuJ4JgfsZVEcMwTzwQR9GN+9VYSQc6zOuy7wTPgnPZ0MOCchXQw4B7AjwWcc3QOBpxTZg4GnDNYDgacE0oOBpzTr48FPHBgysGAU2keDDiVpjTgcXm4dnnOtnGtt2Fhx9t8c4vOf9BDXbpNT7R+pSfFDcjf3t5fApny1tXW2QU86/017PpXXbJJy01mU9Knq2c6PXT2RCc1dVd0UrFL02nSErWzNm3RadbPc1nr0tN04gd0RSduQ090RjJb4cIjrxfn5DZXziuZLtXo8dCjmR4yT9X0kEmqpofMUDU9ZHqq6eEplGZ6Es+sVNPDEy7V9PA87KX0iBq6CY+hIzI9ZPZDJv7Fichc18xsp1IhE7ejIzLxRjoiEyelIzLxXfohM+PSdEQmnk5HZOIAdUQmDlBHZHrI7IdMHKCOyMQBOg+ZSo41NmXZqmqtsbcXz5LCh0JSwpLCDUNSwpLCk0NSspIqOINISlhS+JNISlhSuKRISlhSeLVISlhSHkkhKVlJ4VsjKWFJ4Z4jKWFJ4Z4jKWFJ4Z4jKWFJ4Z4jKVFJmQn3HEkJSwr3HEkJSwr3HEkJSwr3HEkJS8ojKSQlKynccyQlLCnccyQlLCnccyQlLCnccyQlLCnccyQlKymDe46khCWFe46khCWFe46khCWFe46khCWFL4Wkfigp666S8uFeUlR8SOqHkkor0jY5dycpS8WHpIQlRcWHpIQlRcWHpIQlRcWHpIQl5ZEUkpKVFPulkJSwpPClkJSwpNgvhaSEJcV+KSQlLCncc2FJFWs+Li4hbFwbprQ82whmuhXgBz0OJ1o1Pbi6qunBIVVND26jdDqT3XLxdHODX/BjzJWfECv8ePhRzQ8+mG5+MJV084NDo5sf7A7d/OAdqObHYx7o5gf3QDc/2Aev5MdeD1i09u2KXx554tmk5R6zKZ+vntnEbeiJTQ+bHbGJk3EmNh8ffGs8vkdPbOKS9MQmnkpPbOLAdMRmwK/piU3cnZ7YxAvqiU28oJ7Y9LDZEZt4QT2xiRd0IjbP8RGpgCOFpqQ1hS+GpqQ1hTuHpoQ1FfEI0ZS0pnAq0ZS0pvBL0ZS0pnBt0ZS0pjyaQlPCmsLBRlPSmsJHR1PSmsJHR1PSmsJHR1PSmsJHR1PCmkr46GhKWlP46GhKWlP46GhKWlP46GhKWlMeTaEpYU3ho6MpaU3ho6MpaU3ho6MpaU3ho6MpaU3ho6MpYU1lfHQ0Ja0pfHQ0Ja0pfHQ0Ja0pfHQ0Ja0p/Ck09VNNWXfVlA/3mqLuQ1M/1dTGuaGFug9NSWuKug9NSWuKug9NSWuKug9NSWvKoyk0Jawp9k+hKWlN4U+hKWlNsX8KTUlriv1TaEpWU3bCn9rWVLR+1VTalEmZ1icXJbiNq/00LRL0k7/V60IQyYkwQW6azBLIlDfpdNdR79LnUT8TxEqvnCCWTeUE8SxXN0GGB6PKCSKLU04Qj+yUE8TzL+UEeQjSTRBPZl5MkF0J8t58IqhiT20ccnYxu6CzJzpxKbqiE0+jKzpxQHqi0+KXdEUn7kpXdOLFdEUnzk1XdHro7IlOXKGu6MQVOhOdp/g+gLV4U4hKXFQ4ZIhKXFT4dIhKWlQOtxBRiYsKzxJRiYsK5xRRiYsK/xZRiYvKIypEJS0qvGxEJS4qHHVEJS4qHHVEJS4qHHVEJS4qHHVEJS0qj6OOqMRFhaOOqMRFhaOOqMRFhaOOqMRF5REVopIWFY46ohIXFY46ohIXFY46ohIXFY46ohIXFY46opIWVcBRR1TiosJRR1TiosJRR1TiosJRR1TiosKnQlQ/FpV1V1H5cC8qqj9E9WNRbRwSFan+EJW4qKj+EJW4qKj+EJW4qKj+EJW4qDyiQlTSomI/FaISFxU+FaISFxX7qRCVuKjYT4WoxEWFoy4tKjPlNZCQNq72qaxcZj/dXP1BUMKdVk4QTq9ygnBNlROEAylOUFoJsnaLoGDM8tvBhFghyEOQboJwxpQThMuknCAcG+UE4X4oJwgnQTdBGSdBOUE4CcoJwkl4KUH2eoCjte569c7jHjO+Q1d0eujsiU48ja7oxAHpik78kq7oxF3pik68mJ7oLDg3XdGJz9MVnbhCXdGJK3QmOs/xNZTiERWikhYVDhmiEhcVPh2iEhcVbiGiEhcVniWiEhcVzimiEhaVm/BvEZW4qHCREZW4qPCyEZW4qHDUEZW4qDyiQlTSosJRR1TiosJRR1TiosJRR1TiosJRR1TiosJRR1TSojI46ohKXFQ46ohKXFQ46ohKXFQ46ohKXFQeUSEqaVHhqCMqcVHhqCMqcVHhqCMqcVHhqCMqcVHhqCMqaVFZHHVEJS4qfCpE9WNRWXcVlQ/3oqL6Q1Q/FtXjc/CcpfpDVOKiovpDVOKiovpDVNKiclR/iEpcVOynQlTiomI/FaISFxU+FaISF5VHVIhKWlTsp0JU4qIa0qcKJS8ySdlvierC9kq8u/npEGq8m7TEkU35rJIZ8SFNnFci7od0OF6K+JDlf1PEHx9d4PyQtfFLER+ycHwp4h7EZRE/x1YiP2ThA+9+yN0+8O6H3JAD7x4vYkzecUSG5D3gy4zJO+7QmLzjUY3JO07ZmLx7eB+Sd/y6MXnHrxuTd/y6MXnHrxuTd/y6IXmP+HVj8o5fNybv+HVj8o5fNybvHt6H5B2/bkze8evG5B2/bkze8evG5B2/bkjeE37dmLzj143Ju4f3Lnnf+CpyIp/vk/eNb3ck8vkxeSefH5L3TD4/Ju/k82PyzvP3MXnn+fuYvHt4H5J3nr+PyTvP34fkvQyQz883OkACO99olxnbzeCs/rDJqy99+bW8Xuw/vtdXPKhUUOlytX8alS7XwqdR6fLJztOodPnc42lUunwq8CQqfurSM38alS4z0KdR6TJdfRoVctsaKh5UKqiQ29ZQIbetoUJuW0OF3LaGCrltBRVDbltDhdy2hgq5bQ0VctsaKr4TVJz1y0Mb57Z+2Lrr8X4u3R9q5U0vya0wLL1kt8Kw9JLeCsPSS34rDEsvCa4sLLaXDFcYll5SXGFYeslxhWHpJcn9ISx2hcV78wmW+6u3zh701gPi8yAOmkHLgjhovi0L4qDZuSyIg+bysiAOmvmLgugGrRNkQRy0qpAFcdAaRBZEKhYBED0gboJ4ig/7eEfd1A2VVG/dUEkN2Q2VVLLdUEk93QuVnqq+GyrxFrqhEoejGyrxWbqh0kNlL1Ti9nRDJW5PN1Ti9nRDJW5PN1Ti9vRCZcDt6YZK3J5uqMTt6YZK3J5uqPRQ2QuVuD3dUInb0w2VuD3dUInb0w2VuD29UBlxe7qhErenGyo9VJ6FyseHAvtIBnsaKh+fF+MjGWw3VJLB9kJlIoPthkoy2G6o5HllN1TyvLIbKj1U9kIlzyu7oZLnld1Q2Y3b47xbQvaTffzDwZjFAwsmXKMwboGlG+dEFpZuXAhRWHI3Fb0sLN1Ux7KwdFNpysLSTdUmC4sHlhos3VQTsrB0k5n/BBZ7/aTh5elm2srMtz6AmIfMiaVBHDKDlgZxyHxbGMQyZHYuDeKQubw0iENm/tIgDlknSIPoAfF5EIesQaRBpGIRAJGKZRvEc+ykLtRN3VBJ9dYJlWGihuyGSirZbqiknu6GSqr6bqj0UNkLlTgc3VCJz9INlbg93VCJ29MNlbg9vVBpcHu6oRK3pxsqcXu6oRK3pxsqPVT2QiVuTzdU4vZ0QyVuTzdU4vZ0QyVuTy9UWtyebqjE7emGStyebqjE7emGSg+VvVBJXXkaKh9/sj04MtjTUPn4e2zBkcF2QyUZbDdUksF2Q6WHyl6o5HllN1TyvLIbKqkru6GS55XdUMnzyl6o9N24PRcoVipjuP3h+Ua7qbq2btSPcqO9ZOzeZHcdz37jh7++eEall+RXFpVe8sgfoRJzWKz+mNP1kJH4AUovGZkoKL3kNpKghF6yhJ+BUqY15GLTHSi9PF0RBaWX5xSioPSSe4qC4gHlHpQhc9otUIZMabdAGTOj3QBlzIx2A5QxM9rHoEQy2gooZLQVUMhoK6CQ0VZA8YByDwoZbQUUMtoKKGS0FVDIaCugkNHeg5LIaCugkNFWQCGjrYBCRlsBxQPKPShktBVQyGgroJDRVkAho62AQkZ7D0omo62AQkZbAYWMtgIKGW0FFA8o96CQ0VZAGTSj9etGwBLuQRk0o30MyqAZ7WNQBs1oH4JSBs1oH4MyaEb7GJRzJm9z7LzpeZrXA920XGud8bcXz1TypmcnVEZOne6HSr7r1Q2VfNerGyr5rlc3VHqo7IVKvut1ni/TFrtSOYV7KvmuVzdU8l2vbqjE7emGStyeXqjk1Ol+qMTt6YZK3J5uqMTt6YZKD5W9UIlF0AuV/Ry/aP0CinNbP2ydXan03pyEyg0Ptp/jF6Gym7QHKj1U9kJlNw+5oLKbDBYqu3nIBZXdPOTqn8qturKbh1zDU9nPUcVQidvTDZW4Pd1QidvTDZUeKnuhErenGypxe7qhErenGyqxCHqhspvTUG1ZD/J1xprHPxxKXj4ukbK/omJMlXjrVuLdzU+HcF7DtpvDYeH9Z7z3klDB+8947yX7gvef8d7Lgzl4/xnvvaTo8P4j3rs5iRref8Z7L88H4f1H9Xs354nD+8947+XJI7z/jHcP70Pyjl83Ju/4dWPyjl83Ju/4dWPyjl83JO8Rv25M3vFtxuR9yLwuXS5Z4E5ui3cT7aISk9I1ZvP26ZZ77Exaonb25piy+tVdfsM5Dpk0Iqq2ohoyI0VUTUWVhkx3EVVbUQ357BtRtRXVkAUaomorqiGf2iOqtqLyiApRCftUacj9BoiqraiG3MyAqNqKCkcdUYmLCkcdUYmLCkcdUUmLKuOoIypxUeGoIypxUeGoIypxUeGoIypxUWF+IippURUSdWlRTZNZApny1tVdnrtRSNQRlbioSNQRlbioSNQRlbioPKJCVNKiovpDVOKiYusLohIXFVtfEJW4T8XWF0QlLiq2viAqYVGlCUcdUYmLCkcdUYmLCkcdUYmLCkcdUYmLyiMqRCUtKhx1RCUuKhx1RCUuKsxPRCUtKkOivi2qS5KwiiqWDZnk7JaLp2lTUx1+9CUZj6bQlLCmSNPRlLSmyNLRlLSm2PaCpqQ1ReGHpqQ1xaYXNCWsKcueFzQl7E9ZtrygKWlNseMFTUlrCh8dTUlryqMpNCWsKXx0NCWtKXx0NCWtKXx0NCWtKXx0NCWtKXx0NCWsKYfniaakNUWOLq2p9eKc3JakOvzCS3Kk6EhKWFJk6EhKWFIk6EhKVlKefS5ISlhSlHxISlhS7HJBUsKSYpMLkpL1pbxHUkhKVlJscUFSwpLCPUdSwpLCPUdSwpLCPUdSwpLCPUdSspIKuOdISlhSuOdISlhSuOdISlhSHkkhKVlJdZOeh7hcbKNJj3/Y5LJs57WT6+TZWuwmLYbKbtJRqOwmDYTKbjYvQKWHyl6o7OZhPVR285C8fyo36srYzcNpqOzmoTBU4vb0QmXC7emGStyebqjE7emGStyebqj0UNkLlbg93VCJRdALlVmgGEmrNxhSyo+pND6th7QGc7NxI9duNPrl4hjMzbXhI3ijOvi0KjyHSvBWd/BmDT5WgndnDt6fOfhw5uDjmYNPZw4+nzn4ojr4uKywMeb74IvuFXYjeN0r7EbwulfYjeB1r7AbweteYTeC173CbgSve4XdCF73CrsRvO4VdiP4E6+weTrxCpunE6+w2VSDNyGsL3LE6dos1N/jWGK/vU/jzUcPtnkPrnkPvnkPoXkPsXkP6fkewvWdoPiph4oxNl2NMXPjKfqqmbd+Q74Yu/XDrqxb5fyN4+ac/bjRPMqNlkFutH74cY83uj3f2083Oreyu1q5Pa3qX740U1oXsrc/X6ef+NHMfdFsfUphpssceNfM72sW9jWL+5rVJ9Ypu+vBGPnmEczSLO9rVnY1q38ZYrvZF7yVYNZmJZq7Zl8gWfK0NPt0WMjSLO1rlnc1i9Oue6u/gbbd7IuBU9aHXm9Bhrtmbl8zv69Z2NesTvfl0nJtZm8JqDxWvHkGaW8eFS5dpPZd5PZdlOZd1Hc/ynZh2ndh23fhds0aye9rFvY12zeRpn0Tado3kaayq1me9jUz+5rZfc32qSTvU0nep5K8TyV1U8qnaZnsfbpJaZ3P781K3Q7ablblzV/y0KVZdrVmdl8zt6+Z39cs1JutJtPlF6ZKs7ivWdrXLO9rVnY1M9O+ZmZfM7uvmdvXzO9rtk8l9TI/2NWTtDfn6M3bjkq9Yt5oY3a0sTvauB1t/I42YUebuKNN2tEm72izQweuroO4rAvhplBZ25gdbeyONnUdlHVL2s0qsrbxO9qEHW3ijjZpR5u8o035eZv6sUobbcyONnZHmx068Dt04HfooP6pOpvWj3TZ5Nx9q3rSGONaRcd8Px7q3zDbbBV2tYq7WtXLipSWKchcrLL7VnlXq7Kn1ReezlYrs6uV3dXK7Wrld7UKu1rFXa12aSPu0kbcpY20SxtplzbSLm18YUmU9St/5pLU3Lfye1rVNyxuVnF5X81YvqgZ16cGPiVTaWb2NbP7mrl9zfbVjCXsa7avZiz7asayr2Yse2pGP03TvmZmXzO7r5nb18zvaxb2NYv7mqV9zfKuZuaLoiFcd9vcPGswrv691PVZrZtuHgK/XT13ko/opBzQyRc1vXAn5ohOjiD+C5tBuBN/RCfhiE7iEZ2kIzo5YsTbI0a8O2LEuyNGvDtixLsjRrw7YsS7I0a8O2LEuyNGvDtixLsjRrw/YsT7I0a8P2LE+yNGvD9ixPsjRrw/YsT7I0a8P2LE+yNGfDhixIcjRnw4YsSHI0Z8OGLEhyNGfDhixIcjRnw4YsSHI0Z8PGLExyNGfDxixMcjRnw8YsTHI0Z8PGLExyNGfDxixMcjRnw6YsSnI0Z8OmLEpyNGfDpixKcjRnw6YsSnI0Z8OmLEpyNGfD5ixOcjRnw+YsTnI0Z8PmLE5yNGfD5ixOcjRnw+YsTnI0Z8OWLElyNGfDlixJcjRnw5YsSXI0Z8OWLElyNGfDlixJcDRryZpiM6MUd0Yo/oxB3RiT+ik3BEJ/GITtIRneQjOjlixJsjRrw5YsQfsfXKmCNGvDlixJsjRrw5YsSbI0b8EXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvuzBF77swRe+7MEXvujMSeO3d5TL10Ys3W1WkJKF2/8uXTRzRJVTRZVTRFUzQS+wIFozGqorGqonGqovGqogmqolE1F2dVc3FWNRdnVXNxUTUXF1VzcVE1FxdVc3FRNRcXTXOxnarYpGn5xubtx+HM0ibsaFOd89N6mEm6PQFraZPqbdbbie6+TXX+THmBK5V036b8vE19Z1lev+2b/T0G9Y1i2a4HHYV436Y6rvNKaa7F5h63KRV+vjjIaFq/m2qmm/Pu5m8SXlrZXa3qX00015NtTDD3rfyuVmFXq7ir1RdHnsT1NKLL8n7Xqr5/4fKQcz0KwE/3fdU3JGy2srtauV2t6nyF9XOJF3N/um8VdrWKu1qlXa3yrlZlTys/7WpldrWyu1q5Xa12aeOLU8LCOrFdHk3Y+1ZxV6u0q1Xe1arsafXFAWFbrcyuVnZXqzrL7vqdW+fu540vvo+91SruapV2tcq7WpU9rb74PvZWK7Orld3Vyu1qtUsbcZc2vvg+tvNpbRXvZ5svvo+91SrvalX2tPri+9hbrcyuVnZXq12Zwxffx95qFXa1ijtaufr7V8aa5fwyY2/QCKFSlL0J7OPitygeX2zeTqJbA3K3OXWZPkJy+kLy+kIK+kKK+kJK+kLK+kIq6kKquxKvDcnoC0nf7G2azt5zF759F6F9F7F9F6l9F7l9F6V5F1Zitgl+7eLmgJW1C9O+C9u+C9e+C9++i9C+i9i+i9S+C4nRbdcuLvJ5fHE2aVlesrl5HvA2ZueAirKA3KQtIKMtIKstIKctIK8toHB0QOuDpXx5hvkpoMpPPz6n6hJ+PHf46dzh53OHX04dvp/OHb45d/j23OE73eE/PtTNeX/u8JWvulvhK191t8JXvupuha981d0KX/mquxF+UL7qboWvfNXdCl/5qrsV/rlX3XDuVTece9UN5151w7lX3XD0qmvNNfxgN8JPxS9Xp1LcxtVu3bbv7af9L/eXWlOWmK01d9vlXCjAUoElTsBSg8UASw0WCyw1WByw1GDxwFKDJQBLDZYILDVYErDUYCHLrcJClluDJZHlVmEhy63CQpZbhYUstwqLB5YaLGS5VVjIcquwkOVWYSHLrcJClluDJZPlVmEhy63CQpZbhYUstwqLB5YaLGS5VVgGzVusu8Liwx0sZdCVKK1fLLPJuXtYBl2JtmAZdCXagmXQlWgLlkFXoi1YBvVbtmAZ1G/ZgmXQvGULlkH9lsew+GlQv2ULli+y3Lz0YJwNj+80hLBscr38yd5ePHdh23fh2nfh23cR2ncR23eR2neR23dRmnfx1ReqJLuQGN3T+jX2ONmNSW/jwwDeWG0BOW0B+aMD+vqFhjmgoC2gqC2gpC2grC2goiwgO2kLyGgLyGoLyGkLSNtMbY+eqU/xfMPbCCw1WBKw1GDJwFKDpQBLBRY3AUsNFgMsNVgssNRgccBSg8UDSw0WstwqLGS5VVjIcquwkOVWYSHLrcHiyXKrsJDlVmEhy63CQpZbhcUDSw0WstwqLGS5VVjIcquwkOVWYSHLrcESyHKrsJDlVmEhy63CMmje8vhlMh8GXYk2dh+HQVeiDVjioCvRFiyDrkRbsAy6Em3BMqjfsgWLB5YaLIPmLVuwDOq3bMEyqN+yAUsadCVya8zWGX8Py6Ar0RYsg65EW7AMuhJtwTLoSrQFy6Ar0RYsg/otW7AM6rfYYldYpnt3Lg/qt2zBMqjfsgXLoFnuFiyDZrlbsHhgqcEy6nOiDVgGzXK3YBk0y92CZdAsdwOWQjpXhWXQjw5u1ESjfnRwC5ZBPzq4BcugHx3cgmXQjw4+hiWM+tHBLVgG/bT2FiyDflr7cd4SpkE/rb0FiweWGiyDZrlbsAya5W7BMmiWuwXLqEeCbMAyaJa7AYsZNMvdgmXQLHcLFtK5Giz1jzcmt2y4S97dt6lO08UvHZVQ6af8vE39K2cbbcyONvUCaFp3HZop5vtWblcrv6tV2NUq7mqVdrXKu1qVPa2++C7IViuzq9Uubfhd2vC7tOF3acPv0kb9zebHs0X9td8yLVNpsfdtwo6RH9yOfvyONmFHm7ijTdqBwY6ZOeyYmeMOfuKOmbn+jtFGG7ejTV0HYdF1Sfa+TdjRJu5ok3a0yTvalJ+3SdOONls6qLXZoYO0Qwf1veEbbcKONnFHmx3zQdoxH6Qd80HeMR/kHfNB3qGDvEMHeYcO8g4d5B/q4PIX83ZhPQO/LGcf7aK9jiHjy1tn9QT8YZN6/v24ifl5E/vzJu6HTS5/s29XfnGGh5nSUn1d/lyueY/J723de9uv8mKzZkzuypZJb4GavKNN+XkbO+1oY3a0sTvauB1t/M/b1GuktOZY6eazER8t4o9bpHr+69b8t/yxxRcZ8zLCU3R/bFHlP+U1x745vmduUa+HHraocp/tYitk/8c7r9dBF2djaRHiH1tUec9pufN8H5V/3KL8gY/LX/zDUW2vgzp/b5QZf50I4qc7+vWn08blb//nT3//7U///vtf/nFp9fY///uvf/7nb3/768df//l//2v5P//+999+//23//y3//r73/78l//477//5d9+/9uf3/7fL9PHf/7V21R+9W6a/tf7fPSvrqT4qys5vt3M2wUuX4R7+U95+4c3fi+eV/z18p+8Lhtv7bz5NZilTbC/hnSdHd/+6VIAWn+d9N7+yeZfnbui/f5P6VdnL/d4uc//Dw==","names":["mint_giga_root"],"brillig_names":["discover_new_messages","get_public_data_witness","field_less_than","decompose_hint","lte_hint","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"hash_siloed_commit","hash":"16642888248178477675","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"destination_chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"},{"name":"burn_tx_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"note_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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fdjkpE+bX17jiuXG1RZqrsfVsoVyafajZnuNK/56kWJe44i/5PfJPQBPnx/S1KFxbftxXY+riU3GcXzJ73Hc1ybXF4LvOE8xr2XWe+aclHkuaj1nZc6las77trx++uiZka613mad6vLtOaj6vuu/dV72vbqs5R23vblMp27hqLqNGgfmGpW5fELjVfPMa5njXht9+soR9TbLXzlCVlc9LlFskwnFvC608prvfgfXJ01c42TUJ03qvr3MuKfYt9GovnV9FmUh+x1utp67av10O9i68aoZ8upY/77Z+tuijnu/g2s9gr0Ga77rEcz3XzGinDbWPXy+1cfOu14zZH7W6/r1T/336VvzkcVz9UmfL2s+Vhu/bfs1X5xXrNfLS3POQTOOGFd+RrOO43gWglzjurdfa0zI7+d2dPKS6wthTJyco3n62l7zHB1NjnNczx3S7MdxXUv3+X4WgvzW4qDk0hwTJ/HX54eN1vK18vvcjl5eXwi2cFzXYN2kmJfmGWzjOk+g6dNOzqvMT65xjK3k0mx7TR0ax7V0J33H54fvkN8n1488PWNCrpOcwtNTR/mtucdiXOMhzbbXXB8+rufpauKck3bi6cETmnX8QrAT2m0/jnZCfs8Ff7m+w+E6V/NSK69XzpLXlVZe5vtzWRNk5nWVlZdr3USd16tnyesKKy/XGpT6vctmKGdxZ/SaETMPV/62jtV/d60BqM/aWOkoY2Lqv/UagMuNv2uvmTHLq+tn/s0sf3nn2PZrYw3A5ZY8dvvYawBe45B1tePeC633zHLsNn9NO3Wc87qLuvzlnVbHwNE2f40lj90+dptf4ZB1tePeC43f5j2znCsc5bjysr+5bsps998VrbRXPJhr/9XlL++0Op7CUe36Gke71m13pUPW1Y579je0r3SUc6WjnNWOezb/s5C8blfKS37bnM1C5LpVSS65blHM6wbFvNYo5nWnYl6adbxZMS+tOspv+yyehch1l5JccuWKeWmOL0191BxfmrZQU647FPPS1O0vhDFxm2JemuPrHsW8NOuo1fby2547GJdxf7diXiftxOeHndCqo/xe3NHJSy5NPDGObS+/bV79pA6dmH6U3+d2dPLSrOMXgg5pt71W7C6XVowsv2te3ea46vudzjS/ZL6nyOckE1Z5dT3Mv5nlL7dkVZYnHNWuLt6ubrurHLKudtyz98xe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","debug_symbols":"","names":["hash_siloed_commit"],"brillig_names":["discover_new_messages","store_in_execution_cache_oracle_wrapper"]},{"name":"get_note_proof","hash":"18405340835236022471","is_unconstrained":true,"custom_attributes":["view"],"abi":{"parameters":[{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"note_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::oracle::get_membership_witness::MembershipWitness","fields":[{"name":"index","type":{"kind":"field"}},{"name":"path","type":{"kind":"array","length":40,"type":{"kind":"field"}}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_note_proof"],"brillig_names":["get_note_proof"]},{"name":"burn","hash":"13741024657587694747","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"destination_chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["burn"],"brillig_names":["discover_new_messages","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"hash_commit","hash":"12848500277662305739","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"destination_chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"7b3djuzKcaZ9LzrWAfM/c25lMDBkj2cgQJAMW/6AD4bvfXp1dbFqqXIVV7MiWcGM50TYW5tsRsb7JBn5Miv4X3/43//6z//5f//pz3/9P3/7jz/8j//5X3/4y9/+5U9///Pf/vrxb//1Bxc//7//+Lc//fXHv/7H3//073//w//wsbY//uFf//q/P/4xpfjff/zD//nzX/71D//Dufbff3w82sflerTPfj26LZ2Dw9LS18HB5fr8YJeaK19Hf/xzWNbDfcm943Oq18NzKbejW+gdHXK4Hh3d8tPR/+uPf3CJ1PwqNZnU/Co1RXlqUryl5u7wfmq88/kaiYvpxdRUUvOr1DRS84vU+KWfGh9uqUkbqYkuXxMZ/XI7OqfPK7jhV/C9K7hYS1vTurgtgV3w7np4SPnu6O5dbQlrSB//XPN9TD3NSruJVv3DEML5hxC7Q0gxrDGlVJefhvDjtG4dEFO44hHzcovsxzTtDOSG+HJ3Be87Byd3DSfFu5nmeiNebhPtIz+3g3vz7CNMf4u43R/8Y5R5llG6dSLm4P5xlMXEKKsJYpsFLcNiYpTOArHBm9AymBhlnGSUqVwPjqk+jHKW2uf5KGepfZ6Pcpba5/koTdQ+wUTtE2epfZ4SG03UPtFE7RNnqX2eExtNEDuN7/OUWBO1T5zG93lK7DS1z1NiZ6l9nhKbTNQ+aZba5/koZ6l9no/SRO2TooUnSTJR+yQTtU8yUfskE7VPMlH75GneeT0jNk/j+zwjNpuoffI077yeEhtNEKu49vHL9VjvXXiJWMW1j+AoFdc+gqNUXPsIjlJx7SM3yqK49vnWKJ8+SYri2ud7o3z2JCmKax9BYhXXPoLERhPEmqh9yiy1z3NiZ6l9nhNrovYps9Q+T4mt09Q+z4itimufDwqvo4zFPx9lbfV6cG3tlhJXP0epuPYRHKXi2kdwlNHEKBXXPoKjVFz7CI5Sce3znVG2JVx/ptuW+DBKxbVPyrdfz7blHx+BissZOQib4nJGcJSTlDPPp1pTXM48nWrNRIXSoolRTlKhbEw1xRXK86k2SdGxAaHiokNwlJNUKM+nmlsUlyhP55pbTLgobjFho7hlkipla7rF0043E+bIR4g2hmnCHvmI67TTzYRB4pwJh8Q5ExaJc2f1SJwzYZI4Z8Ilcc6ETeLcWX0S50wYJc6ZcEqcs2GV+NNaJd6GVeJtWCXehlXiT2uVaO4XLMmhDatEc8dgyel2WqtEcxtgQQ419wGWHKYNq0RzJ+Dn001zd19JDqONYdqwSjQ3+N2YbjasEs1deyWHacMq0dy39/l009yLV5BDzc14JYdpwyrR3I53Y7rZsEo099iVHKYNq0Rzl92N6WbDKtHcOldymDasEs3Nc59PN80NcSU5jDaGacMq0dwTd2O62bBKNDe6lRymDatEc6vb59NNc/taQQ4196+VHKYNq0RzB9uN6WbDKtHcllZymDasEs2NaTemmw2rRHO3Wclh2rBKNPebfT7dNPeQleQw2himDatEcxvZjelmwyrR3BtWcpg2rBLN3WGfTzcbHV+djZavbpaer1vTLZ52utmwSmx0cnU2Wrm60/ZydTaauTob3VydjXau7rT9XJ2Nhq7ORkdXZ6OlqzttT1dno6mrs9HV1dlo6+pP29bV22jr6m20dfU22rr6JZ52upmwSryNtq7eRltXf9q2rt5GW1dvo62rt9HW1Z+2rau30dbV22jr6m20dfWnbevqbbR19TbaunobbV39adu6ehttXb2Ntq7eRltXf9q2rt5GW1dvo62rt9HW1Z+2rau30dbV22jr6m20dfWnbevqbbR19TbaunobbV39adu6ehttXb2Ntq7eRltXf9q2rt5GW1dvo62rt9HW1Z+2rau30dbV22jr6m20dfWnbevqbbR19TbaunobbV39adu6ehttXb2Ntq7eRltXf9q2rt5GW1dvo62rt9HW1Z+2rau30dbV22jr6m20dfWnbevqbbR19TbaunobbV39adu6ehttXb2Ntq7eRltXf9q2rt5GW1dvo62rt9HW1Z+2rau30dbV22jr6m20dfWnbevqbbR19TbaunobbV39adu6ehttXb2Ntq7eRltXf9q2rt5GW1dvo62rt9HW1Z+2rau30dbV22jr6m20dfWnbevqbbR19TbaunobbV3Dadu6BhttXYONtq7BRlvXsMTTTjcTVkmw0dY12GjrGk7b1jUobusaXMxfxwaX6nOBPsS8HhxTdf84TMVtXb83zLz4W8TtYZh6a5VvDtO1NeLwqKbeWkUUWr21iii00Qa0egsbUWj1Fjai0OotbESh1VvYiEI7SxX0HFrFDWMloVXcXVYSWsXdZUWHOUsVtDHMaGOYNqogxa1oRR8oNqogxa1oRaG1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","names":["hash_commit"],"brillig_names":["discover_new_messages","store_in_execution_cache_oracle_wrapper"]},{"name":"transfer","hash":"3686085545728581157","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["transfer"],"brillig_names":["discover_new_messages","get_notes_internal","field_less_than","decompose_hint","lte_hint","get_collapse_hints","get_public_keys_and_partial_address","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"mint_local","hash":"13814613795292434503","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"destination_chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier_preimg","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"burn_tx_first_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"note_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3221203475512464993":{"error_kind":"string","string":"Proving membership of a block in archive failed"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"4174732183419875782":{"error_kind":"string","string":"Proving note inclusion failed"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9901831340733923939":{"error_kind":"string","string":"Last archive block number is smaller than the block number we want to prove against"},"12459975540867780799":{"error_kind":"string","string":"not here bro"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13242141534282859663":{"error_kind":"string","string":"Block number provided is not the same as the block number from the header hint"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["mint_local"],"brillig_names":["discover_new_messages","get_block_header_at_internal","get_archive_membership_witness","get_note_hash_membership_witness","notify_created_nullifier_oracle_wrapper","random","notify_created_note_oracle_wrapper","debug_log_oracle_wrapper","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"get_balance","hash":"915060977500402690","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_balance"],"brillig_names":["get_balance"]},{"name":"get_historical_giga_root","hash":"16460796066218004903","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["get_historical_giga_root"],"brillig_names":["discover_new_messages","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_integer_quotient","directive_invert","directive_to_radix"]},{"name":"get_historical_giga_root_by_index","hash":"5724367904988573382","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7764445047318889914":{"error_kind":"string","string":"Public data tree index doesn't match witness"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"9199403315589104763":{"error_kind":"string","string":"Proving public value inclusion failed"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_historical_giga_root_by_index"],"brillig_names":["discover_new_messages","get_public_data_witness","field_less_than","decompose_hint","lte_hint","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"get_chain_id","hash":"14988079475441880502","is_unconstrained":true,"custom_attributes":["view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_chain_id"],"brillig_names":["get_chain_id"]},{"name":"constructor","hash":"15123854217614919054","is_unconstrained":true,"custom_attributes":["initializer","public"],"abi":{"parameters":[{"name":"giga_root_history_size","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"15748358241952124793":{"error_kind":"string","string":"wow too big!"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["constructor"],"brillig_names":["constructor"]},{"name":"get_giga_root","hash":"13036511370476453068","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_giga_root"],"brillig_names":["get_giga_root"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"WarpToadCore::hash_commit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::hash_commit_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"destination_chain_id","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"nullifier_preimg","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"WarpToadCore::burn_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::burn_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"destination_chain_id","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"nullifier_preimg","type":{"kind":"field"}},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"WarpToadCore::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::constructor_parameters","fields":[{"name":"giga_root_history_size","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_parameters","fields":[]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"WarpToadCore::hash_siloed_commit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::hash_siloed_commit_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"destination_chain_id","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"nullifier_preimg","type":{"kind":"field"}},{"name":"burn_tx_nullifier","type":{"kind":"field"}},{"name":"note_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"WarpToadCore::mint_local_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::mint_local_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"destination_chain_id","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"nullifier_preimg","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"burn_tx_first_nullifier","type":{"kind":"field"}},{"name":"note_index_in_tx","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_by_index_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::get_historical_giga_root_by_index_parameters","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"WarpToadCore::transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::transfer_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"WarpToadCore::receive_giga_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::receive_giga_root_parameters","fields":[{"name":"giga_root","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"WarpToadCore::mint_giga_root_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::mint_giga_root_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]},{"kind":"struct","path":"WarpToadCore::mint_for_testing_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"WarpToadCore::mint_for_testing_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"},{"kind":"string","value":"WarpToadNote"},{"kind":"struct","fields":[{"name":"nullifier_preimg","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"secret","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"destination_chain_id","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"WarpToadCore"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"giga_root","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"giga_root_history","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"giga_root_history_size","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"giga_root_history_index","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"L1_contract","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}}]}}]}]}},"file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        embedded_curve_add_unsafe(point1, point2)\n    } else {\n        // In a constrained context we need to do some black magic in order to satisfy the backend's\n        // expectations about the inputs to an `embedded_curve_add` opcode.\n        //\n        // TODO: document this better.\n        let x_coordinates_match = point1.x == point2.x;\n        let y_coordinates_match = point1.y == point2.y;\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n        result.is_infinite = x_coordinates_match;\n\n        // dbl if x_match, y_match\n        let double = embedded_curve_add_unsafe(point1, point1);\n        result = if double_predicate { double } else { result };\n\n        // infinity if x_match, !y_match\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"22":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"23":{"source":"pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon/mod.nr"},"24":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"46":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"54":{"source":"use aztec::macros::aztec;\nmod types;\n// from\n// https://github.com/privacy-scaling-explorations/zk-kit.noir/blob/fa5fdb0f0d0867e367388f85079db3b1f9a47590/packages/merkle-trees/src/merkle.nr#L3\n\n// token functionality based of: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/easy_private_token_contract/src/main.nr\n// TODO upgrade to more fleshed out version at: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/token_contract/src/main.nr\n\n#[aztec]\npub contract WarpToadCore {\n    use dep::easy_private_state::EasyPrivateUint;\n    use dep::value_note::balance_utils;\n    use aztec::macros::{functions::{initializer, private, public, view}, storage::storage};\n    use aztec::oracle::get_membership_witness::{\n        get_note_hash_membership_witness, MembershipWitness,\n    };\n\n    use aztec::prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable,PrivateSet};\n    use aztec::protocol_types::constants::NOTE_HASH_TREE_HEIGHT;\n    use std::hash::poseidon;\n\n    use aztec::history::public_storage::PublicStorageHistoricalRead;\n    use aztec::history::note_inclusion::{ProveNoteInclusion};\n\n    use dep::aztec::{macros::notes::{ note}};\n    use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n    use dep::protocol_types::hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash};\n\n\n\n    // use crate::types::WarpToadNote::{WarpToadNote};\n    \n    // arbitrary number because noir didn't like it when i returned a slice at get_all_giga_roots\n    global max_history_size: u32 = 4096;\n\n    #[storage]\n    struct Storage<Context> {\n\n        giga_root: PublicMutable<Field, Context>,\n        giga_root_history: Map<u32, PublicMutable<Field, Context>, Context>,\n        giga_root_history_size: PublicImmutable<u32, Context>,\n        giga_root_history_index: PublicMutable<u32, Context>,\n\n        L1_contract: PublicMutable<EthAddress, Context>,\n\n        balances: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n        \n        // commitments: PrivateSet<WarpToadNote, Context>\n    }\n\n    /**\n     * initialize the contract's initial state variables.\n     */\n    #[initializer]\n    #[public]\n    fn constructor(giga_root_history_size: u32) {\n        // TODO cleanup\n        assert(max_history_size > giga_root_history_size, \"wow too big!\");\n        storage.giga_root_history_size.initialize(giga_root_history_size);\n    }\n\n    // @TODO @WARNING remove this in prod!!\n    #[private]\n    fn mint_for_testing(amount: u64, recipient: AztecAddress) {\n        storage.balances.at(recipient).add(amount, recipient, context.msg_sender());\n    }\n\n    #[public]\n    fn receive_giga_root(giga_root: Field) {\n        // TODO make only the bridge able to use this function. And also make sure the contract that send the bridge transfer is L1_contract\n        storage.giga_root.write(giga_root);\n        let current_index: u32 = storage.giga_root_history_index.read();\n        storage.giga_root_history.at(current_index).write(giga_root);\n\n        let next_index: u32 = (current_index + 1) % storage.giga_root_history_size.read();\n        storage.giga_root_history_index.write(next_index);\n    }\n\n    // Transfers `amount` of tokens from `sender` to a `recipient`.\n    #[private]\n    fn transfer(amount: u64, sender: AztecAddress, recipient: AztecAddress) {\n        let balances = storage.balances;\n\n        balances.at(sender).sub(amount, sender, sender);\n        balances.at(recipient).add(amount, recipient, sender);\n    }\n\n    // we can split up mint types based on where the burn happened to make users staying on aztec have faster proof time.\n    // you can only do this on aztec because on aztec everything is private. So others don't see what function you called!!! :D\n    #[private]\n    fn mint_giga_root(amount: u64) {\n        let chain_id = context.chain_id();\n\n        let giga_root_slot: Field =\n            aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(\n            giga_root_slot,\n            contract_address,\n        );\n\n        // TODO check if commitment (from the other chain) is in that root\n    }\n\n\n    #[private]\n    fn hash_commit(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n    ) -> Field {\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        commitment\n    }\n\n\n\n    #[private]\n    fn hash_siloed_commit(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        burn_tx_nullifier: Field,\n        note_index_in_tx: u32,\n    ) -> Field {\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        let siloed_note_hash = compute_siloed_note_hash(context.this_address(), commitment);\n        let nonce = compute_note_hash_nonce(burn_tx_nullifier,note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce,siloed_note_hash);\n        unique_note_hash\n    }\n\n    // TODO this is not safe. if sender reveals their viewing keys others can spend their token(they should only be able to see them!)\n    // Look at the token contract example for how to do that \n    // https://discord.com/channels/1144692727120937080/1359842526915203096\n    #[private]\n    fn burn(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        sender: AztecAddress,\n    ) {\n        // TODO someone \n        storage.balances.at(sender).sub(amount, sender, sender);\n\n        // add the commitment\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        context.push_note_hash(commitment); // TODO this doesnt actually put it in the fucking tree???\n    }\n\n    #[private]\n    fn mint_local(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        recipient: AztecAddress,\n        block_number: u32,\n        burn_tx_first_nullifier: Field, // any nullifier that is in the same tx as ur commitment. Also nullifiers that come from some other contract if you aggregate txs together :/\n        note_index_in_tx: u32,\n    ) {\n        let chain_id: Field = context.chain_id();\n        assert(destination_chain_id == chain_id, \"not here bro\");\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        let nullifier: Field = poseidon::bn254::hash_1([nullifier_preimg]);\n        let block_header = context.get_block_header_at(block_number);\n        \n\n        let siloed_note_hash = compute_siloed_note_hash(context.this_address(), commitment);\n        \n        let nonce = compute_note_hash_nonce(burn_tx_first_nullifier,note_index_in_tx);\n\n        let unique_note_hash = compute_unique_note_hash(nonce,siloed_note_hash);\n        let note_hash = unique_note_hash;\n        // let note_hash = unique_note_hash;\n\n        let witness: MembershipWitness<40, 41> = unsafe {\n            get_note_hash_membership_witness(block_number, note_hash)\n        };\n\n        assert_eq(\n            block_header.state.partial.note_hash_tree.root,\n            root_from_sibling_path(note_hash, witness.index, witness.path),\n            \"Proving note inclusion failed\",\n        );\n        \n        // TODO pushing the same nullifier twice is impossible right??\n        context.push_nullifier(nullifier);\n        // mint!\n        storage.balances.at(recipient).add(amount, recipient, recipient);\n    }\n\n    // Helper function to get the balance of a user.\n    // #[utility] //not in this version??\n    unconstrained fn get_balance(owner: AztecAddress) -> pub Field {\n        balance_utils::get_balance(storage.balances.at(owner).set)\n    }\n\n    // #[utility] //not in this version??\n    unconstrained fn get_giga_root() -> pub Field {\n        storage.giga_root.read()\n    }\n\n    unconstrained fn get_all_giga_roots() -> pub [Field; max_history_size] {\n        let mut all_roots: [Field; max_history_size] = [0;max_history_size];\n        let amount_of_roots = storage.giga_root_history_size.read();\n        for i in 0..amount_of_roots {\n            let root: Field = storage.giga_root_history.at(i).read();\n            all_roots[i] = root;\n        }\n        all_roots\n    }\n\n    // fuck this this shit is gay we can just pick a block number instead of keeping a whole ass array of historical giga_roots\n    #[private]\n    fn get_historical_giga_root() -> pub Field {\n        let giga_root_slot: Field = aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(giga_root_slot,contract_address);\n        giga_root\n    }\n\n        #[private]\n    fn get_historical_giga_root_by_index(index: u32) -> pub Field {\n        let giga_root_slot: Field = aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root_history.at(index));\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(giga_root_slot,contract_address);\n        giga_root\n    }\n\n    // i think this allows us to do a eth_getProof like thing for a commitment. Kinda cringe that i cant just call a api in js like on ethereum? Maybe you can?\n    #[view]\n    unconstrained fn get_note_proof(\n        block_number: u32,\n        note_hash: Field,\n    ) -> pub MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n        get_note_hash_membership_witness(block_number, note_hash)\n    }\n\n    #[view]\n    unconstrained fn get_chain_id() -> pub Field {\n        context.chain_id()\n    }\n}\n","path":"/home/jimjim/Desktop/warp-toad/contracts/aztec/WarpToadCore/src/main.nr"},"55":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128, log_type::PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID,\n    },\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize},\n        utils::arrays::array_concat,\n    },\n};\n\n\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct WarpToadNote {\n    // owner: AztecAddress,\n    // randomness: Field,\n    // token_id: Field,\n    nullifier_preimg: Field,\n    secret: Field,\n    destination_chain_id: Field,\n    amount: u64,\n}\n\nimpl NoteHash for WarpToadNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n\n        let private_content = WarpToadNotePrivateContent { nullifier_preimg: self.nullifier_preimg, secret: self.secret, destination_chain_id: self.destination_chain_id  };\n        let partial_note =  WarpToadNotePreCommitment { preCommitment: private_content.compute_partial_commitment(storage_slot) };\n        partial_note.compute_complete_note_hash(self.amount)\n    }\n\n    fn compute_nullifier(self,context: &mut PrivateContext,note_hash_for_nullify: Field,\n    ) -> Field {\n        // let owner_npk_m = get_public_keys(self.owner).npk_m;\n        // let owner_npk_m_hash = owner_npk_m.hash();\n        // let secret = context.request_nsk_app(owner_npk_m_hash);\n        // poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER,)\n\n        poseidon2_hash_with_separator([self.nullifier_preimg],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        // let owner_npk_m = get_public_keys(self.owner).npk_m;\n        // let owner_npk_m_hash = owner_npk_m.hash();\n        // let secret = get_nsk_app(owner_npk_m_hash);\n        // poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER,)\n        poseidon2_hash_with_separator([self.nullifier_preimg],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n}\n\nimpl WarpToadNote {\n    pub fn new(nullifier_preimg: Field, secret: Field, destination_chain_id: Field, amount: u64,) -> Self {\n        Self { nullifier_preimg, secret, destination_chain_id,  amount}\n    }\n\n    // pub fn get_token_id(self) -> Field {\n    //     self.token_id\n    // }\n\n    pub fn partial(\n        // owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        // recipient: AztecAddress,\n        // sender: AztecAddress,\n        nullifier_preimg: Field,\n        secret: Field,\n        destination_chain_id: Field\n\n    ) -> WarpToadNotePreCommitment {\n        //let randomness = unsafe { random() };\n        //let commitment = WarpToadNotePrivateContent { owner, randomness }.compute_partial_commitment(storage_slot);\n        let preCommitment = WarpToadNotePrivateContent { nullifier_preimg, secret,destination_chain_id }.compute_partial_commitment(storage_slot);\n\n        // we dont need log?        \n        // let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n        //     owner,\n        //     randomness,\n        //     public_log_tag: commitment,\n        // };\n\n        // let encrypted_log = default_aes128::note::compute_partial_note_log(\n        //     private_log_content,\n        //     storage_slot,\n        //     recipient,\n        //     sender,\n        // );\n        // context.emit_private_log(encrypted_log);\n\n        WarpToadNotePreCommitment { preCommitment }\n    }\n}\n\n\n#[derive(Packable)]\nstruct WarpToadNotePrivateContent {\n    nullifier_preimg: Field,\n    secret: Field,\n    destination_chain_id: Field\n}\n\nimpl WarpToadNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n\n        // TODO do old  poseidon and use hash_3([self.nullifier_preimg, self.secret, self.destination_chain_id]) instead\n        // is okay to drop GENERATOR_INDEX__NOTE_HASH??\n        poseidon2_hash_with_separator(array_concat(self.pack(), [storage_slot]),GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n\n// #[derive(Packable)]\n// struct PrivateNFTPartialNotePrivateLogContent {\n//     nullifier_preimg: Field,\n//     secret: Field,\n//     destination_chain_id: Field\n// }\n\n// impl NoteType for PrivateNFTPartialNotePrivateLogContent {\n//     fn get_id() -> Field {\n//         WarpToadNote::get_id()\n//     }\n// }\n\n#[derive(Packable, Serialize, Deserialize)]\npub struct WarpToadNotePreCommitment {\n    preCommitment: Field,\n}\n\nimpl WarpToadNotePreCommitment {\n    pub fn commitment(self) -> Field {\n        self.preCommitment\n    }\n}\n\nimpl WarpToadNotePreCommitment {\n    /// Completes the partial note, creating a new note that can be used like any other NFTNote.\n    pub fn complete(self, amount: u64, context: &mut PublicContext) {\n        //context.emit_public_log(self.compute_note_completion_log(token_id));\n        context.push_note_hash(self.compute_complete_note_hash(amount));\n    }\n\n    // fn compute_note_completion_log(self, token_id: Field) -> [Field; 2] {\n    //     [self.commitment, token_id]\n    // }\n\n\n    // TODO use old poseidon? and drop the GENERATOR_INDEX__NOTE_HASH? is that safe?\n    fn compute_complete_note_hash(self, amount: u64) -> Field {\n        poseidon2_hash_with_separator([self.preCommitment, amount as Field], GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n","path":"/home/jimjim/Desktop/warp-toad/contracts/aztec/WarpToadCore/src/types/WarpToadNote.nr"},"57":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T, let N: u32> CapsuleArray<T>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T) {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().unkonstrained().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"65":{"source":"use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"66":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"68":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"70":{"source":"use crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod private_logs;\npub mod private_notes;\npub mod partial_notes;\npub mod nonce_discovery;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal PRIVATE_LOG_EXPANDED_METADATA_LEN: u32 = 1;\n\n/// The maximum length of the log's content, i.e. after log type ID and metadata extraction.\npub global MAX_LOG_CONTENT_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - PRIVATE_LOG_EXPANDED_METADATA_LEN;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/mod.nr"},"71":{"source":"use crate::{\n    discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr"},"72":{"source":"use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (e.g.\n/// the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\n// TODO(#11630): come up with some sort of slot allocation scheme.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = 77;\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_log(log_metadata, log_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = 0;\n    while i < pending_partial_notes.len() {\n        let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(i);\n\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            i += 1 as u32;\n            // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n            // for this tagged log when performing message discovery in the future until we either find it or the\n            // entry is somehow removed from the PXE DB.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n            // complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            array::for_each_in_bounded_vec(\n                discovered_notes,\n                |discovered_note: DiscoveredNoteInfo, _| {\n                    // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                    // temporary node connectivity issue - is simply throwing good enough here?\n                    assert(\n                        deliver_note(\n                            contract_address,\n                            pending_partial_note.storage_slot,\n                            discovered_note.nonce,\n                            complete_packed_note,\n                            discovered_note.note_hash,\n                            discovered_note.inner_nullifier,\n                            log.tx_hash,\n                            pending_partial_note.recipient,\n                        ),\n                        \"Failed to deliver note\",\n                    );\n                },\n            );\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n\n            // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n            // shifts the elements to the left if the removed element is not the last element.\n        }\n    }\n}\n\nfn decode_partial_note_private_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all partial note private logs must have at least {PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private log encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = log_content.get(0);\n    let note_completion_log_tag = log_content.get(1);\n\n    let packed_private_note_content = array::subbvec(log_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr"},"73":{"source":"use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier, MAX_LOG_CONTENT_LEN,\n        partial_notes::process_partial_note_private_log, PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        private_notes::process_private_note_log,\n    },\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::from_expanded_metadata,\n    },\n    oracle::message_discovery::sync_notes,\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    debug_log::{debug_log, debug_log_format},\n};\n\n// TODO(#12750): don't make these values assume we're using AES.\nuse crate::encrypted_logs::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    _contract_address: AztecAddress,\n    _compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually fetch tagged logs, decrypt and process them here, but for now we simply call the `syncNotes`\n    // oracle. This has PXE perform tag synchronization, log download, decryption, and finally calls to the the\n    // `process_log` contract function with the decrypted payload, which will in turn call `do_process_log` with a\n    // decrypted log, letting us continue the work outside of PXE.\n    sync_notes();\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\npub unconstrained fn do_process_log<Env>(\n    contract_address: AztecAddress,\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log_format(\"Processing log with tag {0}\", [log.get(0)]);\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (log_type_id, log_metadata, log_content) = decode_log_plaintext(log_plaintext);\n\n    if log_type_id == PRIVATE_NOTE_LOG_TYPE_ID {\n        debug_log(\"Processing private note log\");\n\n        process_private_note_log(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            compute_note_hash_and_nullifier,\n            log_metadata,\n            log_content,\n        );\n    } else if log_type_id == PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(contract_address, recipient, log_metadata, log_content);\n    } else {\n        // TODO(#11569): handle events\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id as Field],\n        );\n    }\n}\n\n/// Decodes a log's plaintext following aztec-nr's standard log encoding.\n///\n/// The standard private log layout is composed of:\n///  - an initial field called the 'expanded metadata'\n///  - an arbitrary number of fields following that called the 'log content'\n///\n/// ```\n/// log_plaintext: [ log_expanded_metadata, ...log_content ]\n/// ```\n///\n/// The expanded metadata itself is (currently) interpreted as a u128, of which:\n///  - the upper 64 bits are the log type id\n///  - the lower 64 bits are called the 'log metadata'\n///\n/// ```\n/// log_expanded_metadata: [  log_type_id    |  log_metadata  ]\n///                        <---  64 bits --->|<--- 64 bits --->\n/// ```\n///\n/// The meaning of the log metadata and log content depend on the value of the log type id. Note that there is\n/// nothing special about the log metadata, it _can_ be considered part of the content. It just has a different name\n/// to make it distinct from the log content given that it is not a full field.\nunconstrained fn decode_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (u64, u64, BoundedVec<Field, MAX_LOG_CONTENT_LEN>) {\n    assert(\n        log_plaintext.len() >= PRIVATE_LOG_EXPANDED_METADATA_LEN,\n        f\"Invalid log plaintext: all logs must be decrypted into at least {PRIVATE_LOG_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If PRIVATE_LOG_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_LOG_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for PRIVATE_LOG_EXPANDED_METADATA_LEN\",\n    );\n\n    // See the documentation of this function for a description of the log layout\n    let expanded_log_metadata = log_plaintext.get(0);\n    let (log_metadata, log_type_id) = from_expanded_metadata(expanded_log_metadata);\n    let log_content = array::subbvec(log_plaintext, PRIVATE_LOG_EXPANDED_METADATA_LEN);\n\n    (log_type_id, log_metadata, log_content)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr"},"74":{"source":"use crate::{\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        MAX_LOG_CONTENT_LEN,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note log content that are not the note's packed representation.\nglobal PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the log (e.g. log type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_LOG_CONTENT_LEN - PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_log<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_log(log_metadata, log_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                oracle::message_discovery::deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nfn decode_private_note_log(\n    log_metadata: u64,\n    log_content: BoundedVec<Field, MAX_LOG_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = log_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        log_content.len() > PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note log: all private note logs must have at least {PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the private note log encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = log_content.get(0);\n    let packed_note = array::subbvec(log_content, PRIVATE_NOTE_LOG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/discovery/private_notes.nr"},"75":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr"},"78":{"source":"use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n        log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse std::aes128::aes128_encrypt;\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/aes128.nr"},"82":{"source":"use crate::{\n    context::PrivateContext,\n    encrypted_logs::{\n        log_assembly_strategies::default_aes128::aes128::AES128,\n        log_encryption::LogEncryption,\n        log_type::{PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID, PRIVATE_NOTE_LOG_TYPE_ID},\n        metadata_packing::to_expanded_metadata,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The \"2\" in \"N + 2\" is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    log_type_id: u64,\n) -> [Field; (N + 2)]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    let mut fields = [0; N + 2];\n\n    // We pack log type id and log metadata into the first field. Search for `decode_log_plaintext` function to see\n    // where the value gets decoded.\n    fields[0] = to_expanded_metadata(Note::get_id() as u64, log_type_id);\n    fields[1] = storage_slot;\n    for i in 0..packed_note.len() {\n        fields[i + 2] = packed_note[i];\n    }\n\n    fields\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_LOG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_LOG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    log_type_id: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let plaintext = compute_note_plaintext_for_this_strategy(note, storage_slot, log_type_id);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\nfn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr"},"86":{"source":"global U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\npub fn to_expanded_metadata(log_metadata: u64, log_type: u64) -> Field {\n    let metadata_field = log_metadata as Field;\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (log_type as Field) * U64_SHIFT_MULTIPLIER;\n    type_field + metadata_field\n}\n\npub fn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let metadata = (input as u64);\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    let log_type = ((input - (metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    (metadata, log_type)\n}\n\nmod tests {\n    use super::{from_expanded_metadata, to_expanded_metadata};\n\n    global U64_MAX: Field = 2.pow_32(64) - 1;\n    global U128_MAX: Field = 2.pow_32(128) - 1;\n\n    #[test]\n    fn packing_metadata() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(0, U64_MAX as u64);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let packed = to_expanded_metadata(U64_MAX as u64, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let packed = to_expanded_metadata(0, 0);\n        let (metadata, log_type) = from_expanded_metadata(packed);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn unpacking_metadata() {\n        // Test case 1: All bits set\n        let input = U128_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 2: Only log type bits set\n        let input = U128_MAX - U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == U64_MAX as u64, \"Log type bits should be all 1s\");\n\n        // Test case 3: Only metadata bits set\n        let input = U64_MAX;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == U64_MAX as u64, \"Metadata bits should be all 1s\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n\n        // Test case 4: Zero\n        let input = 0;\n        let (metadata, log_type) = from_expanded_metadata(input);\n        assert(metadata == 0, \"Metadata bits should be 0\");\n        assert(log_type == 0, \"Log type bits should be 0\");\n    }\n\n    #[test]\n    fn roundtrip_metadata(original_metadata: u64, original_type: u64) {\n        let packed = to_expanded_metadata(original_metadata, original_type);\n        let (unpacked_metadata, unpacked_type) = from_expanded_metadata(packed);\n        assert(original_type == unpacked_type, \"Log type bits should match after roundtrip\");\n        assert(\n            original_metadata == unpacked_metadata,\n            \"Metadata bits should match after roundtrip\",\n        );\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/encrypted_logs/metadata_packing.nr"},"90":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/hash.nr"},"102":{"source":"use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"105":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"106":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"107":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"111":{"source":"use crate::{\n    discovery::private_notes::MAX_NOTE_PACKED_LEN,\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{\n            stub_registry,\n            utils::{create_message_discovery_call, find_and_transform_top_level_unconstrained_fns},\n        },\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    find_and_transform_top_level_unconstrained_fns(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform message discovery, resulting in new private notes, partial notes and events.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll\n                // not be modified by the macros that alter unconstrained functions. As such, we need to manually inject\n                // the unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_ciphertext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let message_discovery_call = create_message_discovery_call();\n    quote {\n        unconstrained fn sync_notes() {\n            // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n            // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n            // unconstrained execution context since it will not be available otherwise.\n            let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n            $message_discovery_call\n        }\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"112":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"116":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"119":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_public, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn find_and_transform_top_level_unconstrained_fns(m: Module) {\n    // Top-level unconstrained fns are contract entrypoints, but they're not explicitly designated in any way. They're\n    // the fallback case for a function that matches no other rules.\n    // TODO(#12743): improve this\n\n    // We first find non-standard contract entrypoints, i.e. functions in the `contract` mod that are not private or\n    // public, but which *are* contract entrypoints (i.e. they're not opting out via the #[test] or\n    // #[contract_library_method] attributes). Ideally entrypoints would be explicitly designated instead.\n    let non_private_public_entrypoint_functions = m.functions().filter(|f: FunctionDefinition| {\n        !is_fn_private(f)\n            & !is_fn_public(f)\n            & !f.has_named_attribute(\"contract_library_method\")\n            & !f.has_named_attribute(\"test\")\n    });\n\n    // TODO: uncomment the code below and emit a warning once support for them is added to Noir (tracked in\n    // https://github.com/noir-lang/noir/issues/7714). We can't simply print a message since that'd otherwise break the\n    // output of utils such as `nargo test --list-tests`.\n    // // We don't expect to see any custom constrained entrypoints (i.e. private functions created outside of aztec-nr's\n    // // #[private] macro, possibly resulting in a non-standard interface).\n    // for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n    //     !f.is_unconstrained()\n    // }) {\n    //     let name = f.name();\n    //     warn(\n    //         f\"found private contract function '{name}' which does not have the #[private] attribute - make sure you know what you're doing!\",\n    //     );\n    // }\n\n    // An unconstrained contract entrypoints is what we call a top-level unconstrained function, to which we apply the\n    // appropriate transformation. Ideally these would be explicitly designated as such instead.\n    for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n        f.is_unconstrained()\n    }) {\n        transform_top_level_unconstrained(f);\n    }\n}\n\npub(crate) comptime fn transform_top_level_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"121":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"122":{"source":"use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"126":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"128":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"131":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"134":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"135":{"source":"use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"137":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use protocol_types::{\n    block_header::BlockHeader, merkle_tree::root::root_from_sibling_path, traits::Hash,\n};\n\nuse crate::{\n    context::PrivateContext, oracle::get_membership_witness::get_archive_membership_witness,\n};\n\n#[oracle(getBlockHeader)]\nunconstrained fn get_block_header_at_oracle(_block_number: u32) -> BlockHeader {}\n\nunconstrained fn get_block_header_at_internal(block_number: u32) -> BlockHeader {\n    get_block_header_at_oracle(block_number)\n}\n\npub fn get_block_header_at(block_number: u32, context: PrivateContext) -> BlockHeader {\n    let historical_header = context.historical_header;\n    let historical_block_number = historical_header.global_variables.block_number as u32;\n\n    if (block_number == historical_block_number) {\n        // If the block number we want to prove against is the same as the block number in the historical header we\n        // skip the inclusion proofs and just return the historical header from context.\n        historical_header\n    } else {\n        // 1) Get block number corresponding to the last_archive root in the header\n        // Note: We subtract 1 because the last_archive root is the root of the archive after applying the previous block\n        let last_archive_block_number = historical_block_number - 1;\n\n        // 2) Check that the last archive block number is more than or equal to the block number we want to prove against\n        // We could not perform the proof otherwise because the last archive root from the header would not \"contain\"\n        // the header we want to prove against\n        assert(\n            last_archive_block_number >= block_number,\n            \"Last archive block number is smaller than the block number we want to prove against\",\n        );\n\n        // 3) Get the header hint of a given block from an oracle\n        // Safety: The header is constrained to be in the archive tree below.\n        let header = unsafe { get_block_header_at_internal(block_number) };\n\n        // 4) We make sure that the header hint we received from the oracle exists in the state tree and is the actual header\n        // at the desired block number\n        constrain_get_block_header_at_internal(\n            header,\n            block_number,\n            last_archive_block_number,\n            historical_header.last_archive.root,\n        );\n\n        // 5) Return the block header\n        header\n    }\n}\n\nfn constrain_get_block_header_at_internal(\n    header_hint: BlockHeader,\n    block_number: u32,\n    last_archive_block_number: u32,\n    last_archive_root: Field,\n) {\n    // 1) Compute the block hash from the block header\n    let block_hash = header_hint.hash();\n\n    // 2) Get the membership witness of the block in the archive tree\n    // Safety: The witness is only used as a \"magical value\" that makes the merkle proof below pass. Hence it's safe.\n    let witness = unsafe { get_archive_membership_witness(last_archive_block_number, block_hash) };\n\n    // 3) Check that the block is in the archive (i.e. the witness is valid)\n    assert_eq(\n        last_archive_root,\n        root_from_sibling_path(block_hash, witness.index, witness.path),\n        \"Proving membership of a block in archive failed\",\n    );\n\n    // 4) Check that the header hint has the same block number as the block number we are looking for, ensuring we are actually grabbing the header we specify\n    assert_eq(\n        header_hint.global_variables.block_number as u32,\n        block_number,\n        \"Block number provided is not the same as the block number from the header hint\",\n    );\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::{constrain_get_block_header_at_internal, get_block_header_at_internal};\n\n    #[test(should_fail_with = \"Block number provided is not the same as the block number from the header hint\")]\n    unconstrained fn fetching_a_valid_but_different_header_should_fail() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_by(4);\n\n        // We get our current header for the last archive values.\n        let current_header = env.private().historical_header;\n\n        let target_block_number = 3;\n        let bad_header = get_block_header_at_internal(target_block_number);\n\n        // We pass in a different block number than the header received\n        constrain_get_block_header_at_internal(\n            bad_header,\n            target_block_number - 1,\n            current_header.global_variables.block_number as u32 - 1,\n            current_header.last_archive.root,\n        );\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/block_header.nr"},"141":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"143":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"144":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"145":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"147":{"source":"use protocol_types::constants::{ARCHIVE_HEIGHT, NOTE_HASH_TREE_HEIGHT};\n\nglobal NOTE_HASH_TREE_ID: Field = 1;\nglobal ARCHIVE_TREE_ID: Field = 4;\n\n// Note: We have M here because we need to somehow set it when calling get_membership_witness function and one way to\n// do it is to set M here and then set type of the return param, e.g.:\n//\n// `let witness: MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> = get_membership_witness(...);`\n//\n// Another way to do it would be to add \"type_hint: [Field; T]\" as argument to `get_membership_witness` but that's\n// a bit too boilerplatey for my taste.\npub struct MembershipWitness<let N: u32, let M: u32> {\n    pub index: Field,\n    pub path: [Field; N],\n}\n\n#[oracle(getMembershipWitness)]\nunconstrained fn get_membership_witness<let N: u32, let M: u32>(\n    _block_number: u32,\n    _tree_id: Field,\n    _leaf_value: Field,\n) -> MembershipWitness<N, M> {}\n\n// Note: get_nullifier_membership_witness function is implemented in get_nullifier_membership_witness.nr\n\npub unconstrained fn get_note_hash_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n    get_membership_witness(block_number, NOTE_HASH_TREE_ID, leaf_value)\n}\n\n// There is no `get_public_data_membership_witness` function because it doesn't make sense to be getting a membership\n// witness for a value in the public data tree.\n\npub unconstrained fn get_archive_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<ARCHIVE_HEIGHT, ARCHIVE_HEIGHT + 1> {\n    get_membership_witness(block_number, ARCHIVE_TREE_ID, leaf_value)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_membership_witness.nr"},"149":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"150":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"151":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"153":{"source":"use crate::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"155":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"156":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"157":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"158":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"160":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"165":{"source":"use crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // docs:start:insert\n    pub fn insert(self, note: Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteType + NoteHash + Packable<N> + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"167":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"168":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"182":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"183":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"184":{"source":"pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr"},"185":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"186":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"188":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"189":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"191":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"193":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"194":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"197":{"source":"use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"215":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"258":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"264":{"source":"use crate::{\n    abis::{append_only_tree_snapshot::AppendOnlyTreeSnapshot, global_variables::GlobalVariables},\n    constants::{BLOCK_HEADER_LENGTH, GENERATOR_INDEX__BLOCK_HASH},\n    content_commitment::ContentCommitment,\n    hash::poseidon2_hash_with_separator,\n    state_reference::StateReference,\n    traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arrays::subarray,\n};\n\n// docs:start:block-header\npub struct BlockHeader {\n    pub last_archive: AppendOnlyTreeSnapshot,\n    pub content_commitment: ContentCommitment,\n    pub state: StateReference,\n    pub global_variables: GlobalVariables,\n    pub total_fees: Field,\n    pub total_mana_used: Field,\n}\n// docs:end:block-header\n\nimpl Eq for BlockHeader {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive)\n            & self.content_commitment.eq(other.content_commitment)\n            & self.state.eq(other.state)\n            & self.global_variables.eq(other.global_variables)\n            & self.total_fees.eq(other.total_fees)\n            & self.total_mana_used.eq(other.total_mana_used)\n    }\n}\n\nimpl Serialize<BLOCK_HEADER_LENGTH> for BlockHeader {\n    fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, BLOCK_HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n        fields.push(self.total_mana_used);\n        fields.storage()\n    }\n}\n\nimpl Deserialize<BLOCK_HEADER_LENGTH> for BlockHeader {\n    fn deserialize(serialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = subarray(serialized, offset);\n        offset = offset + last_archive_fields.len();\n\n        let content_commitment_fields = subarray(serialized, offset);\n        offset = offset + content_commitment_fields.len();\n\n        let state_fields = subarray(serialized, offset);\n        offset = offset + state_fields.len();\n\n        let global_variables_fields = subarray(serialized, offset);\n        offset = offset + global_variables_fields.len();\n\n        let total_fees = serialized[offset];\n        offset = offset + 1;\n\n        let total_mana_used = serialized[offset];\n\n        BlockHeader {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees,\n            total_mana_used,\n        }\n    }\n}\n\nimpl Empty for BlockHeader {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0,\n            total_mana_used: 0,\n        }\n    }\n}\n\nimpl Hash for BlockHeader {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = BlockHeader::empty();\n    let serialized = header.serialize();\n    let deserialized = BlockHeader::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = BlockHeader::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = BlockHeader::empty();\n    let hash = header.hash();\n\n    // Value from header.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x28e48e620bc00817609b5fc765bc74864561f25a3c941b33e5ee05266b752839;\n    assert_eq(hash, test_data_empty_hash);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/block_header.nr"},"273":{"source":"use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"275":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"276":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"277":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"286":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"290":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"292":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"293":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"302":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"313":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"327":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"331":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"332":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"348":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"349":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"351":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"357":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/jimjim/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"358":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    encrypted_logs::log_assembly_strategies::default_aes128::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"360":{"source":"use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UnconstrainedContext, note::note_viewer_options::NoteViewerOptions,\n    state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UnconstrainedContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"361":{"source":"use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/filter.nr"},"364":{"source":"use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n","path":"/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.82.3/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}