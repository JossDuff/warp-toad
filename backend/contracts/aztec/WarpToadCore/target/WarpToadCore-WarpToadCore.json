{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "WarpToadCore",
  "functions": [
    {
      "name": "burn",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "destination_chain_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nullifier_preimg",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_giga_root",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_giga_root"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "transfer",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "sender",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_notes_internal",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_collapse_hints",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "hash_unique_note_hash_helper",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "note_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hash_index_in_tx",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "hash_unique_note_hash_helper"
      ]
    },
    {
      "name": "get_balance",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_balance"
      ]
    },
    {
      "name": "get_chain_id",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_chain_id"
      ]
    },
    {
      "name": "mint_local",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nullifier_preimg",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "burn_tx_first_nullifier",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_index_in_tx",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4174732183419875782": {
            "error_kind": "string",
            "string": "Proving note inclusion failed"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_note_hash_membership_witness",
        "notify_created_nullifier_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "mint_giga_root",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "get_note_proof",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "block_number",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          },
          {
            "name": "note_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::oracle::get_membership_witness::MembershipWitness",
            "fields": [
              {
                "name": "index",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "path",
                "type": {
                  "kind": "array",
                  "length": 40,
                  "type": {
                    "kind": "field"
                  }
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "get_note_proof"
      ]
    },
    {
      "name": "mint_for_testing",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "notify_created_note_oracle_wrapper",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "receive_giga_root",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "giga_root",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAAB7HgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAACkJwICAAEwDAABAAImKACABAR4AA0AAACABIADJACAAwAAAKMqAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiY=",
      "debug_symbols": "5ZTdioMwEIXfJddeZCaZ/PRVlqXYNhZBVPxZWKTvvkkx6rrS3ti96Y1k5CNzMnM4A7u4U3895mVWtezwMbCiOqddXpW+Gm4JOzV5UeTX4/I34+Gj6c63dVqGsu3SpmMHEEg8Ya68hLMw5O/I8sKxg/XHvzhHjDSXOMO4AUulYISl0nyCFd+ADXEaYUMIS/gzYYbvIt7aSAPY/xO/z+TJTJM3TyYPpHWElRCPxVuy8aVWCbkSb8XO4gF/iQ8tzMtbAFev7wGw1QMJ4i6Q5Gwk2toFSB53ARL1BPstbtmOCxVt56U9XrM2IrpfG/vE0ADS0PRUQrVyBYB6k7fefPWVNnl6KtyYsVlfnheR233XbpW+dVOd3aVvXMjhOYIhpBiKBM19hKGwiQDfw/f5AQ==",
      "brillig_names": [
        "receive_giga_root"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "initializer",
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "L1_contract",
            "type": {
              "kind": "struct",
              "path": "protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "ValueNote"
            },
            {
              "fields": [
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "WarpToadCore"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "giga_root",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "L1_contract",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::mint_for_testing_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::mint_for_testing_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "L1_contract",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::mint_giga_root_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::mint_giga_root_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nullifier_preimg",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "recipient",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "burn_tx_first_nullifier",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "note_index_in_tx",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::mint_local_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::mint_local_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "destination_chain_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_preimg",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "sender",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::burn_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::burn_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "giga_root",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "WarpToadCore::receive_giga_root_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "WarpToadCore::receive_giga_root_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "101": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "102": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "104": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "105": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "106": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "107": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "114": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "115": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "122": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "125": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "128": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "129": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "131": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "135": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "137": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "139": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "141": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_membership_witness.nr",
      "source": "use protocol_types::constants::{ARCHIVE_HEIGHT, NOTE_HASH_TREE_HEIGHT};\n\nglobal NOTE_HASH_TREE_ID: Field = 1;\nglobal ARCHIVE_TREE_ID: Field = 4;\n\n// Note: We have M here because we need to somehow set it when calling get_membership_witness function and one way to\n// do it is to set M here and then set type of the return param, e.g.:\n//\n// `let witness: MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> = get_membership_witness(...);`\n//\n// Another way to do it would be to add \"type_hint: [Field; T]\" as argument to `get_membership_witness` but that's\n// a bit too boilerplatey for my taste.\npub struct MembershipWitness<let N: u32, let M: u32> {\n    pub index: Field,\n    pub path: [Field; N],\n}\n\n#[oracle(getMembershipWitness)]\nunconstrained fn get_membership_witness<let N: u32, let M: u32>(\n    _block_number: u32,\n    _tree_id: Field,\n    _leaf_value: Field,\n) -> MembershipWitness<N, M> {}\n\n// Note: get_nullifier_membership_witness function is implemented in get_nullifier_membership_witness.nr\n\npub unconstrained fn get_note_hash_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n    get_membership_witness(block_number, NOTE_HASH_TREE_ID, leaf_value)\n}\n\n// There is no `get_public_data_membership_witness` function because it doesn't make sense to be getting a membership\n// witness for a value in the public data tree.\n\npub unconstrained fn get_archive_membership_witness(\n    block_number: u32,\n    leaf_value: Field,\n) -> MembershipWitness<ARCHIVE_HEIGHT, ARCHIVE_HEIGHT + 1> {\n    get_membership_witness(block_number, ARCHIVE_TREE_ID, leaf_value)\n}\n"
    },
    "143": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "144": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "145": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "146": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "147": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "149": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "150": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "151": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "152": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "154": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "160": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "162": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "163": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "177": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "178": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "180": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "181": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "183": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "184": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "186": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "188": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "189": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "192": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "196": {
      "path": "/home/jimjim/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon/bn254/perm.nr",
      "source": "// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::poseidon::bn254::consts;\nuse crate::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n"
    },
    "197": {
      "path": "/home/jimjim/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon/bn254.nr",
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n"
    },
    "198": {
      "path": "/home/jimjim/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon/mod.nr",
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse std::default::Default;\nuse std::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        std::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        std::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    std::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "216": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "218": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "261": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "262": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "276": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "278": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "279": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "280": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "289": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "293": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "295": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "296": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "305": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "316": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "334": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "335": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "351": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "352": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "354": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "360": {
      "path": "/home/jimjim/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "361": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr",
      "source": "use dep::aztec::{\n    context::PrivateContext, messages::logs::note::encode_and_encrypt_note,\n    note::note_getter_options::NoteGetterOptions, protocol_types::address::AztecAddress,\n    state_vars::PrivateSet,\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\npub struct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // Creates new note for the owner.\n        let addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(addend_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, sender: AztecAddress) {\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value() as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(result_note).emit(encode_and_encrypt_note(self.context, owner, sender));\n    }\n}\n"
    },
    "363": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/value-note/src/balance_utils.nr",
      "source": "use crate::value_note::ValueNote;\nuse dep::aztec::{\n    context::UtilityContext, note::note_viewer_options::NoteViewerOptions, state_vars::PrivateSet,\n};\n\npub unconstrained fn get_balance(set: PrivateSet<ValueNote, UtilityContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\npub unconstrained fn get_balance_with_offset(\n    set: PrivateSet<ValueNote, UtilityContext>,\n    offset: u32,\n) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value();\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n"
    },
    "364": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/value-note/src/filter.nr",
      "source": "use crate::value_note::ValueNote;\nuse aztec::{\n    note::retrieved_note::RetrievedNote,\n    protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, utils::field::full_field_less_than,\n    },\n};\n\npub fn filter_notes_min_sum(\n    notes: [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: Field,\n) -> [Option<RetrievedNote<ValueNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & full_field_less_than(sum, min_sum) {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum += retrieved_note.note.value();\n        }\n    }\n\n    selected\n}\n"
    },
    "367": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/value-note/src/value_note.nr",
      "source": "use aztec::{macros::notes::note, oracle::random::random, protocol_types::address::AztecAddress};\n\n// docs:start:value-note-def\n#[note]\n#[derive(Eq)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        ValueNote { value, owner, randomness }\n    }\n\n    pub fn value(self) -> Field {\n        self.value\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/home/jimjim/Desktop/warp-toad/backend/contracts/aztec/WarpToadCore/src/main.nr",
      "source": "use aztec::macros::aztec;\n// from\n// https://github.com/privacy-scaling-explorations/zk-kit.noir/blob/fa5fdb0f0d0867e367388f85079db3b1f9a47590/packages/merkle-trees/src/merkle.nr#L3\n\n// token functionality based of: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/easy_private_token_contract/src/main.nr\n// TODO upgrade to more fleshed out version at: https://github.com/AztecProtocol/aztec-packages/blob/v0.84.0/noir-projects/noir-contracts/contracts/token_contract/src/main.nr\n\n#[aztec]\npub contract WarpToadCore {\n    // macros\n    use aztec::macros::{notes::note, functions::{initializer, private, public, view, internal,utility}, storage::{storage}};\n    \n    // storage types\n    use aztec::prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable};\n    use dep::easy_private_state::EasyPrivateUint;\n    use dep::value_note::balance_utils;\n\n    // note proving\n    use aztec::oracle::get_membership_witness::{\n        get_note_hash_membership_witness, MembershipWitness,\n    };\n    use aztec::protocol_types::{\n        merkle_tree::root::root_from_sibling_path, \n        constants::NOTE_HASH_TREE_HEIGHT,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash}\n        };\n\n    // old poseidon was removed from std lib for some reason?\n    // https://github.com/noir-lang/noir/pull/7650\n    use poseidon::poseidon;\n\n    // archive tree proving\n    use aztec::history::public_storage::PublicStorageHistoricalRead;\n    use protocol_types::{block_header::BlockHeader, transaction::tx_context::TxContext};\n\n    #[storage]\n    struct Storage<Context> {\n\n        giga_root: PublicMutable<Field, Context>,\n\n        L1_contract: PublicImmutable<EthAddress, Context>,\n\n        balances: Map<AztecAddress, EasyPrivateUint<Context>, Context>,\n    }\n\n    /**\n     * initialize the contract's initial state variables.\n     */\n    #[initializer]\n    #[public]\n    fn constructor(L1_contract: EthAddress) {\n        storage.L1_contract.initialize(L1_contract);\n    }\n\n    // @TODO @WARNING remove this in prod!! Do minting from giga root instead\n    #[private]\n    fn mint_for_testing(amount: u64, recipient: AztecAddress) {\n        storage.balances.at(recipient).add(amount, recipient, context.msg_sender());\n    }\n\n    #[public]\n    fn receive_giga_root(giga_root: Field) {\n        // TODO make only the bridge able to use this function. And also make sure the contract that send the bridge transfer is L1_contract\n        storage.giga_root.write(giga_root);\n    }\n\n    // Transfers `amount` of tokens from `sender` to a `recipient`.\n    // TODO unsafe any can be pretend to be sender if they know the viewing\n    #[private]\n    fn transfer(amount: u64, sender: AztecAddress, recipient: AztecAddress) {\n        storage.balances.at(sender).sub(amount, sender, sender);\n        storage.balances.at(recipient).add(amount, recipient, sender);\n    }\n\n    // we can split up mint types based on where the burn happened to make users staying on aztec have faster proof time.\n    // you can only do this on aztec because on aztec everything is private. So others don't see what function you called!!! :D\n    #[private]\n    fn mint_giga_root(amount: u64) {\n        let chain_id: Field = context.chain_id();\n\n        let giga_root_slot: Field =\n            aztec::state_vars::storage::Storage::get_storage_slot(storage.giga_root);\n        let contract_address = context.this_address();\n        let giga_root = context.historical_header.public_storage_historical_read(\n            giga_root_slot,\n            contract_address,\n        );\n\n        // TODO check if commitment (from the other chain) is in that root\n    }\n\n    // TODO this is not safe. if sender reveals their viewing keys others can spend their token(they should only be able to see them!)\n    // Look at the token contract example for how to do that \n    // https://discord.com/channels/1144692727120937080/1359842526915203096\n    #[private]\n    fn burn(\n        amount: u64,\n        destination_chain_id: Field,\n        secret: Field,\n        nullifier_preimg: Field,\n        sender: AztecAddress,\n    ) {\n        storage.balances.at(sender).sub(amount, sender, sender);\n\n        // add the commitment\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        context.push_note_hash(commitment); // TODO this doesnt actually put it in the fucking tree???\n    }\n\n    #[contract_library_method]\n    fn hash_unique_note_hash(\n        contract_address: AztecAddress,\n        note_hash: Field,\n        first_nullifier_in_tx: Field,\n        unique_note_hash_index_in_tx: u32,\n    ) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, note_hash);\n        let nonce = compute_note_hash_nonce(first_nullifier_in_tx,unique_note_hash_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce,siloed_note_hash);\n        unique_note_hash\n    }\n\n    //TODO long term we need js equivalent for performance and cleaner code but we need poseidon2 in js for that\n    #[utility]\n    unconstrained fn hash_unique_note_hash_helper(\n        contract_address: AztecAddress,\n        note_hash: Field,\n        first_nullifier_in_tx: Field,\n        unique_note_hash_index_in_tx: u32,\n    ) -> pub Field {\n        hash_unique_note_hash(contract_address, note_hash,first_nullifier_in_tx,unique_note_hash_index_in_tx)\n    }\n\n    #[contract_library_method]\n    fn prove_note_hash_inclusion(\n        plain_note_hash: Field,      \n        block_header: BlockHeader,\n        contract_address: AztecAddress,\n        first_nullifier_in_tx: Field, // any nullifier that is in the same tx as ur commitment\n        unique_note_hash_index_in_tx: u32\n    ) {\n        let unique_note_hash = hash_unique_note_hash(contract_address,plain_note_hash,first_nullifier_in_tx,unique_note_hash_index_in_tx);\n\n        let witness: MembershipWitness<40, 41> = unsafe {\n            get_note_hash_membership_witness(block_header.global_variables.block_number as u32, unique_note_hash)\n        };\n\n        assert_eq(\n            block_header.state.partial.note_hash_tree.root,\n            root_from_sibling_path(unique_note_hash, witness.index, witness.path),\n            \"Proving note inclusion failed\",\n        );\n    }\n\n    #[contract_library_method]\n    fn hash_commit(\n        nullifier_preimg: Field,\n        secret: Field,\n        destination_chain_id: Field,\n        amount: u64,\n    ) -> Field {\n        let pre_commitment: Field = poseidon::bn254::hash_3([nullifier_preimg, secret, destination_chain_id]);\n        let commitment: Field = poseidon::bn254::hash_2([amount as Field, pre_commitment]);\n        commitment\n    }\n\n    #[private]\n    fn mint_local(\n        nullifier_preimg: Field,\n        secret: Field,\n        amount: u64,\n        recipient: AztecAddress,\n        burn_tx_first_nullifier: Field, // any nullifier that is in the same tx as ur commitment\n        note_index_in_tx: u32,\n    ) {\n        let chain_id: Field = context.chain_id();\n        let commitment: Field = hash_commit(nullifier_preimg, secret, chain_id, amount);\n        let nullifier: Field = poseidon::bn254::hash_1([nullifier_preimg]);\n\n        let block_header: BlockHeader = context.historical_header;\n        let contract_address: AztecAddress = context.this_address();\n\n        prove_note_hash_inclusion(\n            commitment,       \n            block_header,\n            contract_address,\n            burn_tx_first_nullifier, \n            note_index_in_tx,\n        );\n\n        // TODO pushing the same nullifier twice is impossible right??\n        context.push_nullifier(nullifier);\n        // mint!\n        storage.balances.at(recipient).add(amount, recipient, recipient);\n    }\n\n    // it allows us to do a eth_getProof like thing for a commitment. Kinda cringe that i cant just call a api in js like on ethereum? Maybe you can?\n    #[utility]\n    unconstrained fn get_note_proof(\n        block_number: u32,\n        note_hash: Field,\n    ) -> pub MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n        get_note_hash_membership_witness(block_number, note_hash)\n    }\n\n\n    // DEBUG remove later\n    #[utility]\n    unconstrained fn get_chain_id() -> pub Field {\n        context.chain_id()\n    }\n\n    // Helper function to get the balance of a user.\n    #[utility]\n    unconstrained fn get_balance(owner: AztecAddress) -> pub Field {\n        balance_utils::get_balance(storage.balances.at(owner).set)\n    }\n\n    #[utility] \n    unconstrained fn get_giga_root() -> pub Field {\n        storage.giga_root.read()\n    }\n\n}\n"
    },
    "51": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "59": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "60": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "62": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "66": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "78": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "81": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "82": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "83": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "87": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "88": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "92": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "95": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "97": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "98": {
      "path": "/home/jimjim/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    }
  }
}
