{"transpiled":true,"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"L2AztecRootBridgeAdapter","functions":[{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7043145299448266897":{"error_kind":"string","string":"L1-to-L2 message is already nullified"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13293000217372736598":{"error_kind":"string","string":"Tried to consume nonexistent L1-to-L2 message"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15520311074722577191":{"error_kind":"string","string":"Function get_config_public can only be called statically"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","brillig_names":["public_dispatch"]},{"name":"get_giga_root","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WWTVODMBCGQ0s/ANGZ+ge86DlYOu2xfly8ePDgPUKoHRVmAO/96cLMpqxrYOoQdobZBJJnNy8bgsUas8Db7LdZ7ASzOu7dgHfAj9DzcXVtoc/7WeCQuCb5Gx6uHM36DOa/dIBpDcPnij+Q/nwGnMdDw8drUXHn1XWG2j60/Y75Q+ZevdvQQUzT/MqCy5b8a/NAhyvo19qcQ3sny/vPLPp4/v56kzneZVRdpiFjq6mLhvqQpWUuovIujnNZFJQw0pBZC9VF1HexT5/itnz+SXuVebHPUkqzT6SNYcwEjcdzHM29LXjez457eWqeHfjAnhFd8Jrm6L7BOr7VVRx9uzi+S3I1va8sEk/lQ/VR9VxXmAftosxysZMvUsQ4dSof9bTsdOcm3kK6ebgsVX+q4XTZwMfFUVqcJ5UWx79gfz8daq7P2o8DjzW/BvbB/FrWG85V3DHwJ0z/kbTRczz+Gvouyl95u0eeyVoEyVIkYiXiOIzEgvAZ0ekH/forNbAJAAA=","debug_symbols":"7ZjBjoIwEIbfpWcOnZl22voqm41BRUNCwCBusjG8+4KhiJbIxRPbC6HkY/LzTQ9lbuKQ7a6nbV4eq4vYfN1EUe3TJq/KbnVrE7Gr86LIT9vpYyH7C6g7fzmnZb+8NGndiA1IBTYRWXm43xvT1TjmRSY2jtskwI3lAbZSjSjTDKpRD6jWckSBbPudCNAfCGPJ+DDavQ+jyA2oYhuE4U+EscqHcfZ9GJbeDCMHYcwHwjjEAXakF8JYOaBGhm2yc2EQnRePRDi+pGGmPrDxYoDdo03AaoZGYP+ZCHahqeCU7ypKMO9hA166me4APbtbrK+rQT6xvRP3P52A3yeazKsTlNFJ4ASik8AJRieBE4pOAicqOgmc6OgkcMLRSeDErMeJfDhxC04InZdCBI9/E+oPwGEMaWg8Tk8yk56jLfjMltQCy2NvmPiJ7XuzovP06nqzonP9unrTdsuftM7TXZENY47jtdxPph7N7zl7GYCc62qfHa511o9CJlOQ/k+FMCHTle1K/wE=","brillig_names":["get_giga_root"]},{"name":"count","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_count","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAAB7HgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAACkJwICAAQwDAABAAImKACABAR4AA0AAACABIADJACAAwAAAKMqAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiY=","debug_symbols":"5ZTLioQwEEX/JWsXqcq7f2UYGh+xEUTFx8Ag/vskjVHHke6NPZveiCXH3FuV4o4ks8lwuxZVXnfk8jGSsk7jvqgrV41TRJK2KMvidt1+JtQ/lLjzXRNXvuz6uO3JBRgKGhFbZf6daeHOyIvSkouRU/QXp4iBphxXmB3AXEqYYS4VXWAJB7AWVMywFghb+DMimp5i3phAA5j/M3/O5IVeJq+fTB6EUgGWjD02b4QJnRrJ+M68YSebB/xl3kvol0sAla/XADjSQNBhvIh0/Ukc3QVwGmDgqBYYJD9aO8pkWDtn7fE1K83C9ittniw0ANdiaVWg3G0FgHyTXidXfcVtESelnTM2H6p0E7n9d2N36du0dWqzobU+h9cIBp9iyCLU9xH6wkQMnIbT+QE=","brillig_names":["count"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"get_config_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"config::Config","fields":[{"name":"portal","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"15520311074722577191":{"error_kind":"string","string":"Function get_config_public can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAADOHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAAD3HgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAABCS8MAAIAARwMAQIALAIAAwAAAAAAAAAAAAAAAAD//////////////////////////w44AgMEJAIABAAAAM0lAAABGyYoAIAEBHgADQAAAIAEgAMkAIADAAAA9ioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF12M4sTxmeyc8AQECJioBAAEFWgLkG7UeqZ88AQECJg==","debug_symbols":"7ZfBbsIwDIbfJeceYjuOE15lmqYCZapUFVRg0oR496WoaTsWrROCqQcuiKDP8R//cYRPal0sj+9vZb3Z7tXi5aSq7So/lNs6rE7nTC2bsqrK97fxz0q3H8IXfr/L63a5P+TNQS2AkHWminrdfifHYY9NWRVq4e05+4lrxEhrgwNMCdhYCx1srOgetpCAHWvuYMcIY/g1U07fRbz3kQbw/yf+PpVn11feTVQeWCTCluh38Z59PKm3ZK7Ee7qzeMBv4tsU7uEpQNvH5wBI5sBwI2IUsqHfc0i4pR0tAZ+wDm1sR4+Or6wDsH8R9O3QbRjCbWG3ZSNzW5hPhoHv/UQ9tDinqkcWY9eSda6HQ8ukzEfpXw/0w9aQ7EBhZ6KNVk/YKOQowmZ0r5IwAIntb6EZHbJz3fDMKyNDZXDiYTXi41mNo0EIepNqB+H+idTDzphULegHGRNsqDP1JbdugmaJMI+r4S7usH66M193nDzdma87Hp/uzNYd1M+Xba7unMPqI2/KfFkV3aC4Odar0dx4+NwVVyPkrtmuivWxKdphcpgjobWZMCO5/MUMC2MyY0OOkOcL","brillig_names":["get_config_public"]},{"name":"send_root_to_l1","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"state_root","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["send_root_to_l1"]},{"name":"get_content_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"local_root","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_content_hash"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"rZLNqoMwEEbfJWsX+c/EVymXEjWWQIgS9UIR372xxCK1tBs3QyYchpPMN6PGVtPt6kLbDai8zMh3tRldF1I3LwWqovPe3a77a4TXQtiTH3oT1nYYTRxRSTAnUCAbmudZqTSjdd6iUsulOOAKZIYB8xcq2QdUUJFRIfALJQyWvwIRfoIMMLXJCP1dhjOdUS7hICPOkAG+yWj4LiPx9jOSyoOMPEFGU5phzcQPGcAZVfhtTUtq/010pvI2x6udQr1L23jv7Vvw+tjVtpmiXSO4S1+ql/QEytLYNPoB","brillig_names":["sync_notes"]},{"name":"update_gigaroot","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"new_gigaroot","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7043145299448266897":{"error_kind":"string","string":"L1-to-L2 message is already nullified"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13293000217372736598":{"error_kind":"string","string":"Tried to consume nonexistent L1-to-L2 message"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","brillig_names":["update_gigaroot"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"L2AztecRootBridgeAdapter"}},{"name":"fields","value":{"fields":[{"name":"config","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"temp_testing_giga_root","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"counter","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_count","type":{"kind":"field"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::count_parameters"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::count_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"portal","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::constructor_parameters"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"local_root","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::get_content_hash_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::get_content_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_gigaroot","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::update_gigaroot_parameters"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::update_gigaroot_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"L2AztecRootBridgeAdapter::get_config_public_parameters"}},{"name":"return_type","type":{"fields":[{"name":"portal","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"config::Config"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::get_config_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"state_root","type":{"kind":"field"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::send_root_to_l1_parameters"}}],"kind":"struct","path":"L2AztecRootBridgeAdapter::send_root_to_l1_abi"}]}},"file_map":{"138":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"140":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"},"153":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"163":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"},"164":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"18":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"},"193":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr","source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"},"20":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"219":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"262":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"263":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"279":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"},"280":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"294":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr","source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"},"335":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr","source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"},"336":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"352":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"353":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"355":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"361":{"path":"/home/joss/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr","source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"},"42":{"path":"std/option.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"43":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"51":{"path":"/home/joss/dev/warp-toad/backend/contracts/aztec/L2AztecRootBridgeAdapter/src/main.nr","source":"mod config;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal implementation of the message bridge that can move messages between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n\n#[aztec]\npub contract L2AztecRootBridgeAdapter {\n    use crate::config::Config;\n\n    use dep::aztec::prelude::{\n        EthAddress,  PublicImmutable, PublicMutable,\n    };\n\n\tuse dep::aztec::oracle::debug_log::{ debug_log_format };\n\tuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n    use dep::aztec::macros::{\n        functions::{initializer, public, utility, view},\n        storage::storage,\n    };\n\n    // Storage structure, containing all storage, and specifying what slots they use.\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        temp_testing_giga_root: PublicMutable<Field, Context>,\n        // temp for testing\n        counter: PublicMutable<Field, Context>,\n    }\n\n    // Constructs the contract.\n    #[public]\n    #[initializer]\n    fn constructor(portal: EthAddress) {\n        storage.config.initialize(Config { portal });\n    }\n\n    #[public]\n    #[view]\n    fn get_config_public() -> Config {\n        storage.config.read()\n    }\n\n    // Consumes a L1->L2 message and calls the WarpToadCore contract to update the GigaRoot\n    #[public]\n    fn update_gigaroot(new_gigaroot: Field, message_leaf_index: Field) {\n        // `secret` is used to make the consumption of a message on the L2 private.\n        // we don't care about keeping message consumption private at all so to\n        // simplify things we hardcode the secret here and the secret_hash in the L1\n        // contract.\n        let secret: Field = 0;\n\n        let content_hash = new_gigaroot;\n\n        let config = storage.config.read();\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, config.portal, message_leaf_index);\n\n        // TODO: call function on WarpToadCore\n        storage.temp_testing_giga_root.write(new_gigaroot);\n    }\n\n    // temp for testing.  Need to call 2 functions to progress the L2 2 blocks\n    #[public]\n    fn count(new_count: Field) {\n        storage.counter.write(new_count);\n    }\n\n    #[utility]\n    unconstrained fn get_giga_root() -> pub Field {\n        storage.temp_testing_giga_root.read()\n    }\n\n    // creates a L2 to L1 message publicly\n    // Sends the most recent state root to L1 to be consumed by AztecRootBridge.sol\n\t// Aztec differs from other L2s we'll support in that we can just pass the chain's \n\t// entire state root\n    #[public]\n    fn send_root_to_l1(state_root: Field) {\n        let config = storage.config.read();\n\n        let block_number = context.block_number();\n\t\t// TODO: get the current note hash tree root\n\t\t// let block_header = context.get_block_header_at(block_number);\n\t\t// let state_root = block_header.state.partial.note_hash_tree.root;\n\n        let contentHash = get_content_hash(state_root, block_number);\n\n        // Send an L2 to L1 message\n        context.message_portal(config.portal, contentHash);\n    }\n\n    // Adds this hash to the message portal.  The L1 contract should be able to reconstruct this same hash\n\t#[public]\n    fn get_content_hash(local_root: Field, block_number: Field) -> pub Field {\n\t\tdebug_log_format(\"block_number: {0}\", [block_number]);\n\t\tdebug_log_format(\"local_root: {0}\", [local_root]);\n        let mut hash_bytes = [0; 64];\n        let local_root_bytes: [u8; 32] = local_root.to_be_bytes();\n        let block_number_bytes: [u8; 32] = block_number.to_be_bytes();\n\n        for i in 0..32 {\n            hash_bytes[i] = local_root_bytes[i];\n            hash_bytes[i + 32] = block_number_bytes[i];\n        }\n\n        let content_hash = sha256_to_field(hash_bytes);\n\t\tdebug_log_format(\"content_hash: {0}\", [content_hash]);\n        content_hash\n\n    }\n\n}\n"},"61":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"63":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr","source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"},"67":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"},"89":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr","source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"},"93":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"96":{"path":"/home/joss/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr","source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"}}}